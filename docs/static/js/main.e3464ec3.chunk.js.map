{"version":3,"sources":["components/menu/MenuItem.js","components/menu/Menu.js","components/common/data-store/IndexedDB.js","components/monsters/data-store/Monsters.js","components/monsters/data-store/MonsterImages.js","components/monsters/UnitConversionCalculator.js","components/monsters/selectors/CRSelector.js","components/monsters/MonsterViewerHeader.js","components/common/modals/SimpleModal.js","components/monsters/selectors/SizeSelector.js","components/monsters/selectors/TypeSelector.js","components/monsters/selectors/AlignmentSelector.js","components/monsters/modal/NameSection.js","components/monsters/modal/CombatSection.js","components/monsters/modal/StatSection.js","components/monsters/selectors/SkillSelector.js","components/monsters/selectors/DamageTypeSelector.js","components/monsters/selectors/ConditionSelector.js","components/monsters/modal/SkillsSection.js","components/monsters/modal/AbilitiesSection.js","components/monsters/modal/ActionsSection.js","components/monsters/modal/LegendaryActionsSection.js","components/monsters/modal/MonsterImageSection.js","components/monsters/modal/DescriptionSection.js","components/monsters/modal/MonsterModal.js","components/common/modals/SelectOrEditModal.js","components/monsters/MonsterViewer.js","components/players/data-store/Players.js","components/players/PlayerViewerHeader.js","components/players/modal/PlayerModal.js","components/players/PlayerViewer.js","components/encounters/Views.js","components/encounters/data-store/Encounters.js","components/encounters/list/EncountersListHeader.js","components/encounters/list/EncountersList.js","components/encounters/data-store/EncounterHelpers.js","components/encounters/builder/EBMonsterList.js","components/encounters/builder/EBPlayerList.js","components/encounters/builder/XPThresholds.js","components/encounters/builder/EncounterBuilder.js","components/common/dnd/DroppableWrapper.js","components/common/dnd/DraggableWrapper.js","components/encounters/runner/TargetTypes.js","components/encounters/runner/TargetModal.js","components/encounters/runner/EncounterRunner.js","components/encounters/EncountersContainer.js","RootMenu.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","_ref","value","onSelect","react_default","a","createElement","className","key","onClick","defaultProps","Menu","menuItems","map","components_menu_MenuItem","database","stores","addStore","name","keyData","concat","upgrade","db","oldVersion","newVersion","transaction","forEach","store","objectStoreNames","contains","console","log","createObjectStore","getDatabase","_","keyPath","addMonster","monster","put","removeMonsterById","id","delete","buildMonsterId","xp","autoIncrement","calculateModStr","stat","numberToString","Math","floor","calculateMod","number","numbStr","toString","indexOf","calculateCR","xpToCR","0","25","50","100","200","450","700","1100","1800","2300","2900","3900","5000","5900","7200","8400","10000","11500","13000","15000","18000","20000","22000","25000","33000","41000","50000","62000","75000","90000","105000","120000","135000","155000","CRSelector","onChange","showSelect","disabled","hidden","Object","keys","MonsterViewerHeader","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","monsterList","loading","_this$props","onAddMonster","filterXp","onXPFilter","onNameFilter","filterName","placeholder","type","selectors_CRSelector","Component","SimpleModal","show","children","showHideClassName","SizeSelector","TypeSelector","AlignmentSelector","NameSection","editable","selectors_SizeSelector","size","selectors_TypeSelector","selectors_AlignmentSelector","alignment","CombatSection","onChangeNumber","ac","hp","speed","StatSection","stats","str","dex","con","int","wis","cha","SkillSelector","DamageTypeSelector","ConditionSelector","SkillsSection","onRemoveElement","bind","assertThisInitialized","onAddElement","prop","index","_this2","list","filter","element","idx","target","_this3","_this4","skill","modifier","skills","selectors_SkillSelector","damageVulnerabilities","vulnerability","selectors_DamageTypeSelector","damageResistances","resistance","damageImmunities","immunity","conditionImmunities","selectors_ConditionSelector","senses","languages","length","AbilitiesSection","descr","abilities","ability","ActionsSection","actions","action","property","split","legendaryActions","summary","MonsterImageSection","pictureURL","loadingImage","onDrop","imageKey","get","then","result","setState","catch","e","picture","reader","FileReader","onload","onImageSet","readAsDataURL","_this$state","style","maxHeight","alt","src","compiled_default","withIcon","buttonText","imgExtension","maxFileSize","noop","DescriptionSection","description","setPathValue","object","path","splitPath","location","i","currentPath","MonsterModal","event","newMonster","clone","onMonsterChange","parseInt","onSave","onCancel","onDelete","onToggleEdit","common_modals_SimpleModal","modal_NameSection","modal_CombatSection","modal_StatSection","modal_SkillsSection","modal_AbilitiesSection","modal_ActionsSection","LegendaryActionsSection","modal_DescriptionSection","modal_MonsterImageSection","SelectOrEditModal","onView","addText","viewText","toLowerCase","sortMonsterList","sort","b","nameA","toUpperCase","nameB","MonsterViewer","selectedMonster","imageURL","editing","selectOrViewMonster","viewMonster","changeMonster","onDeleteMonster","saveMonsterModel","cancelMonsterModal","changeXPFilter","changeNameFilter","onSelectMonster","mon","monsterImage","oldId","getAll","error","_this$state2","showSelectedMonster","showSelectOrViewMonster","formattedFilterName","components_monsters_MonsterViewerHeader","common_modals_SelectOrEditModal","monsters_modal_MonsterModal","nameMatch","addPlayer","player","PlayerViewerHeader","onAddPlayer","PlayerModal","newPlayer","onPlayerChange","playerName","characterName","level","maxHp","sortPlayerListByPlayer","playerList","PlayerViewer","selectedPlayer","selectOrEditPlayer","onDeletePlayer","onSavePlayer","onCancelPlayerModal","viewPlayer","changePlayer","sortMethod","onSelectPlayer","plyr","_this5","showSelectedPlayer","showSelectOrEditPlayer","components_players_PlayerViewerHeader","players_modal_PlayerModal","LIST","EncountersListHeader","onAddEncounter","sortEncounterList","encounterList","EncountersList","onDeleteEncounter","onEditEncounter","onRunEncounter","encounter","arguments","undefined","onChangeView","encounterId","_this6","encounters_list_EncountersListHeader","buildUseableEncounter","storedEncounter","monsters","players","reduce","accumulator","promiseForNextMonster","push","count","Promise","resolve","rejct","promiseForNextPlayer","EBMonsterList","closeModal","onRemoveMonster","onChangeMonsterQty","monsterGroup","EBPlayerList","onRemovePlayer","xpThresholds","easy","medium","hard","deadly","calculateDifficulty","threshold","thresholds","totalThreshold","currentValue","monsterXpAndCount","total","monsterXp","EncounterBuilder","selectingMonster","selectingPlayer","difficulty","changeName","useableEncounter","monsterId","qty","playerId","addEncounter","has","buildStorableEncounter","components_monsters_MonsterViewer","components_players_PlayerViewer","builder_EBPlayerList","builder_EBMonsterList","DroppableWrapper","react_beautiful_dnd_esm","droppableId","provided","assign","ref","innerRef","droppableProps","droppablePlaceholder","DraggableWrapper","draggableId","draggableProps","dragHandleProps","DAMAGE","TargetModal","changeDmg","changeType","dealToTarget","checked","EncounterRunner","creatureList","targetIdx","onDragEnd","selectMonster","onCloseModal","onDealToTarget","removeCreature","buildCreatureList","tmpHp","multiple","isPlayer","creature","dmg","splice","destIndex","destination","currentIndex","source","encounters_runner_TargetModal","dnd_DroppableWrapper","dnd_DraggableWrapper","buildDisplayString","selectTarget","EncountersContainer","view","encounters_list_EncountersList","encounters_builder_EncounterBuilder","encounters_runner_EncounterRunner","rootMenu","Encounters","encounters_EncountersContainer","Monster Viewer","Player Viewer","App","currentLocation","databaseLoaded","getDisplayElement","backToRootMenu","menuSelection","openDB","components_menu_Menu","displayElement","MoonLoader_default","sizeUnit","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3464ec3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MenuItem.css';\n\nconst MenuItem = ({ value , onSelect }) => {\n    return (\n        <div className=\"menu-item\" key={value} onClick={onSelect(value)}>{value}</div>\n    );\n};\n\nMenuItem.propTypes = {\n    value: PropTypes.string.isRequired,\n    onSelect: PropTypes.func.isRequired,\n};\n\nMenuItem.defaultProps = {\n\n};\n\nexport default MenuItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from './MenuItem';\n\nimport './Menu.css';\n\nconst Menu = ({ menuItems, onSelect }) => {\n    return (\n        <div className=\"menu-page\">\n            {menuItems.map(value => (<MenuItem key={value} value={value} onSelect={onSelect}/>))}\n        </div>\n    );\n};\n\nMenu.propTypes = {\n    menuItems: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onSelect: PropTypes.func.isRequired,\n}\n\nMenu.defaultProps = {\n\n}\n\nexport default Menu;","import { openDB } from 'idb';\n\nlet database = null; //loading\n\nlet stores = [];\n\nconst databaseName = '5eEncounters';\n\nexport const addStore = (name, keyData) => {\n    stores = stores.concat([{ name, keyData }]);\n};\n\nconst upgrade = (db, oldVersion, newVersion, transaction) => {\n    stores.forEach(store => {\n        if(!db.objectStoreNames.contains(store.name)) {\n            console.log('Adding datastore: ', store.name);\n            db.createObjectStore(store.name, store.keyData);\n        }\n    });\n};\n\nexport const openDatabase = _ => {\n    return openDB(databaseName, 3, { upgrade, }).then(db => {\n        database = db;\n    });\n};\n\nexport const getDatabase = _ => database;\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'monsters';\n\naddStore(storeName, {keyPath: 'id'});\n\nexport const addMonster = monster => {\n    const db = getDatabase();\n    return db.put(storeName, monster);\n};\n\nexport const removeMonsterById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getMonsterById = id => {\n    const db = getDatabase();\n    return db.get(storeName, id);\n};\n\nexport const getAllMonsters = _ => getDatabase().getAll(storeName);\n\nexport const buildEmptyMonster = _ => ({\n    name: '',\n    size: 'None',\n    type: 'None',\n    alignment: 'None',\n    stats: {\n        str: 0,\n        dex: 0,\n        con: 0,\n        int: 0,\n        wis: 0,\n        cha: 0,\n    },\n    skills: [], //{ skill, modifier }\n    xp: 0,\n    ac: 0,\n    hp: 0,\n    speed: 0,\n    damageVulnerabilities: [],\n    damageImmunities: [],\n    damageResistances: [],\n    conditionImmunities: [],\n    senses: '',\n    languages: '',\n    actions: [], //{name, descr}\n    abilities: [], //{name, descr}\n    legendaryActions: {\n        summary: '',\n        actions: [],\n    },\n    description: '',\n    imageKey: null,\n});\n\nexport const buildMonsterId = monster => {\n    monster.id = monster.name + monster.xp;\n    return monster;\n};\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'monster-images';\n\naddStore(storeName, {autoIncrement: true});\n\nexport const addMonsterImage = monsterImage => {\n    const db = getDatabase();\n    return db.put(storeName, monsterImage);\n};\n\nexport const removeMonsterImageById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getMonsterImage = id => getDatabase().get(storeName, id);","export const calculateMod = stat => Math.floor((stat - 10) / 2);\n\nexport const calculateModStr = stat => numberToString(calculateMod(stat));\n\nexport const numberToString = number => {\n    let numbStr = number.toString();\n    if(numbStr.indexOf('-') < 0) {\n        numbStr = `+${numbStr}`;\n    }\n    return numbStr;\n}\n\nexport const calculateCR = xp => xpToCR[xp];\n\nexport const xpToCR = {\n    0: '0',\n    25: '1/8',\n    50: '1/4',\n    100: '1/2',\n    200: '1',\n    450: '2',\n    700: '3',\n    1100: '4',\n    1800: '5',\n    2300: '6',\n    2900: '7',\n    3900: '8',\n    5000: '9',\n    5900: '10',\n    7200: '11',\n    8400: '12',\n    10000: '13',\n    11500: '14',\n    13000: '15',\n    15000: '16',\n    18000: '17',\n    20000: '18',\n    22000: '19',\n    25000: '20',\n    33000: '21',\n    41000: '22',\n    50000: '23',\n    62000: '24',\n    75000: '25',\n    90000: '26',\n    105000: '27',\n    120000: '28',\n    135000: '29',\n    155000: '30',\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { xpToCR } from '../UnitConversionCalculator';\n\nconst CRSelector = ({ onChange, value, showSelect }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value='' disabled={!showSelect} hidden={!showSelect}>Select CR</option>\n            { Object.keys(xpToCR).map(xp => (\n                <option key={xp} value={xp}>{`${xpToCR[xp]} (${xp} exp)`}</option>\n            ))}\n        </select>\n    );\n};\n\nCRSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    showSelect: PropTypes.bool,\n}\n\nCRSelector.defaultProps = {\n    showSelect: false,\n}\n\nexport default CRSelector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CRSelector from './selectors/CRSelector';\n\nimport './MonsterViewerHeader.css';\n\nclass MonsterViewerHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsterList: [],\n            loading: true,\n        };\n        /*this.getDisplayElement = this.getDisplayElement.bind(this);*/\n    }\n\n    render() {\n        const { onAddMonster, filterXp, onXPFilter, onNameFilter, filterName } = this.props;\n        return (\n            <div className='monster-viewer-header'>\n                <div className='mvh-row'>\n                    <input\n                        className='mvh-filter'\n                        placeholder='Filter By Monster Name'\n                        type='search'\n                        value={filterName || ''}\n                        onChange={onNameFilter}\n                    />\n                    <div className='mvh-left-margin'>\n                        <CRSelector\n                            value={filterXp == null ? '' : filterXp.toString()}\n                            onChange={onXPFilter}\n                            showSelect={true}\n                        />\n                    </div>\n                </div>\n                <button onClick={onAddMonster}>Add Monster</button>\n            </div>\n        );\n    }\n}\n\nMonsterViewerHeader.propTypes = {\n    filterXp: PropTypes.number,\n    filterName: PropTypes.string,\n    onAddMonster: PropTypes.func.isRequired,\n    onXPFilter: PropTypes.func.isRequired,\n    onNameFilter: PropTypes.func.isRequired,\n};\n\nMonsterViewerHeader.defaultProps = {\n    filterXp: null,\n    filterName: null,\n};\n\nexport default MonsterViewerHeader;\n","import React from 'react';\n\nimport './SimpleModal.css';\n\nconst SimpleModal = ({ show, children }) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <section className=\"modal-main\">\n          {children}\n        </section>\n      </div>\n    );\n  };\n\nexport default SimpleModal;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SizeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Size</option>\n            <option value=\"Tiny\">Tiny</option>\n            <option value=\"Small\">Small</option>\n            <option value=\"Medium\">Medium</option>\n            <option value=\"Large\">Large</option>\n            <option value=\"Huge\">Huge</option>\n            <option value=\"Gargantuan\">Gargantuan</option>\n        </select>\n    );\n};\n\nSizeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nSizeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default SizeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TypeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Monster Type</option>\n            <option value=\"Aberration\">Aberration</option>\n            <option value=\"Beast\">Beast</option>\n            <option value=\"Celestial\">Celestial</option>\n            <option value=\"Construct\">Construct</option>\n            <option value=\"Dragon\">Dragon</option>\n            <option value=\"Elemental\">Elemental</option>\n            <option value=\"Fey\">Fey</option>\n            <option value=\"Fiend\">Fiend</option>\n            <option value=\"Giant\">Giant</option>\n            <option value=\"Humanoid\">Humanoid</option>\n            <option value=\"Monstrosity\">Monstrosity</option>\n            <option value=\"Ooze\">Ooze</option>\n            <option value=\"Plant\">Plant</option>\n            <option value=\"Undead\">Undead</option>\n        </select>\n    );\n};\n\nTypeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nTypeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default TypeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlignmentSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Alignment</option>\n            <option value=\"Unaligned\">Unaligned</option>\n            <option value=\"Lawful Good\">Lawful Good</option>\n            <option value=\"Neutral Good\">Neutral Good</option>\n            <option value=\"Chaotic Good\">Chaotic Good</option>\n            <option value=\"Lawful Neutral\">Lawful Neutral</option>\n            <option value=\"True Neutral\">True Neutral</option>\n            <option value=\"Chaotic Neutral\">Chaotic Neutral</option>\n            <option value=\"Lawful Evil\">Lawful Evil</option>\n            <option value=\"Neutral Evil\">Neutral Evil</option>\n            <option value=\"Chaotic Evil\">Chaotic Evil</option>\n        </select>\n    );\n};\n\nAlignmentSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nAlignmentSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default AlignmentSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SizeSelector from '../selectors/SizeSelector';\nimport TypeSelector from '../selectors/TypeSelector';\nimport AlignmentSelector from '../selectors/AlignmentSelector';\n\nimport './MonsterModal.css';\n\nconst NameSection = ({ onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <input type='text' placeholder='Monster Name' onChange={onChange('name')} value={monster.name || ''}/>\n                <div className='monster-form-row-section'>\n                    <SizeSelector value={monster.size || 'None'} onChange={onChange('size')}/>\n                    <div className='left-margin'><TypeSelector value={monster.type || 'None'} onChange={onChange('type')}/></div>\n                    <div className='left-margin'><AlignmentSelector value={monster.alignment || 'None'} onChange={onChange('alignment')}/></div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <span className='red-text bold-text'>{monster.name}</span>\n            <span>{`${monster.size} ${monster.type}, ${monster.alignment}`}</span>\n        </div>\n    );\n};\n\nNameSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nNameSection.defaultProps = {\n}\n\nexport default NameSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nconst CombatSection = ({ onChangeNumber, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <input className=\"top-margin\" type='number' placeholder='AC' onChange={onChangeNumber('ac')} value={monster.ac || ''}/>\n                <input className=\"top-margin\" type='number' placeholder='HP' onChange={onChangeNumber('hp')} value={monster.hp || ''}/>\n                <input className=\"top-margin\" type='number' placeholder='Speed (ft)' onChange={onChangeNumber('speed')} value={monster.speed || ''}/>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Armor Class:&nbsp;</span>\n                <span className='red-text'>{monster.ac}</span>\n            </div>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Hit Points:&nbsp;</span>\n                <span className='red-text'>{monster.hp}</span>\n            </div>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Speed:&nbsp;</span>\n                <span className='red-text'>{monster.speed} ft.</span>\n            </div>\n        </div>\n    );\n};\n\nCombatSection.propTypes = {\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nCombatSection.defaultProps = {\n}\n\nexport default CombatSection;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { calculateModStr } from '../UnitConversionCalculator';\n\nimport './MonsterModal.css';\n\nconst StatSection = ({ onChangeNumber, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className=\"row-container center-container\">\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='STR' onChange={onChangeNumber('stats.str')} value={monster.stats.str || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.str)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='DEX' onChange={onChangeNumber('stats.dex')} value={monster.stats.dex || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.dex)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='CON' onChange={onChangeNumber('stats.con')} value={monster.stats.con || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.con)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='INT' onChange={onChangeNumber('stats.int')} value={monster.stats.int || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.int)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='WIS' onChange={onChangeNumber('stats.wis')} value={monster.stats.wis || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.wis)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='CHA' onChange={onChangeNumber('stats.cha')} value={monster.stats.cha || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.cha)}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <div className=\"row-container center-container\">\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">STR</div>\n                    <div className=\"red-text\">{`${monster.stats.str} (${calculateModStr(monster.stats.str)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">DEX</div>\n                    <div className=\"red-text\">{`${monster.stats.dex} (${calculateModStr(monster.stats.dex)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">CON</div>\n                    <div className=\"red-text\">{`${monster.stats.con} (${calculateModStr(monster.stats.con)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">INT</div>\n                    <div className=\"red-text\">{`${monster.stats.int} (${calculateModStr(monster.stats.int)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">WIS</div>\n                    <div className=\"red-text\">{`${monster.stats.wis} (${calculateModStr(monster.stats.wis)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">CHA</div>\n                    <div className=\"red-text\">{`${monster.stats.cha} (${calculateModStr(monster.stats.cha)})`}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nStatSection.propTypes = {\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nStatSection.defaultProps = {\n}\n\nexport default StatSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SkillSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Skill</option>\n            <option value=\"Acrobatics\">Acrobatics</option>\n            <option value=\"Animal Handling\">Animal Handling</option>\n            <option value=\"Arcana\">Arcana</option>\n            <option value=\"Athletics\">Athletics</option>\n            <option value=\"Deception\">Deception</option>\n            <option value=\"History\">History</option>\n            <option value=\"Insight\">Insight</option>\n            <option value=\"Intimidation\">Intimidation</option>\n            <option value=\"Investigation\">Investigation</option>\n            <option value=\"Medicine\">Medicine</option>\n            <option value=\"Nature\">Nature</option>\n            <option value=\"Perception\">Perception</option>\n            <option value=\"Performance\">Performance</option>\n            <option value=\"Persuasion\">Persuasion</option>\n            <option value=\"Religion\">Religion</option>\n            <option value=\"Sleight of Hand\">Sleight of Hand</option>\n            <option value=\"Stealth\">Stealth</option>\n            <option value=\"Survival\">Survival</option>\n        </select>\n    );\n};\n\nSkillSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nSkillSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default SkillSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DamageTypeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Damage Type</option>\n            <option value=\"Acid\">Acid</option>\n            <option value=\"Bludgeoning\">Bludgeoning</option>\n            <option value=\"Cold\">Cold</option>\n            <option value=\"Fire\">Fire</option>\n            <option value=\"Force\">Force</option>\n            <option value=\"Lightning\">Lightning</option>\n            <option value=\"Necrotic\">Necrotic</option>\n            <option value=\"Piercing\">Piercing</option>\n            <option value=\"Poison\">Poison</option>\n            <option value=\"Psychic\">Psychic</option>\n            <option value=\"Radiant\">Radiant</option>\n            <option value=\"Slashing\">Slashing</option>\n            <option value=\"Thunder\">Thunder</option>\n        </select>\n    );\n};\n\nDamageTypeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nDamageTypeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default DamageTypeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ConditionSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Condition</option>\n            <option value=\"Blinded\">Blinded</option>\n            <option value=\"Charmed\">Charmed</option>\n            <option value=\"Deafened\">Deafened</option>\n            <option value=\"Fatigued\">Fatigued</option>\n            <option value=\"Frightened\">Frightened</option>\n            <option value=\"Grappled\">Grappled</option>\n            <option value=\"Incapacitated\">Incapacitated</option>\n            <option value=\"Invisible\">Invisible</option>\n            <option value=\"Paralyzed\">Paralyzed</option>\n            <option value=\"Petrified\">Petrified</option>\n            <option value=\"Poisoned\">Poisoned</option>\n            <option value=\"Prone\">Prone</option>\n            <option value=\"Restrained\">Restrained</option>\n            <option value=\"Stunned\">Stunned</option>\n            <option value=\"Unconscious\">Unconscious</option>\n            <option value=\"Exhaustion\">Exhaustion</option>\n        </select>\n    );\n};\n\nConditionSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nConditionSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default ConditionSelector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { numberToString, calculateCR } from '../UnitConversionCalculator';\nimport SkillSelector from '../selectors/SkillSelector';\nimport DamageTypeSelector from '../selectors/DamageTypeSelector';\nimport ConditionSelector from '../selectors/ConditionSelector';\n\nimport './MonsterModal.css';\nimport CRSelector from '../selectors/CRSelector';\n\nclass SkillsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange, onChangeNumber} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className=\"column-continer\">\n                        <div className=\"row-container\">Skills <button onClick={this.onAddElement('skills', {skill: 'None', modifier: 0})} className=\"left-margin\">Add Skill</button></div> \n                        {monster.skills.map((skill, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <SkillSelector value={skill.skill} onChange={onChange(`skills.${idx}.skill`)}/>\n                                <input className='left-margin number-size' type='number' value={skill.modifier} onChange={onChangeNumber(`skills.${idx}.modifier`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('skills', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Vulnerabilities <button onClick={this.onAddElement('damageVulnerabilities', 'None')} className=\"left-margin\">Add Vulnerability</button></div> \n                        {monster.damageVulnerabilities.map((vulnerability, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <DamageTypeSelector value={vulnerability} onChange={onChange(`damageVulnerabilities.${idx}`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('damageVulnerabilities', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Resistances <button onClick={this.onAddElement('damageResistances', 'None')} className=\"left-margin\">Add Resistance</button></div> \n                        {monster.damageResistances.map((resistance, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <DamageTypeSelector value={resistance} onChange={onChange(`damageResistances.${idx}`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('damageResistances', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Immunities <button onClick={this.onAddElement('damageImmunities', 'None')} className=\"left-margin\">Add Immunity</button></div> \n                        {monster.damageImmunities.map((immunity, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <DamageTypeSelector value={immunity} onChange={onChange(`damageImmunities.${idx}`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('damageImmunities', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Condition Immunities <button onClick={this.onAddElement('conditionImmunities', 'None')} className=\"left-margin\">Add Immunity</button></div> \n                        {monster.conditionImmunities.map((immunity, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <ConditionSelector value={immunity} onChange={onChange(`conditionImmunities.${idx}`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('conditionImmunities', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <textarea className='top-margin textarea-size' value={monster.senses} onChange={onChange('senses')} placeholder='Senses'/>\n                    <textarea className='top-margin textarea-size' value={monster.languages} onChange={onChange('languages')} placeholder='Languages'/>\n                    <div className='row-container top-margin'>\n                        CR:\n                        <div className='left-margin'><CRSelector value={monster.xp.toString()} onChange={onChangeNumber('xp')}/></div>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                {monster.skills.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Skills&nbsp;</span>\n                        <span className='red-text'>{monster.skills.map((skill, idx) => `${idx === 0 ? '' : ', '}${skill.skill} ${numberToString(skill.modifier)}`)}</span>\n                    </div>\n                )}\n                {monster.damageVulnerabilities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Vulnerabilities&nbsp;</span>\n                        <span className='red-text'>{monster.damageVulnerabilities.map((vulnerability, idx) => `${idx === 0 ? '' : ', '}${vulnerability}`)}</span>\n                    </div>\n                )}\n                {monster.damageResistances.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Resistances&nbsp;</span>\n                        <span className='red-text'>{monster.damageResistances.map((resistance, idx) => `${idx === 0 ? '' : ', '}${resistance}`)}</span>\n                    </div>\n                )}\n                {monster.damageImmunities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Immunities&nbsp;</span>\n                        <span className='red-text'>{monster.damageImmunities.map((immunity, idx) => `${idx === 0 ? '' : ', '}${immunity}`)}</span>\n                    </div>\n                )}\n                {monster.conditionImmunities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Condition Immunities&nbsp;</span>\n                        <span className='red-text'>{monster.conditionImmunities.map((immunity, idx) => `${idx === 0 ? '' : ', '}${immunity}`)}</span>\n                    </div>\n                )}\n                {monster.senses !== '' && monster.senses != null && (\n                    <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Senses&nbsp;</span>\n                        <span className='red-text'>{monster.senses}</span>\n                    </div>\n                )}\n                {monster.languages !== '' && monster.languages != null && (\n                    <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Languages&nbsp;</span>\n                        <span className='red-text'>{monster.languages}</span>\n                    </div>\n                )}\n                <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Challenge&nbsp;</span>\n                        <span className='red-text'>{`${calculateCR(monster.xp)} (${monster.xp} XP)`}</span>\n                </div>\n\n            </div>\n        );\n    }\n};\n\nSkillsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nSkillsSection.defaultProps = {\n}\n\nexport default SkillsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass AbilitiesSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Abilities: <button className='left-margin' onClick={this.onAddElement('abilities', {name: '', descr: ''})}>Add Ability</button>\n                    </div>\n                    {monster.abilities.map((ability, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Ability Name' value={ability.name} onChange={onChange(`abilities.${idx}.name`)}/>\n                            <textarea className='mm-margin-element textarea-size' placeholder='Ability Description' value={ability.descr} onChange={onChange(`abilities.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('abilities', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if (monster.abilities.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom mm-align-left'>\n                {monster.abilities.map((ability, idx) => (\n                    <div key={idx}>\n                        <span className='bold-text'>{ability.name}&nbsp;</span>\n                        <span>{ability.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nAbilitiesSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nAbilitiesSection.defaultProps = {\n}\n\nexport default AbilitiesSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass ActionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Actions: <button className='left-margin' onClick={this.onAddElement('actions', {name: '', descr: ''})}>Add Action</button>\n                    </div>\n                    {monster.actions.map((action, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Action Name' value={action.name} onChange={onChange(`actions.${idx}.name`)}/>\n                            <textarea className='textarea-size mm-margin-element' placeholder='Action Description' value={action.descr} onChange={onChange(`actions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('actions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(monster.actions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Actions</div>\n                {monster.actions.map((action, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{action.name}&nbsp;</span>\n                        <span>{action.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nActionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nActionsSection.defaultProps = {\n}\n\nexport default ActionsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { property } from 'underscore';\n\nimport './MonsterModal.css';\n\nclass ActionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = (property(prop.split('.'))(this.props.monster)).filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = (property(prop.split('.'))(this.props.monster)).concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Legendary Actions: <button className='left-margin' onClick={this.onAddElement('legendaryActions.actions', {name: '', descr: ''})}>Add Action</button>\n                    </div>\n                    <textarea className='top-margin textarea-size' placeholder='Legendary Action Summary and Restrictions' onChange={onChange('legendaryActions.summary')} value={monster.legendaryActions.summary}/>\n                    {monster.legendaryActions.actions.map((action, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' placeholder='Action Name' type='text' value={action.name} onChange={onChange(`legendaryActions.actions.${idx}.name`)}/>\n                            <textarea className='mm-margin-element textarea-size' placeholder='Action Description' value={action.descr} onChange={onChange(`legendaryActions.actions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('legendaryActions.actions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(monster.legendaryActions.actions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Legendary Actions</div>\n                <div>{monster.legendaryActions.summary}</div>\n                {monster.legendaryActions.actions.map((action, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{action.name}&nbsp;</span>\n                        <span>{action.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nActionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nActionsSection.defaultProps = {\n}\n\nexport default ActionsSection;","import React, { Component } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport PropTypes from 'prop-types';\nimport { noop } from 'underscore';\nimport { getMonsterImage } from '../data-store/MonsterImages';\n\nimport './MonsterModal.css';\n\nclass MonsterImageSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pictureURL: null,\n            loadingImage: false,\n        };\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    componentDidMount() {\n        const { monster } = this.props;\n        if(monster.imageKey != null) {\n            getMonsterImage(monster.imageKey).then(result => {\n                this.setState({\n                    pictureURL: result,\n                })\n            }).catch(e => {\n                monster.imageKey = null;\n            });\n            this.setState({\n                loadingImage: true,\n            });\n        }\n    }\n\n    onDrop(picture) {\n        const reader = new FileReader();\n        reader.onload = _ => {\n            this.props.onImageSet(reader.result);\n            this.setState({\n                pictureURL: reader.result,\n                loadingImage: false,\n            });\n        }\n        reader.readAsDataURL(picture[0]);\n        this.setState({\n            loadingImage: true,\n        })\n    }\n\n    render() {\n        const { loadingImage, pictureURL } = this.state;\n        const { editable } = this.props;\n        if(!loadingImage && pictureURL == null) {\n            if(editable) {\n                return (\n                    <ImageUploader\n                        withIcon={true}\n                        buttonText='Choose images'\n                        onChange={this.onDrop}\n                        imgExtension={['.jpg', '.jpeg', '.gif', '.png', '.gif']}\n                        maxFileSize={5242880}\n                    />\n                );\n            }\n            return null;\n        }\n        return (\n            <div className=\"row-container center-container\">\n                <img style={{maxHeight: '20em'}} alt=\"Loading...\" src={pictureURL}/>\n            </div>\n        );\n    }\n};\n\nMonsterImageSection.propTypes = {\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool,\n    onImageSet: PropTypes.func,\n}\n\nMonsterImageSection.defaultProps = {\n    editable: false,\n    onImageSet: noop,\n}\n\nexport default MonsterImageSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nconst DescriptionSection = ({ onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div>Description:</div>\n                <textarea className='textarea-size top-margin' onChange={onChange('description')} value={monster.description}/>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom mm-align-left'>\n            <span>{monster.description}</span>\n        </div>\n    );\n};\n\nDescriptionSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nDescriptionSection.defaultProps = {\n}\n\nexport default DescriptionSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, clone } from 'underscore';\nimport SimpleModal from '../../common/modals/SimpleModal';\nimport NameSection from './NameSection';\nimport CombatSection from './CombatSection';\nimport StatSection from './StatSection';\nimport SkillsSection from './SkillsSection';\nimport AbilitiesSection from './AbilitiesSection';\nimport ActionsSection from './ActionsSection';\nimport LegendaryActionsSection from './LegendaryActionsSection';\nimport MonsterImageSection from './MonsterImageSection';\nimport DescriptionSection from './DescriptionSection';\n\nimport './MonsterModal.css';\n\nconst setPathValue = (object, path, value) => {\n    const splitPath = path.split(\".\");\n    let location = object;\n    for(let i = 0; i < splitPath.length; i++) {\n        const currentPath = splitPath[i];\n        if(i === splitPath.length -1) {\n            location[currentPath] = value;\n        } else {\n            if(location[currentPath] == null) {\n                location[currentPath] = {};\n            }\n            location = location[currentPath];\n        }\n    }\n}\n\nclass MonsterModal extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeNumber = this.onChangeNumber.bind(this);\n    }\n\n    onChange(path) {\n        const { monster } = this.props;\n        return event => {\n            const value = event.target.value;\n            const newMonster = clone(monster);\n            setPathValue(newMonster, path, value);\n            this.props.onMonsterChange(newMonster);\n        }\n    }\n\n    onChangeNumber(path) {\n        const { monster } = this.props;\n        return event => {\n            const value = parseInt(event.target.value);\n            const newMonster = clone(monster);\n            setPathValue(newMonster, path, value);\n            this.props.onMonsterChange(newMonster);\n        }\n    }\n\n    render() {\n        const { editable, show, monster, onSave, onCancel, onDelete, onImageSet, onToggleEdit } = this.props;\n        if(monster == null) {\n            return null;\n        }\n        return (\n            <SimpleModal show={show}>\n                <div className='monster-form'>\n                    <NameSection editable={editable} monster={monster} onChange={this.onChange}/>\n                    <CombatSection editable={editable} monster={monster} onChangeNumber={this.onChangeNumber} />\n                    <StatSection editable={editable} monster={monster} onChangeNumber={this.onChangeNumber}/>\n                    <SkillsSection editable={editable} monster={monster} onChange={this.onChange} onChangeNumber={this.onChangeNumber} />\n                    <AbilitiesSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <ActionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <LegendaryActionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <DescriptionSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <div className='monster-form-section'>\n                        <MonsterImageSection editable={editable} monster={monster} onImageSet={onImageSet}/>\n                    </div>\n                    { editable ? (\n                    <div className='row-container-space-between top-margin'>\n                        <button onClick={onSave}>Save</button>\n                        {monster.id != null && <button onClick={onDelete}>Delete</button>}\n                        <button onClick={onCancel}>Cancel</button>\n                    </div>) :\n                    <div className='row-container-space-between top-margin'>\n                        {onToggleEdit !== noop && <button onClick={onToggleEdit}>Edit</button>}\n                        <button onClick={onCancel}>Close</button>\n                    </div>\n                    }\n\n                </div>\n\n            </SimpleModal>\n        );\n    }\n}\n\nMonsterModal.propTypes = {\n    monster: PropTypes.shape({\n\n    }),\n    editable: PropTypes.bool,\n    show: PropTypes.bool.isRequired,\n    onSave: PropTypes.func,\n    onCancel: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n    onImageSet: PropTypes.func,\n    onToggleEdit: PropTypes.func,\n};\n\nMonsterModal.defaultProps = {\n    monster: null,\n    editable: false,\n    onMonsterChange: noop,\n    onSave: noop,\n    onDelete: noop,\n    onImageSet: noop,\n    onToggleEdit: noop,\n};\n\nexport default MonsterModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from './SimpleModal';\n\nimport './SelectOrEditModal.css';\n\nconst SelectOrEditModal = ({ onSelect, onView, addText, viewText, show }) => {\n    return (\n        <SimpleModal show={show}>\n            <div className='soem-container'>\n                <div className='soem-element'>{`${addText} or ${viewText.toLowerCase()} element.`}</div>\n                <div className='soem-button-row'>\n                    <button className='soem-element' onClick={onSelect}>{addText}</button>\n                    <button className='soem-element' onClick={onView}>{viewText}</button>\n                </div>\n            </div>\n        </SimpleModal>\n    );\n};\n\nSelectOrEditModal.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onView: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired,\n    addText: PropTypes.string,\n    viewText: PropTypes.string,\n}\n\nSelectOrEditModal.defaultProps = {\n    addText: 'Select',\n    viewText: 'View',\n}\n\nexport default SelectOrEditModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n//import MoonLoader from 'react-spinners/MoonLoader';\nimport { getAllMonsters, buildEmptyMonster, buildMonsterId, addMonster, removeMonsterById } from './data-store/Monsters';\nimport { addMonsterImage, removeMonsterImageById } from './data-store/MonsterImages';\nimport MonsterViewerHeader from './MonsterViewerHeader';\nimport MonsterModal from './modal/MonsterModal';\nimport { calculateCR } from './UnitConversionCalculator';\nimport SelectOrEditModal from '../common/modals/SelectOrEditModal';\n\nimport './MonsterViewer.css';\n\nconst sortMonsterList = monsterList => {\n    return monsterList.sort((a, b) => {\n        const nameA = a.id.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.id.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass MonsterViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsterList: [],\n            // loading: true,\n            selectedMonster: null,\n            imageURL: null,\n            filterXp: null,\n            filterName: null,\n            editing: false,\n            selectOrViewMonster: null,\n        };\n        this.onAddMonster = this.onAddMonster.bind(this);\n        this.onImageSet = this.onImageSet.bind(this);\n        this.onMonsterChange = this.onMonsterChange.bind(this);\n        this.viewMonster = this.viewMonster.bind(this);\n        this.changeMonster = this.changeMonster.bind(this);\n        this.onDeleteMonster = this.onDeleteMonster.bind(this);\n        this.saveMonsterModel = this.saveMonsterModel.bind(this);\n        this.cancelMonsterModal = this.cancelMonsterModal.bind(this);\n        this.changeXPFilter = this.changeXPFilter.bind(this);\n        this.changeNameFilter = this.changeNameFilter.bind(this);\n        this.onToggleEdit = this.onToggleEdit.bind(this);\n    }\n\n    onAddMonster() {\n        this.setState({\n            selectedMonster: buildEmptyMonster(),\n            imageURL: null,\n            editing: true,\n        });\n    }\n\n    onImageSet(imageURL) {\n        this.setState({\n            imageURL,\n        })\n    }\n\n    onToggleEdit() {\n        this.setState({\n            editing: true,\n        })\n    }\n\n    onMonsterChange(monster) {\n        this.setState({\n            selectedMonster: monster,\n            selectOrViewMonster: null,\n        });\n    }\n\n    viewMonster(monster) {\n        this.onMonsterChange(monster);\n    }\n\n    changeMonster(monster) {\n        return _ => {\n            if(this.props.onSelectMonster == null) {\n                this.onMonsterChange(monster);\n            } else {\n                this.setState({\n                    selectOrViewMonster: monster,\n                })\n            }\n        };\n    }\n\n    cancelMonsterModal() {\n        this.setState({\n            selectedMonster: null,\n            imageURL: null,\n            editing: false\n        });\n    }\n\n    onDeleteMonster() {\n        const monster = this.state.selectedMonster;\n        let { monsterList } = this.state;\n        monsterList = monsterList.filter(mon => mon.id !== monster.id);\n        if(monster.imageKey) {\n            removeMonsterImageById(monster.imageKey);\n        }\n        removeMonsterById(monster.id);\n        this.setState({\n            selectedMonster: null,\n            monsterList: sortMonsterList(monsterList),\n            imageURL: null,\n            editing: false,\n        });\n    }\n\n    saveMonsterModel() {\n        const monster = this.state.selectedMonster;\n        let { monsterList, imageURL } = this.state;\n        if(monster.id == null) {\n            buildMonsterId(monster);\n            monsterList = monsterList.concat([monster])\n            if(imageURL) {\n                console.log('saving image');\n                addMonsterImage(imageURL).then(id => {\n                    console.log('id', id);\n                    monster.imageKey = id;\n                    addMonster(monster);\n                })\n            } else {\n                addMonster(monster);\n            }\n        } else {\n            const oldId = monster.id;\n            monsterList = monsterList.filter(mon => mon.id !== monster.id);\n            buildMonsterId(monster);\n            monsterList = monsterList.concat([monster]);\n            removeMonsterById(oldId).then(_ => addMonster(monster));\n        }\n        this.setState({\n            selectedMonster: null,\n            monsterList: sortMonsterList(monsterList),\n            imageURL: null,\n            editing: false,\n        });\n    }\n\n    componentDidMount(props) {\n        getAllMonsters().then(monsterList => {\n            this.setState({\n                monsterList: sortMonsterList(monsterList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    changeNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    changeXPFilter(event) {\n        const xp = event.target.value;\n        this.setState({\n            filterXp: xp === '' ? null : parseInt(xp),\n        });\n    }\n\n    render() {\n        const { onSelectMonster } = this.props;\n        const { monsterList, selectedMonster, filterName, filterXp, editing, selectOrViewMonster } = this.state;\n        const showSelectedMonster = selectedMonster != null;\n        const showSelectOrViewMonster = selectOrViewMonster != null;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='mv-view'>\n            <MonsterViewerHeader\n                filterXp={filterXp}\n                filterName={filterName}\n                onAddMonster={this.onAddMonster}\n                onNameFilter={this.changeNameFilter}\n                onXPFilter={this.changeXPFilter}\n            />\n            <SelectOrEditModal\n                onSelect={_ => onSelectMonster(selectOrViewMonster)}\n                onView={_ => this.viewMonster(selectOrViewMonster)}\n                show={showSelectOrViewMonster}\n            />\n            <MonsterModal\n                monster={selectedMonster}\n                show={showSelectedMonster}\n                onSave={this.saveMonsterModel}\n                onCancel={this.cancelMonsterModal}\n                onMonsterChange={this.onMonsterChange}\n                onImageSet={this.onImageSet}\n                onDelete={this.onDeleteMonster}\n                editable={editing}\n                onToggleEdit={this.onToggleEdit}\n            />\n            {monsterList.filter(monster => {\n                const nameMatch = formattedFilterName == null || monster.name.toUpperCase().indexOf(formattedFilterName) >= 0;\n                const xpMatch = filterXp == null || monster.xp === filterXp;\n                return xpMatch && nameMatch;\n            }).map(monster => (\n                <div className='mv-monster' key={monster.id} onClick={this.changeMonster(monster)}>\n                    {`${monster.name} CR ${calculateCR(monster.xp)}`}\n                </div>\n            ))}\n        </div>\n        );\n    }\n}\n\nMonsterViewer.propTypes = {\n    onSelectMonster: PropTypes.func,\n}\n\nMonsterViewer.defaultProps = {\n    onSelectMonster: null,\n}\n\nexport default MonsterViewer;\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'players';\n\naddStore(storeName, {keyPath: 'id', autoIncrement: true});\n\nexport const addPlayer = player => {\n    const db = getDatabase();\n    return db.put(storeName, player);\n};\n\nexport const removePlayerById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getPlayerById = id => {\n    const db = getDatabase();\n    return db.get(storeName, id);\n};\n\nexport const getAllPlayers = _ => getDatabase().getAll(storeName);\n\nexport const buildEmptyPlayer = _ => ({\n    playerName: '',\n    characterName: '',\n    level: 0,\n    maxHp: 0,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PlayerViewerHeader.css';\n\nclass PlayerViewerHeader extends Component {\n    /*constructor(props) {\n        super(props);\n        //this.getDisplayElement = this.getDisplayElement.bind(this);\n    }*/\n\n    render() {\n        const { onAddPlayer, onNameFilter, filterName } = this.props;\n        return (\n            <div className='player-viewer-header'>\n                <input\n                    className='pvh-first-element'\n                    placeholder='Filter By Player Name'\n                    type='search'\n                    value={filterName || ''}\n                    onChange={onNameFilter}\n                />\n                <button className='pvh-last-element' onClick={onAddPlayer}>Add Player</button>\n            </div>\n        );\n    }\n}\n\nPlayerViewerHeader.propTypes = {\n    filterName: PropTypes.string,\n    onNameFilter: PropTypes.func.isRequired,\n    onAddPlayer: PropTypes.func.isRequired,\n};\n\nPlayerViewerHeader.defaultProps = {\n    filterName: null,\n};\n\nexport default PlayerViewerHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, clone } from 'underscore';\nimport SimpleModal from '../../common/modals/SimpleModal';\n\nimport './PlayerModal.css';\n\nconst setPathValue = (object, path, value) => {\n    const splitPath = path.split(\".\");\n    let location = object;\n    for(let i = 0; i < splitPath.length; i++) {\n        const currentPath = splitPath[i];\n        if(i === splitPath.length -1) {\n            location[currentPath] = value;\n        } else {\n            if(location[currentPath] == null) {\n                location[currentPath] = {};\n            }\n            location = location[currentPath];\n        }\n    }\n}\n\nclass PlayerModal extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeNumber = this.onChangeNumber.bind(this);\n    }\n\n    onChange(path) {\n        const { player } = this.props;\n        return event => {\n            const value = event.target.value;\n            const newPlayer = clone(player);\n            setPathValue(newPlayer, path, value);\n            this.props.onPlayerChange(newPlayer);\n        }\n    }\n\n    onChangeNumber(path) {\n        const { player } = this.props;\n        return event => {\n            const value = parseInt(event.target.value);\n            const newPlayer = clone(player);\n            setPathValue(newPlayer, path, value);\n            this.props.onPlayerChange(newPlayer);\n        }\n    }\n\n    render() {\n        const { show, player, onSave, onCancel, onDelete } = this.props;\n        if(player == null) {\n            return null;\n        }\n        return (\n            <SimpleModal show={show}>\n                <div className='player-modal-form'>\n                    <div className='pm-row-container pm-flex-start pm-margin-top'>\n                        <input\n                            className='pm-first-element'\n                            type='text'\n                            placeholder='Player Name'\n                            onChange={this.onChange('playerName')} value={player.playerName || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-input'\n                            type='text'\n                            placeholder='Character Name'\n                            onChange={this.onChange('characterName')} value={player.characterName || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-number-input'\n                            type='number'\n                            placeholder='Level'\n                            onChange={this.onChangeNumber('level')} value={player.level || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-number-input'\n                            type='number'\n                            placeholder='Max Hp'\n                            onChange={this.onChangeNumber('maxHp')} value={player.maxHp || ''}\n                        />\n                    </div>\n                    <div className='pm-row-container pm-space-between pm-margin-top pm-margin-bottom'>\n                        <button className='pm-first-element' onClick={onSave}>Save</button>\n                        {player.id != null && <button className='pm-element' onClick={onDelete}>Delete</button>}\n                        <button className='pm-last-element' onClick={onCancel}>Cancel</button>\n                    </div>\n                </div>\n\n            </SimpleModal>\n        );\n    }\n}\n\nPlayerModal.propTypes = {\n    player: PropTypes.shape({\n\n    }),\n    show: PropTypes.bool.isRequired,\n    onSave: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n    onPlayerChange: PropTypes.func,\n};\n\nPlayerModal.defaultProps = {\n    player: null,\n    onPlayerChange: noop,\n    onDelete: noop,\n};\n\nexport default PlayerModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllPlayers, removePlayerById, addPlayer, buildEmptyPlayer } from './data-store/Players';\nimport PlayerViewerHeader from './PlayerViewerHeader';\n\nimport './PlayerViewer.css';\nimport PlayerModal from './modal/PlayerModal';\nimport SelectOrEditModal from '../common/modals/SelectOrEditModal';\n\n/*const sortPlayerListByCharacter = playerList => {\n    return playerList.sort((a, b) => {\n        const nameA = a.characterName.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.characterName.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}*/\n\nconst sortPlayerListByPlayer = playerList => {\n    return playerList.sort((a, b) => {\n        const nameA = a.playerName.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.playerName.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass PlayerViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerList: [],\n            loading: true,\n            filterName: null,\n            selectedPlayer: null,\n            selectOrEditPlayer: null,\n        };\n        this.onNameFilter = this.onNameFilter.bind(this);\n        this.onDeletePlayer = this.onDeletePlayer.bind(this);\n        this.onSavePlayer = this.onSavePlayer.bind(this);\n        this.onCancelPlayerModal = this.onCancelPlayerModal.bind(this);\n        this.onPlayerChange = this.onPlayerChange.bind(this);\n        this.viewPlayer = this.viewPlayer.bind(this);\n        this.changePlayer = this.changePlayer.bind(this);\n        this.onAddPlayer = this.onAddPlayer.bind(this);\n        this.sortMethod = sortPlayerListByPlayer;\n    }\n\n    componentDidMount() {\n        getAllPlayers().then(playerList => {\n            this.setState({\n                playerList: this.sortMethod(playerList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    onNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    onPlayerChange(player) {\n        this.setState({\n            selectedPlayer: player,\n            selectOrEditPlayer: null,\n        });\n    }\n\n    viewPlayer(player) {\n        this.onPlayerChange(player);\n    }\n\n    changePlayer(player) {\n        return _ => {\n            if(this.props.onSelectPlayer == null) {\n                this.onPlayerChange(player);\n            } else {\n                this.setState({\n                    selectOrEditPlayer: player,\n                })\n            }\n        };\n    }\n\n    onAddPlayer() {\n        this.setState({\n            selectedPlayer: buildEmptyPlayer(),\n        })\n    }\n\n    onCancelPlayerModal() {\n        this.setState({\n            selectedPlayer: null,\n        });\n    }\n\n    onDeletePlayer() {\n        const player = this.state.selectedPlayer;\n        let { playerList } = this.state;\n        playerList = playerList.filter(plyr => plyr.id !== player.id);\n        removePlayerById(player.id);\n        this.setState({\n            selectedPlayer: null,\n            playerList: this.sortMethod(playerList),\n        });\n    }\n\n    onSavePlayer() {\n        const player = this.state.selectedPlayer;\n        let { playerList } = this.state;\n        if(player.id == null) {\n            addPlayer(player).then(id => {\n                player.id = id;\n                playerList = playerList.concat([player])\n                this.setState({\n                    selectedPlayer: null,\n                    playerList: this.sortMethod(playerList),\n                });\n            });\n        } else {\n            playerList = playerList.map(plyr => {\n                if(plyr.id !== player.id) {\n                    return plyr;\n                }\n                return player;\n            });\n            addPlayer(player); //acts as a put\n            this.setState({\n                selectedPlayer: null,\n                playerList: this.sortMethod(playerList),\n            });\n        }\n    }\n\n    render() {\n        const { playerList, selectedPlayer, filterName, selectOrEditPlayer } = this.state;\n        const { onSelectPlayer } = this.props;\n        const showSelectedPlayer = selectedPlayer != null;\n        const showSelectOrEditPlayer = selectOrEditPlayer != null;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='pv-view'>\n            <PlayerViewerHeader\n                filterName={filterName}\n                onAddPlayer={this.onAddPlayer}\n                onNameFilter={this.onNameFilter}\n            />\n            <SelectOrEditModal\n                onSelect={_ => onSelectPlayer(selectOrEditPlayer)}\n                onView={_ => this.viewPlayer(selectOrEditPlayer)}\n                show={showSelectOrEditPlayer}\n            />\n            <PlayerModal\n                player={selectedPlayer}\n                show={showSelectedPlayer}\n                onSave={this.onSavePlayer}\n                onCancel={this.onCancelPlayerModal}\n                onDelete={this.onDeletePlayer}\n                onPlayerChange={this.onPlayerChange}\n            />\n            {playerList.filter(player => {\n                const nameMatch = formattedFilterName == null || player.playerName.toUpperCase().indexOf(formattedFilterName) >= 0;\n                return nameMatch;\n            }).map(player => (\n                <div className='pv-player' key={player.id} onClick={this.changePlayer(player)}>\n                    <div>{`${player.characterName} (${player.playerName})`}</div>\n                    <div>Level: {player.level} Max Hp: {player.maxHp}</div>\n                </div>\n            ))}\n        </div>\n        );\n    }\n};\n\nPlayerViewer.propTypes = {\n    onSelectPlayer: PropTypes.func,\n}\n\nPlayerViewer.defaultProps = {\n    onSelectPlayer: null,\n}\n\nexport default PlayerViewer;","export const LIST = 'LIST';\n\nexport const BUILDER = 'BUILDER';\n\nexport const RUNNER = 'RUNNER';","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'encounters';\n\naddStore(storeName, {keyPath: 'id', autoIncrement: true});\n\nexport const getAllEncounters = _ => getDatabase().getAll(storeName);\n\nexport const addEncounter = encounter => {\n    const db = getDatabase();\n    return db.put(storeName, encounter);\n};\n\nexport const removeEncounterById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const buildEmptyEncounter = _ => ({\n        name: '', //name of the encounter\n        monsters: [], //{id: monsterId, count: monstersInEncounter}\n        players: [], //playerIds\n});\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EncountersListHeader.css';\n\nclass EncountersListHeader extends Component {\n    /*constructor(props) {\n        super(props);\n        //this.getDisplayElement = this.getDisplayElement.bind(this);\n    }*/\n\n    render() {\n        const { onAddEncounter, onNameFilter, filterName } = this.props;\n        return (\n            <div className='encounters-list-header'>\n                <input\n                    placeholder='Filter By Name'\n                    type='search'\n                    value={filterName || ''}\n                    onChange={onNameFilter}\n                />\n                <button onClick={onAddEncounter}>Add Encounter</button>\n            </div>\n        );\n    }\n}\n\nEncountersListHeader.propTypes = {\n    filterName: PropTypes.string,\n    onNameFilter: PropTypes.func.isRequired,\n    onAddEncounter: PropTypes.func.isRequired,\n};\n\nEncountersListHeader.defaultProps = {\n    filterName: null,\n};\n\nexport default EncountersListHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllEncounters, removeEncounterById } from '../data-store/Encounters';\nimport { BUILDER, RUNNER } from '../Views';\nimport EncountersListHeader from './EncountersListHeader';\n\nimport './EncountersList.css';\n\nconst sortEncounterList = encounterList => {\n    return encounterList.sort((a, b) => {\n        const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass EncountersList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encounterList: [],\n            loading: true,\n            filterName: null,\n        };\n        this.onNameFilter = this.onNameFilter.bind(this);\n        this.onDeleteEncounter = this.onDeleteEncounter.bind(this);\n        this.onEditEncounter = this.onEditEncounter.bind(this);\n        this.onRunEncounter = this.onRunEncounter.bind(this);\n    }\n\n    componentDidMount() {\n        getAllEncounters().then(encounterList => {\n            this.setState({\n                encounterList: sortEncounterList(encounterList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    onNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    onEditEncounter(encounter = null) {\n        return _ => this.props.onChangeView(BUILDER, encounter);\n    }\n\n    onRunEncounter(encounter = null) {\n        return _ => this.props.onChangeView(RUNNER, encounter);\n    }\n\n    onDeleteEncounter(encounterId) {\n        return _ => {\n            let { encounterList } = this.state;\n            encounterList = encounterList.filter(encounter => encounter.id !== encounterId);\n            removeEncounterById(encounterId);\n            this.setState({\n                encounterList: sortEncounterList(encounterList),\n            });\n        }\n    }\n\n    render() {\n        const { encounterList, filterName } = this.state;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='el-view'>\n            <EncountersListHeader\n                filterName={filterName}\n                onAddEncounter={this.onEditEncounter()}\n                onNameFilter={this.onNameFilter}\n            />\n            {encounterList.filter(encounter => {\n                const nameMatch = formattedFilterName == null || encounter.name.toUpperCase().indexOf(formattedFilterName) >= 0;\n                return nameMatch;\n            }).map(encounter => (\n                <div className='el-encounter' key={encounter.id}>\n                    <div>{encounter.name}</div>\n                    <div className='el-margin-top el-row-space-between'>\n                        <button className='el-row-force-space' onClick={this.onEditEncounter(encounter)}>Edit</button>\n                        <button className='el-row-force-space' onClick={this.onDeleteEncounter(encounter.id)}>Delete</button>\n                        <button className='el-row-force-space'\n                            onClick={this.onRunEncounter(encounter)}\n                        >Run</button>\n                    </div>\n                </div>\n            ))}\n        </div>\n        );\n    }\n};\n\nEncountersList.propTypes = {\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncountersList.defaultProps = {\n}\n\nexport default EncountersList;","import { getMonsterById } from '../../monsters/data-store/Monsters';\nimport { getPlayerById } from '../../players/data-store/Players';\nimport { has } from 'underscore';\n\nexport const buildUseableEncounter = storedEncounter => {\n    const encounter = {};\n    encounter.id = storedEncounter.id;\n    encounter.name = storedEncounter.name;\n    encounter.monsters = []; // {count: 1, monster}\n    encounter.players = []; //players\n    const monsterPromise = storedEncounter.monsters.reduce((accumulator, element) => {\n        const promiseForNextMonster = getMonsterById(element.id).then(monster => {\n            encounter.monsters.push({\n                count: element.count,\n                monster,\n            });\n        });\n        if(accumulator == null) {\n           return promiseForNextMonster; \n        } else {\n            return accumulator.then( _ => promiseForNextMonster);\n        }\n    }, new Promise((resolve, rejct) => resolve()));\n    return monsterPromise.then( _ => {\n        return storedEncounter.players.reduce((accumulator, element) => {\n            const promiseForNextPlayer = getPlayerById(element).then(player => {\n                encounter.players.push(player);\n            });\n            if(accumulator == null) {\n                return promiseForNextPlayer;\n            }\n            return accumulator.then(_ => promiseForNextPlayer);\n        }, new Promise((resolve, rejct) => resolve()));\n    }).then(_ => encounter);\n}\n\nexport const buildStorableEncounter = useableEncounter => {\n    const encounter = {};\n    encounter.name = useableEncounter.name;\n    encounter.monsters = [];\n    encounter.players = [];\n    if(has(useableEncounter, 'id')) {\n        encounter.id = useableEncounter.id;\n    }\n    useableEncounter.players.forEach(player => encounter.players.push(player.id));\n    useableEncounter.monsters.forEach(monsterGroup => encounter.monsters.push({\n        id: monsterGroup.monster.id,\n        count: monsterGroup.count,\n    }));\n    return encounter;\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { calculateCR } from '../../monsters/UnitConversionCalculator';\nimport MonsterModal from '../../monsters/modal/MonsterModal';\n\nimport './EncounterBuilder.css';\n\nclass EBMonsterList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewMonster: null,\n        };\n        this.viewMonster = this.viewMonster.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    viewMonster(monster) {\n        return _ => {\n            this.setState({\n                viewMonster: monster,\n            });\n        }\n    }\n\n    closeModal() {\n        this.setState({\n            viewMonster: null,\n        });\n    }\n\n    render() {\n        const { onAddMonster, monsterList, onRemoveMonster, onChangeMonsterQty } = this.props;\n        const { viewMonster } = this.state;\n        return (\n            <div className='eb-list-container'>\n                <button onClick={onAddMonster}>Add Monster</button>\n                {monsterList.map(monsterGroup => (\n                    <div key={monsterGroup.monster.id} className='eb-list-element'>\n                        <input type='number' className='eb-number-input' onChange={onChangeMonsterQty(monsterGroup.monster.id)} value={monsterGroup.count}></input>\n                        <div onClick={this.viewMonster(monsterGroup.monster)} className='eb-margin-element eb-clickable'>{`${monsterGroup.monster.name} CR ${calculateCR(monsterGroup.monster.xp)}`}</div>\n                        <button className='eb-margin-element' onClick={onRemoveMonster(monsterGroup.monster.id)}>Delete</button>\n                    </div>\n                ))}\n                <MonsterModal\n                    monster={viewMonster}\n                    show={viewMonster != null}\n                    onCancel={this.closeModal}\n                    editable={false}\n                />\n            </div>\n        );\n    }\n}\n\nEBMonsterList.propTypes = {\n    onAddMonster: PropTypes.func.isRequired,\n    onRemoveMonster: PropTypes.func.isRequired,\n    onChangeMonsterQty: PropTypes.func.isRequired,\n    monsterList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nEBMonsterList.defaultProps = {\n}\n\nexport default EBMonsterList;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EncounterBuilder.css';\n\nconst EBPlayerList = ({ onAddPlayer, onRemovePlayer, playerList }) => {\n    return (\n        <div className='eb-list-container'>\n            <button onClick={onAddPlayer}>Add Player</button>\n            {playerList.map(player => (\n                <div className='eb-list-element' key={player.id}>\n                    <div className='eb-margin-element'>{`${player.characterName} (${player.playerName}) Level: ${player.level}, Max Hp: ${player.maxHp}`}</div>\n                    <button className='eb-margin-element' onClick={onRemovePlayer(player.id)}>Delete</button>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nEBPlayerList.propTypes = {\n    onAddPlayer: PropTypes.func.isRequired,\n    onRemovePlayer: PropTypes.func.isRequired,\n    playerList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nEBPlayerList.defaultProps = {\n}\n\nexport default EBPlayerList;","export const xpThresholds = [\n    {level: 1, easy: 25, medium: 50, hard: 75, deadly: 100},\n    {level: 2, easy: 50, medium: 100, hard: 150, deadly: 200},\n    {level: 3, easy: 75, medium: 150, hard: 225, deadly: 400},\n    {level: 4, easy: 125, medium: 250, hard: 375, deadly: 500},\n    {level: 5, easy: 250, medium: 500, hard: 750, deadly: 1100},\n    {level: 6, easy: 300, medium: 600, hard: 900, deadly: 1400},\n    {level: 7, easy: 350, medium: 750, hard: 1100, deadly: 1700},\n    {level: 8, easy: 450, medium: 900, hard: 1400, deadly: 2100},\n    {level: 9, easy: 550, medium: 1100, hard: 1600, deadly: 2400},\n    {level: 10, easy: 600, medium: 1200, hard: 1900, deadly: 2800},\n    {level: 11, easy: 800, medium: 1600, hard: 2400, deadly: 3600},\n    {level: 12, easy: 1000, medium: 2000, hard: 3000, deadly: 4500},\n    {level: 13, easy: 1100, medium: 2200, hard: 3400, deadly: 5100},\n    {level: 14, easy: 1250, medium: 2500, hard: 3800, deadly: 5700},\n    {level: 15, easy: 1400, medium: 2800, hard: 4300, deadly: 6400},\n    {level: 16, easy: 1600, medium: 3200, hard: 4800, deadly: 7200},\n    {level: 17, easy: 2000, medium: 3900, hard: 5900, deadly: 8800},\n    {level: 18, easy: 2100, medium: 4200, hard: 6300, deadly: 9500},\n    {level: 19, easy: 2400, medium: 4900, hard: 7300, deadly: 10900},\n    {level: 20, easy: 2800, medium: 5700, hard: 8500, deadly: 12700},\n];\n\nexport const findThreshold = level => {\n    return xpThresholds.filter(thresholds => thresholds.level === level)[0];\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { buildEmptyEncounter, addEncounter } from '../data-store/Encounters';\nimport { buildUseableEncounter, buildStorableEncounter } from '../data-store/EncounterHelpers';\nimport MonsterViewer from '../../monsters/MonsterViewer';\nimport PlayerViewer from '../../players/PlayerViewer';\nimport { LIST } from '../Views';\nimport EBMonsterList from './EBMonsterList';\nimport EBPlayerList from './EBPlayerList';\nimport { findThreshold } from './XPThresholds';\n\nimport './EncounterBuilder.css';\n\nconst calculateDifficulty = encounter => {\n    const thresholds = encounter.players.map(player => findThreshold(player.level));\n    const threshold = thresholds.reduce((totalThreshold, currentValue) => {\n        totalThreshold.easy += currentValue.easy;\n        totalThreshold.medium += currentValue.medium;\n        totalThreshold.hard += currentValue.hard;\n        totalThreshold.deadly += currentValue.deadly;\n        return totalThreshold;\n    }, {easy: 0, medium: 0, hard: 0, deadly: 0});\n    const monsterXpAndCount = encounter.monsters.reduce((total, monsterGroup) => {\n        total.xp += (monsterGroup.monster.xp * monsterGroup.count);\n        total.count += (monsterGroup.count);\n        return total;\n    }, {xp: 0, count: 0});\n    let monsterXp = monsterXpAndCount.xp;\n    const count = monsterXpAndCount.count;\n    if(count >= 15) {\n        monsterXp *= 4;\n    } else if(count >= 11) {\n        monsterXp *= 3;\n    } else if(count >= 7) {\n        monsterXp *= 2.5;\n    } else if (count >= 3) {\n        monsterXp *= 2;\n    } else if (count === 2) {\n        monsterXp *= 1.5;\n    }\n    if(monsterXp > threshold.deadly) {\n        return 'Deadly';\n    } else if(monsterXp > threshold.hard) {\n        return 'Hard';\n    } else if (monsterXp > threshold.medium) {\n        return 'Medium';\n    } else if (monsterXp > threshold.easy) {\n        return 'Easy';\n    } else {\n        return 'Trivial';\n    }\n}\n\nclass EncounterBuilder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encounter: null,\n            selectingMonster: false,\n            selectingPlayer: false,\n            difficulty: 'Easy',\n        };\n        this.addPlayer = this.addPlayer.bind(this);\n        this.addMonster = this.addMonster.bind(this);\n        this.onSelectPlayer = this.onSelectPlayer.bind(this);\n        this.onSelectMonster = this.onSelectMonster.bind(this);\n        this.onRemovePlayer = this.onRemovePlayer.bind(this);\n        this.onRemoveMonster = this.onRemoveMonster.bind(this);\n        this.changeName = this.changeName.bind(this);\n        this.onChangeMonsterQty = this.onChangeMonsterQty.bind(this);\n        this.onSave = this.onSave.bind(this);\n    }\n\n    componentDidMount() {\n        let { encounter } = this.props;\n        if(encounter == null) {\n            encounter = buildEmptyEncounter();\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        } else {\n            buildUseableEncounter(encounter).then(useableEncounter => {\n                this.setState({\n                    encounter: useableEncounter,\n                    difficulty: calculateDifficulty(useableEncounter),\n                });\n            });\n        }\n    }\n\n    changeName(event) {\n        const { encounter } = this.state;\n        encounter.name = event.target.value;\n        this.setState({\n            encounter,\n        })\n    }\n\n    addPlayer() {\n        this.setState({\n            selectingPlayer: true,\n        })\n    }\n\n    addMonster() {\n        this.setState({\n            selectingMonster: true,\n        })\n    }\n\n    onSelectPlayer(player) {\n        const { encounter } = this.state;\n        encounter.players.push(player);\n        this.setState({\n            selectingPlayer: false,\n            difficulty: calculateDifficulty(encounter),\n        })\n    }\n\n    onSelectMonster(monster) {\n        const { encounter } = this.state;\n        encounter.monsters.push({\n            monster,\n            count: 1,\n        });\n        this.setState({\n            selectingMonster: false,\n            difficulty: calculateDifficulty(encounter),\n        })\n    }\n\n    onChangeMonsterQty(monsterId) {\n        return event => {\n            const { encounter } = this.state;\n            const qty = parseInt(event.target.value);\n            encounter.monsters.forEach(monsterGroup => {\n                if(monsterGroup.monster.id === monsterId) {\n                    monsterGroup.count = qty;\n                }\n            });\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            })\n        }\n    }\n\n    onRemovePlayer(playerId) {\n        return _ => {\n            const { encounter } = this.state;\n            encounter.players = encounter.players.filter(player => player.id !== playerId);\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        }\n    }\n\n    onRemoveMonster(monsterId) {\n        return _ => {\n            const { encounter } = this.state;\n            encounter.monsters = encounter.monsters.filter(monster => monster.monster.id !== monsterId);\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        }\n    }\n\n    onSave() {\n        const { encounter } = this.state;\n        addEncounter(buildStorableEncounter(encounter)).then(_ => this.props.onChangeView(LIST));\n    }\n\n    render() {\n        const { encounter, selectingMonster, selectingPlayer, difficulty } = this.state;\n        if(encounter == null) {\n            return (<div>Loading Encounter...</div>)\n        } else if(selectingMonster) {\n            return (<MonsterViewer onSelectMonster={this.onSelectMonster}/>);\n        } else if(selectingPlayer) {\n            return (<PlayerViewer onSelectPlayer={this.onSelectPlayer}/>);\n        }\n        return (\n            <div className='eb-view'>\n                <div className='eb-header'>\n                <input\n                    className='eb-name-input'\n                    type='text'\n                    placeholder='Name Encounter'\n                    onChange={this.changeName}\n                    value={encounter.name}\n                />\n                <button className='eb-margin-element' onClick={this.onSave}>Save</button>\n                </div>\n                <div className='eb-difficulty-text'>Difficulty:&nbsp;{difficulty}</div>\n                <div className='eb-columns-container'>\n                    <EBPlayerList playerList={encounter.players} onAddPlayer={this.addPlayer} onRemovePlayer={this.onRemovePlayer}/>\n                    <EBMonsterList monsterList={encounter.monsters} onAddMonster={this.addMonster} onRemoveMonster={this.onRemoveMonster} onChangeMonsterQty={this.onChangeMonsterQty}/>\n                </div>\n            </div>\n        );\n    }\n};\n\nEncounterBuilder.propTypes = {\n    encounter: PropTypes.shape({\n        name: PropTypes.string,\n        monsters: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            count: PropTypes.number, \n        })),\n        players: PropTypes.arrayOf(PropTypes.number),\n    }),\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncounterBuilder.defaultProps = {\n    encounter: null,\n}\n\nexport default EncounterBuilder;","import React from 'react';\nimport { Droppable } from \"react-beautiful-dnd\";\nimport PropTypes from 'prop-types';\n\nconst DroppableWrapper = props => (\n  <Droppable droppableId={props.droppableId}>\n    {provided => (\n      <div className={props.className}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            {...provided.droppablePlaceholder}>\n              {props.children}\n      </div>\n    )}\n  </Droppable>\n);\n\nDroppableWrapper.propTypes = {\n    droppableId: PropTypes.any.isRequired,\n}\n\nDroppableWrapper.defaultProps = {\n}\n\nexport default DroppableWrapper;","import React from 'react';\nimport { Draggable } from \"react-beautiful-dnd\";\nimport PropTypes from 'prop-types';\n\nconst DraggableWrapper = props => (\n  <Draggable draggableId={props.draggableId} index={props.index}>\n    {provided => (\n      <div className={props.className}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}>\n              {props.children}\n      </div>\n    )}\n  </Draggable>\n);\n\nDraggableWrapper.propTypes = {\n    draggableId: PropTypes.any.isRequired,\n}\n\nDraggableWrapper.defaultProps = {\n}\n\nexport default DraggableWrapper;","export const DAMAGE = 'damage';\nexport const HEAL = 'heal';\nexport const TEMP_HEALTH = 'tmpHealth';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from '../../common/modals/SimpleModal';\nimport { DAMAGE, HEAL, TEMP_HEALTH } from './TargetTypes';\n\nimport './TargetModal.css';\n\nclass TargetModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: DAMAGE,\n            qty: 0,\n        };\n        this.changeDmg = this.changeDmg.bind(this);\n        this.changeType = this.changeType.bind(this);\n    }\n\n    changeDmg(event) {\n        const qty = parseInt(event.target.value);\n        this.setState({\n            qty,\n        });\n    }\n\n    changeType(event) {\n        const type = event.target.value;\n        this.setState({\n            type,\n        });\n    }\n\n    render() {\n        const { show, dealToTarget } = this.props;\n        const { type, qty } = this.state;\n        return (\n            <SimpleModal show={show}>\n                <div className='tm-container'>\n                    <input className='tm-number-element' type='number' value={qty} onChange={this.changeDmg}/>\n                    <div>\n                        Damage\n                        <input\n                            type='radio'\n                            value={DAMAGE}\n                            checked={type === DAMAGE}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <div>\n                        Heal\n                        <input\n                            type='radio'\n                            value={HEAL}\n                            checked={type === HEAL}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <div>\n                        Temporary Hp\n                        <input\n                            type='radio'\n                            value={TEMP_HEALTH}\n                            checked={type === TEMP_HEALTH}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <button className='tm-element' onClick={_ => dealToTarget(this.state)}>Ok</button>\n                </div>\n            </SimpleModal>\n        );\n    }\n}\n\nTargetModal.propTypes = {\n    show: PropTypes.bool.isRequired,\n    dealToTarget: PropTypes.func,\n}\n\nTargetModal.defaultProps = {\n}\n\nexport default TargetModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport DroppableWrapper from '../../common/dnd/DroppableWrapper';\nimport DraggableWrapper from '../../common/dnd/DraggableWrapper';\nimport { buildUseableEncounter } from '../data-store/EncounterHelpers';\nimport MonsterModal from '../../monsters/modal/MonsterModal';\nimport { LIST } from '../Views';\n\nimport './EncounterRunner.css';\nimport TargetModal from './TargetModal';\nimport { DAMAGE, HEAL, TEMP_HEALTH } from './TargetTypes';\n\nconst buildDisplayString = creature => {\n    let result = creature.name;\n    if(creature.multiple) {\n        result += ' ' + creature.monsterId.toString();\n    }\n    result += ' ' + creature.hp + '/' + creature.maxHp;\n    if(creature.tmpHp > 0) {\n        result += ' (' + creature.tmpHp + ' Tmp Hp)';\n    }\n    return result;\n}\n\nclass EncounterRunner extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            creatureList: [],\n            selectedMonster: null,\n            targetIdx: null,\n        };\n        this.onDragEnd = this.onDragEnd.bind(this);\n        this.selectMonster = this.selectMonster.bind(this);\n        this.onCloseModal = this.onCloseModal.bind(this);\n        this.onDealToTarget = this.onDealToTarget.bind(this);\n        this.removeCreature = this.removeCreature.bind(this);\n    }\n\n    componentDidMount() {\n        let { encounter, onChangeView } = this.props;\n        if(encounter == null) {\n            console.error('Should not make it to runner without encounter');\n            onChangeView(LIST, null);\n        } else {\n            buildUseableEncounter(encounter).then(useableEncounter => {\n                this.setState({\n                    creatureList: this.buildCreatureList(useableEncounter),\n                });\n            });\n        }\n    }\n\n    buildCreatureList(useableEncounter) {\n        let id = 0;\n        let creatureList = useableEncounter.players.map(player => ({\n            id: id++,\n            name: player.characterName,\n            hp: player.maxHp,\n            maxHp: player.maxHp,\n            tmpHp: 0,\n            multiple: false,\n            isPlayer: true,\n        }));\n        useableEncounter.monsters.forEach(monsterGroup => {\n            const multiple = monsterGroup.count > 0 ? true : false;\n            for(let i = 0; i < monsterGroup.count; i++) {\n                id++;\n                creatureList.push({\n                    id,\n                    name: monsterGroup.monster.name,\n                    hp: monsterGroup.monster.hp,\n                    maxHp: monsterGroup.monster.hp,\n                    tmpHp: 0,\n                    monsterId: i,\n                    multiple,\n                    monster: monsterGroup.monster,\n                    isPlayer: false,\n                });\n            }\n        });\n        return creatureList;\n    }\n\n    selectMonster(creature) {\n        return _ => {\n            this.setState({\n                selectedMonster: creature.monster,\n            });\n        }\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedMonster: null,\n        });\n    }\n\n    selectTarget(targetIdx) {\n        return _ => {\n            this.setState({\n                targetIdx,\n            })\n        };\n    }\n\n    onDealToTarget(result) {\n        console.log(result);\n        const { targetIdx, creatureList } = this.state;\n        const creature = creatureList[targetIdx];\n        switch(result.type) {\n            case DAMAGE: {\n                let dmg = result.qty;\n                if(creature.tmpHp > 0) {\n                    if(dmg >= creature.tmpHp) {\n                        dmg -= creature.tmpHp;\n                        creature.tmpHp = 0;\n                    } else {\n                        creature.tmpHp -= dmg;\n                        dmg = 0;\n                    }\n                    creature.hp -= dmg;\n                } else {\n                    creature.hp -= result.qty;\n                }\n                break;\n            }\n            case HEAL: {\n                creature.hp += result.qty;\n                if(creature.hp > creature.maxHp) {\n                    creature.hp = creature.maxHp;\n                }\n                break;\n            }\n            case TEMP_HEALTH: {\n                creature.tmpHp = result.qty;\n                break;\n            }\n            default:\n                console.error('Unknow health change type');\n        }\n        this.setState({\n            targetIdx: null,\n        })\n    }\n\n    removeCreature(idx) {\n        return _ => {\n            const { creatureList } = this.state;\n            creatureList.splice(idx, 1);\n            this.setState({\n                creatureList,\n            })\n        };\n    }\n\n    onDragEnd(result) {\n        let { creatureList } = this.state;\n        const destIndex = result.destination.index;\n        const currentIndex = result.source.index;\n        const creature = creatureList[currentIndex];\n        creatureList.splice(currentIndex, 1);\n        creatureList.splice(destIndex, 0, creature);\n        this.setState({\n            creatureList,\n        });\n    }\n\n    render() {\n        const { creatureList, selectedMonster, targetIdx } = this.state;\n        return (\n            <div className='er-container'>\n                <MonsterModal\n                    monster={selectedMonster}\n                    show={selectedMonster != null}\n                    onCancel={this.onCloseModal}\n                    editable={false}\n                />\n                <TargetModal\n                    show={targetIdx !== null}\n                    dealToTarget={this.onDealToTarget}\n                />\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <DroppableWrapper className='er-droppable' droppableId='creatureList'>\n                        { creatureList.map((creature, idx) => (\n                            <DraggableWrapper className='er-draggable' key={creature.id} draggableId={creature.id.toString()} index={idx}>\n                                <div className='er-creature-container'>\n                                    <div onClick={creature.isPlayer ? null : this.selectMonster(creature)} className='er-element'>{buildDisplayString(creature)}</div>\n                                    <div>\n                                        <button className='er-element' onClick={this.selectTarget(idx)}>Target</button>\n                                        {creature.hp <= 0 && <button className='er-element' onClick={this.removeCreature(idx)}>Remove</button>}\n                                    </div>\n                                </div>\n                            </DraggableWrapper>\n                        ))}\n                    </DroppableWrapper>\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\nEncounterRunner.propTypes = {\n    encounter: PropTypes.shape({\n        name: PropTypes.string,\n        monsters: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            count: PropTypes.number, \n        })),\n        players: PropTypes.arrayOf(PropTypes.number),\n    }),\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncounterRunner.defaultProps = {\n    encounter: null,\n}\n\nexport default EncounterRunner;","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { LIST, BUILDER, RUNNER } from './Views';\nimport EncountersList from './list/EncountersList';\nimport EncounterBuilder from './builder/EncounterBuilder';\nimport EncounterRunner from './runner/EncounterRunner';\n\nclass EncountersContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: LIST,\n            encounter: null,\n        };\n        this.onChangeView = this.onChangeView.bind(this);\n    }\n\n    onChangeView(view, encounter = null) {\n        this.setState({\n            view,\n            encounter,\n        });\n    }\n\n    render() {\n        const { view, encounter } = this.state;\n        switch(view) {\n            case LIST: {\n                return (<EncountersList onChangeView={this.onChangeView}/>);\n            }\n            case BUILDER: {\n                return (<EncounterBuilder onChangeView={this.onChangeView} encounter={encounter}/>)\n            }\n            case RUNNER: {\n                return (<EncounterRunner onChangeView={this.onChangeView} encounter={encounter}/>)\n            }\n            default: {\n                console.error('Received unknown encounter view');\n            }\n        }\n        return null;\n    }\n};\n\nEncountersContainer.propTypes = {\n}\n\nEncountersContainer.defaultProps = {\n}\n\nexport default EncountersContainer;","import React from 'react';\nimport MonsterViewer from './components/monsters/MonsterViewer';\nimport PlayerViewer from './components/players/PlayerViewer';\nimport EncountersContainer from './components/encounters/EncountersContainer';\n\nconst rootMenu = {\n    'Encounters' : <EncountersContainer/>,\n    'Monster Viewer' : <MonsterViewer/>,\n    'Player Viewer' : <PlayerViewer/>,\n};\n\nexport default rootMenu;","import React, { Component } from 'react';\nimport MoonLoader from 'react-spinners/MoonLoader';\nimport Menu from './components/menu/Menu';\nimport rootMenu from './RootMenu';\nimport { openDatabase } from './components/common/data-store/IndexedDB';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLocation: null,\n      databaseLoaded: false,\n    };\n    this.getDisplayElement = this.getDisplayElement.bind(this);\n    this.backToRootMenu = this.backToRootMenu.bind(this);\n    this.menuSelection = this.menuSelection.bind(this);\n  }\n\n  componentDidMount(props) {\n    openDatabase().then(_ => {\n      console.log('App DataStore opened');\n      this.setState({\n        databaseLoaded: true,\n      })\n    });\n  }\n\n  menuSelection(value) {\n    return _ => {\n      this.setState({\n        currentLocation: value\n      });\n    };\n  }\n\n  getDisplayElement() {\n    const { currentLocation } = this.state;\n    if(!currentLocation) {\n      return <Menu menuItems={Object.keys(rootMenu)} onSelect={this.menuSelection}/>;\n    }\n    return rootMenu[currentLocation];\n\n  }\n\n  backToRootMenu() {\n    this.setState({\n      currentLocation: null\n    });\n  }\n  render() {\n    const displayElement = this.getDisplayElement();\n    const { currentLocation, databaseLoaded } = this.state;\n    if(!databaseLoaded) {\n      return (\n        <div className=\"App\">\n          <MoonLoader\n            sizeUnit={'vmin'}\n            size={33}\n            loading={!databaseLoaded}\n          />\n        </div>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div className='app-location'>\n          {displayElement}\n        </div>\n        {currentLocation != null && <button onClick={this.backToRootMenu}>Menu</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}