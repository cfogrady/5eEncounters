{"version":3,"sources":["components/menu/MenuItem.js","components/menu/Menu.js","components/common/data-store/IndexedDB.js","components/monsters/UnitConversionCalculator.js","components/monsters/data-store/MonsterFormatConverter.js","components/monsters/data-store/Monsters.js","components/monsters/data-store/MonsterImages.js","components/monsters/selectors/CRSelector.js","components/monsters/MonsterViewerHeader.js","components/common/modals/SimpleModal.js","components/monsters/selectors/SizeSelector.js","components/monsters/selectors/TypeSelector.js","components/monsters/selectors/AlignmentSelector.js","components/monsters/modal/NameSection.js","components/monsters/modal/CombatSection.js","components/monsters/modal/StatSection.js","components/monsters/selectors/SkillSelector.js","components/monsters/selectors/StatSelector.js","components/monsters/modal/SkillsSection.js","components/monsters/modal/AbilitiesSection.js","components/monsters/modal/ActionsSection.js","components/monsters/modal/ReactionsSection.js","components/monsters/modal/LegendaryActionsSection.js","components/monsters/modal/MonsterImageSection.js","components/monsters/modal/DescriptionSection.js","components/monsters/modal/MonsterModal.js","components/common/modals/LoadingModal.js","components/common/modals/SelectOrEditModal.js","components/monsters/MonsterViewer.js","components/players/data-store/Players.js","components/players/PlayerViewerHeader.js","components/players/modal/PlayerModal.js","components/players/PlayerViewer.js","components/encounters/Views.js","components/encounters/data-store/Encounters.js","components/encounters/list/EncountersListHeader.js","components/encounters/list/EncountersList.js","components/encounters/data-store/EncounterHelpers.js","components/encounters/builder/EBMonsterList.js","components/encounters/builder/EBPlayerList.js","components/encounters/builder/XPThresholds.js","components/encounters/builder/EncounterBuilder.js","components/common/dnd/DroppableWrapper.js","components/common/dnd/DraggableWrapper.js","components/encounters/runner/EncounterRunnerHeader.js","components/encounters/runner/TargetTypes.js","components/encounters/runner/TargetModal.js","components/encounters/runner/EncounterRunner.js","components/encounters/EncountersContainer.js","RootMenu.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","_ref","value","onSelect","react_default","a","createElement","className","key","onClick","defaultProps","Menu","menuItems","map","components_menu_MenuItem","database","stores","upgrades","addStore","name","keyData","concat","addUpgrade","upgradeFunc","version","fromVersion","arguments","length","undefined","upgrade","db","oldVersion","newVersion","transaction","forEach","store","objectStoreNames","contains","console","log","createObjectStore","_loop","i","filter","getDatabase","_","calculateMod","stat","Math","floor","calculateModStr","numberToString","number","numbStr","toString","indexOf","calculateCR","xp","xpToCR","0","25","50","100","200","450","700","1100","1800","2300","2900","3900","5000","5900","7200","8400","10000","11500","13000","15000","18000","20000","22000","25000","33000","41000","50000","62000","75000","90000","105000","120000","135000","155000","capitalizeEachWord","string","words","split","str","charAt","toUpperCase","slice","reduce","resultStr","word","skillList","fromJsonExportFormat","exportMonster","cr","monster","buildEmptyMonster","size","type","alignment","ac","armor_class","hp","hit_points","hitDie","hit_dice","speed","stats","strength","dex","dexterity","con","constitution","int","intelligence","wis","wisdom","cha","charisma","strength_save","savingThrows","push","modifier","dexterity_save","constitution_save","intelligence_save","wisdom_save","charisma_save","skill","skillName","replace","skills","damageVulnerabilities","damage_vulnerabilities","damageResistances","damage_resistances","damageImmunities","damage_immunities","conditionImmunities","condition_immunities","senses","languages","parseInt","challenge_rating","Object","keys","special_abilities","abilities","specialAbility","descr","desc","actions","action","reactions","reaction","legendary_actions","legendaryActions","keyPath","addMonster","tnx","put","objectStore","removeMonsterById","id","delete","getMonsterById","get","getAllMonsters","getAll","summary","description","imageKey","buildMonsterId","then","monsterList","result","current","fetch","response","json","data","promise","license","oldMonster","catch","err","Promise","resolve","reject","autoIncrement","addMonsterImage","monsterImage","CRSelector","onChange","showSelect","disabled","hidden","MonsterViewerHeader","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this$props","onAddMonster","filterXp","onXPFilter","onNameFilter","filterName","placeholder","selectors_CRSelector","Component","SimpleModal","show","children","showHideClassName","SizeSelector","TypeSelector","AlignmentSelector","NameSection","editable","selectors_SizeSelector","selectors_TypeSelector","selectors_AlignmentSelector","CombatSection","onChangeNumber","StatSection","SkillSelector","StatSelector","SkillsSection","onRemoveElement","bind","assertThisInitialized","onAddElement","prop","index","_this2","list","element","idx","target","_this3","_this4","selectors_SkillSelector","save","selectors_StatSelector","AbilitiesSection","ability","ActionsSection","ReactionsSection","property","MonsterImageSection","pictureURL","loadingImage","onDrop","setState","e","picture","reader","FileReader","onload","onImageSet","readAsDataURL","_this$state","style","maxHeight","alt","src","compiled_default","withIcon","buttonText","imgExtension","maxFileSize","noop","DescriptionSection","setPathValue","object","path","splitPath","location","currentPath","MonsterModal","event","newMonster","clone","onMonsterChange","onSave","onCancel","onDelete","onToggleEdit","common_modals_SimpleModal","modal_NameSection","modal_CombatSection","modal_StatSection","modal_SkillsSection","modal_AbilitiesSection","modal_ActionsSection","modal_ReactionsSection","LegendaryActionsSection","modal_DescriptionSection","modal_MonsterImageSection","LoadingModal","MoonLoader_default","sizeUnit","color","SelectOrEditModal","onView","addText","viewText","toLowerCase","sortMonsterList","sort","b","nameA","nameB","MonsterViewer","selectedMonster","imageURL","editing","selectOrViewMonster","viewMonster","changeMonster","onDeleteMonster","saveMonsterModel","cancelMonsterModal","changeXPFilter","changeNameFilter","onSelectMonster","mon","oldId","error","_this$state2","showSelectedMonster","showSelectOrViewMonster","formattedFilterName","components_monsters_MonsterViewerHeader","common_modals_LoadingModal","common_modals_SelectOrEditModal","monsters_modal_MonsterModal","nameMatch","addPlayer","player","PlayerViewerHeader","onAddPlayer","PlayerModal","newPlayer","onPlayerChange","playerName","characterName","level","maxHp","sortPlayerListByPlayer","playerList","PlayerViewer","selectedPlayer","selectOrEditPlayer","onDeletePlayer","onSavePlayer","onCancelPlayerModal","viewPlayer","changePlayer","sortMethod","onSelectPlayer","plyr","_this5","showSelectedPlayer","showSelectOrEditPlayer","components_players_PlayerViewerHeader","players_modal_PlayerModal","LIST","EncountersListHeader","onAddEncounter","sortEncounterList","encounterList","EncountersList","onDeleteEncounter","onEditEncounter","onRunEncounter","encounter","onChangeView","encounterId","_this6","encounters_list_EncountersListHeader","buildUseableEncounter","storedEncounter","monsters","players","accumulator","promiseForNextMonster","count","rejct","promiseForNextPlayer","EBMonsterList","closeModal","onRemoveMonster","onChangeMonsterQty","monsterGroup","EBPlayerList","onRemovePlayer","xpThresholds","easy","medium","hard","deadly","calculateDifficulty","threshold","thresholds","totalThreshold","currentValue","monsterXpAndCount","total","monsterXp","EncounterBuilder","selectingMonster","selectingPlayer","difficulty","changeName","useableEncounter","monsterId","qty","playerId","addEncounter","has","buildStorableEncounter","components_monsters_MonsterViewer","components_players_PlayerViewer","builder_EBPlayerList","builder_EBMonsterList","DroppableWrapper","react_beautiful_dnd_esm","droppableId","provided","assign","ref","innerRef","droppableProps","droppablePlaceholder","DraggableWrapper","draggableId","draggableProps","dragHandleProps","EncounterRunnerHeader","onStartTracking","onNextTurn","onPreviousTurn","toggleShowInitiative","rollCreatureInitiatives","sortByInitiative","showInitiative","currentTurnIdx","checked","react","DAMAGE","TargetModal","changeDmg","changeType","dealToTarget","EncounterRunner","creatureList","targetIdx","onDragEnd","selectMonster","onCloseModal","onDealToTarget","removeCreature","onChangeTargetInitiative","buildCreatureList","tmpHp","multiple","isPlayer","initiative","creature","dmg","splice","destination","destIndex","currentIndex","source","rangeStart","rangeEnd","withinRange","toggle","range","random","cr1","cr2","_this7","_this$state3","encounters_runner_EncounterRunnerHeader","encounters_runner_TargetModal","dnd_DroppableWrapper","dnd_DraggableWrapper","buildDisplayString","selectTarget","EncountersContainer","view","encounters_list_EncountersList","encounters_builder_EncounterBuilder","encounters_runner_EncounterRunner","rootMenu","Encounters","encounters_EncountersContainer","Monster Viewer","Player Viewer","App","currentLocation","databaseLoaded","loadingSRDMonsters","getDisplayElement","backToRootMenu","menuSelection","openDB","localStorage","getItem","setItem","components_menu_Menu","displayElement","marginTop","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9e3f9cc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MenuItem.scss';\n\nconst MenuItem = ({ value , onSelect }) => {\n    return (\n        <div className=\"menu-item\" key={value} onClick={onSelect(value)}>{value}</div>\n    );\n};\n\nMenuItem.propTypes = {\n    value: PropTypes.string.isRequired,\n    onSelect: PropTypes.func.isRequired,\n};\n\nMenuItem.defaultProps = {\n\n};\n\nexport default MenuItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from './MenuItem';\n\nimport './Menu.css';\n\nconst Menu = ({ menuItems, onSelect }) => {\n    return (\n        <div className=\"menu-page\">\n            {menuItems.map(value => (<MenuItem key={value} value={value} onSelect={onSelect}/>))}\n        </div>\n    );\n};\n\nMenu.propTypes = {\n    menuItems: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onSelect: PropTypes.func.isRequired,\n}\n\nMenu.defaultProps = {\n\n}\n\nexport default Menu;","import { openDB } from 'idb';\n\nconst databaseName = '5eEncounters';\n\nconst dbVersion = 8;\n\nlet database = null; //loading\n\nlet stores = [];\n\nlet upgrades = [];\n\nexport const addStore = (name, keyData) => {\n    stores = stores.concat([{ name, keyData }]);\n};\n\nexport const addUpgrade = (upgradeFunc, version, fromVersion=0) => {\n    upgrades = upgrades.concat([{ upgradeFunc, version, fromVersion }]);\n}\n\nconst upgrade = (db, oldVersion, newVersion, transaction) => {\n    stores.forEach(store => {\n        if(!db.objectStoreNames.contains(store.name)) {\n            console.log('Adding datastore: ', store.name);\n            db.createObjectStore(store.name, store.keyData);\n        }\n    });\n    for(let i = oldVersion + 1; i <= newVersion; i++) {\n        let versionUpgrades = upgrades.filter(upgrade => upgrade.version === i && upgrade.fromVersion <= oldVersion);\n        versionUpgrades.forEach(upgrade => upgrade.upgradeFunc(transaction));\n    }\n};\n\nexport const openDatabase = _ => {\n    return openDB(databaseName, dbVersion, { upgrade, }).then(db => {\n        database = db;\n    });\n};\n\nexport const getDatabase = _ => database;\n","export const calculateMod = stat => Math.floor((stat - 10) / 2);\n\nexport const calculateModStr = stat => numberToString(calculateMod(stat));\n\nexport const numberToString = number => {\n    let numbStr = number.toString();\n    if(numbStr.indexOf('-') < 0) {\n        numbStr = `+${numbStr}`;\n    }\n    return numbStr;\n}\n\nexport const calculateCR = xp => xpToCR[xp];\n\nexport const calculateXP = cr => {\n    return Object.keys(xpToCR).filter(key => {\n        return xpToCR[key] === cr;\n    })[0];\n};\n\nexport const xpToCR = {\n    0: '0',\n    25: '1/8',\n    50: '1/4',\n    100: '1/2',\n    200: '1',\n    450: '2',\n    700: '3',\n    1100: '4',\n    1800: '5',\n    2300: '6',\n    2900: '7',\n    3900: '8',\n    5000: '9',\n    5900: '10',\n    7200: '11',\n    8400: '12',\n    10000: '13',\n    11500: '14',\n    13000: '15',\n    15000: '16',\n    18000: '17',\n    20000: '18',\n    22000: '19',\n    25000: '20',\n    33000: '21',\n    41000: '22',\n    50000: '23',\n    62000: '24',\n    75000: '25',\n    90000: '26',\n    105000: '27',\n    120000: '28',\n    135000: '29',\n    155000: '30',\n}","import { buildEmptyMonster } from './Monsters';\nimport { calculateXP, calculateCR } from '../UnitConversionCalculator';\n\nconst capitalizeEachWord = string => {\n    let words = string.split(' ');\n    words = words.map(str => str.charAt(0).toUpperCase() + str.slice(1));\n    return words.reduce((resultStr, word)=> {\n        return resultStr.length > 0 ? resultStr + ' ' + word : word;\n    }, '');\n}\n\nconst skillList = [\n    'acrobatics',\n    'animal_handling',\n    'arcana',\n    'athletics',\n    'deception',\n    'history',\n    'insight',\n    'intimidation',\n    'investigation',\n    'medicine',\n    'nature',\n    'perception',\n    'performance',\n    'persuasion',\n    'religion',\n    'sleight_of_hand',\n    'stealth',\n    'survival'\n];\n\nexport const fromJsonExportFormat = exportMonster => {\n    const monster = buildEmptyMonster();\n    monster.name = exportMonster.name;\n    monster.size = exportMonster.size;\n    monster.type = capitalizeEachWord(exportMonster.type);\n    monster.alignment = capitalizeEachWord(exportMonster.alignment);\n    monster.ac = exportMonster.armor_class;\n    monster.hp = exportMonster.hit_points;\n    monster.hitDie = exportMonster.hit_dice;\n    monster.speed = exportMonster.speed;\n    monster.stats.str = exportMonster.strength;\n    monster.stats.dex = exportMonster.dexterity;\n    monster.stats.con = exportMonster.constitution;\n    monster.stats.int = exportMonster.intelligence;\n    monster.stats.wis = exportMonster.wisdom;\n    monster.stats.cha = exportMonster.charisma;\n    if(exportMonster.strength_save) {\n        monster.savingThrows.push({stat: 'STR', modifier: exportMonster.strength_save});\n    }\n    if(exportMonster.dexterity_save) {\n        monster.savingThrows.push({stat: 'DEX', modifier: exportMonster.dexterity_save});\n    }\n    if(exportMonster.constitution_save) {\n        monster.savingThrows.push({stat: 'CON', modifier: exportMonster.constitution_save});\n    }\n    if(exportMonster.intelligence_save) {\n        monster.savingThrows.push({stat: 'INT', modifier: exportMonster.intelligence_save});\n    }\n    if(exportMonster.wisdom_save) {\n        monster.savingThrows.push({stat: 'WIS', modifier: exportMonster.wisdom_save});\n    }\n    if(exportMonster.charisma_save) {\n        monster.savingThrows.push({stat: 'CHA', modifier: exportMonster.charisma_save});\n    }\n    skillList.forEach(skill => {\n        if(exportMonster[skill]) {\n            const skillName = capitalizeEachWord(skill.replace('_', ' '));\n            monster.skills.push({skill: skillName, modifier: exportMonster[skill]});\n        }\n    });\n    monster.damageVulnerabilities = exportMonster.damage_vulnerabilities ;\n    monster.damageResistances = exportMonster.damage_resistances; \n    monster.damageImmunities = exportMonster.damage_immunities;\n    monster.conditionImmunities = exportMonster.condition_immunities;\n    monster.senses = exportMonster.senses;\n    monster.languages = exportMonster.languages;\n    monster.xp = parseInt(calculateXP(exportMonster.challenge_rating));\n    if(exportMonster.special_abilities) {\n        monster.abilities = exportMonster.special_abilities.map(specialAbility => ({\n            name: specialAbility.name,\n            descr: specialAbility.desc,\n        }));\n    }\n    if(exportMonster.actions) {\n        monster.actions = exportMonster.actions.map(action => ({\n            name: action.name,\n            descr: action.desc,\n        }));\n    }\n    if(exportMonster.reactions) {\n        monster.reactions = exportMonster.reactions.map(reaction => ({\n            name: reaction.name,\n            descr: reaction.desc,\n        }));\n    }\n    if(exportMonster.legendary_actions) {\n        monster.legendaryActions.actions = exportMonster.legendary_actions.map(action => ({\n            name: action.name,\n            descr: action.desc,\n        }));\n    }\n    return monster;\n}\n\nexport const toJsonExportFormat = monster => {\n    const exportMonster = {};\n    exportMonster.name = monster.name;\n    exportMonster.size = monster.size;\n    exportMonster.type = monster.type.toLowerCase();\n    exportMonster.subtype = '';\n    exportMonster.alignment = monster.alignment.toLowerCase();\n    exportMonster.armor_class = monster.armor_class;\n    exportMonster.hit_points = monster.hp;\n    exportMonster.hit_dice = monster.hitDie;\n    exportMonster.speed = monster.speed;\n    exportMonster.strength = monster.stats.str;\n    exportMonster.dexterity = monster.stats.dex;\n    exportMonster.constitution = monster.stats.con;\n    exportMonster.intelligence = monster.stats.int;\n    exportMonster.wisdom = monster.stats.wis;\n    exportMonster.charisma = monster.stats.cha;\n    monster.savingThrows.forEach(save => {\n        if(save.stat === 'STR') {\n            exportMonster.strength_save = save.modifier;\n        } else if(save.stat === 'DEX') {\n            exportMonster.dexterity_save = save.modifier;\n        } else if(save.stat === 'CON') {\n            exportMonster.constitution_save = save.modifier;\n        } else if(save.stat === 'INT') {\n            exportMonster.intelligence_save = save.modifier;\n        } else if(save.stat === 'WIS') {\n            exportMonster.wisdom_save = save.modifier;\n        } else if(save.stat === 'CHA') {\n            exportMonster.charisma_save = save.modifier;\n        }\n    });\n    monster.skills.forEach(skill => {\n        exportMonster[skill.skill] = skill.modifier;\n    });\n    exportMonster.damage_vulnerabilities = monster.damageVulnerabilities;\n    exportMonster.damage_resistances = monster.damageResistances; \n    exportMonster.damage_immunities = monster.damageImmunities;\n    exportMonster.condition_immunities = monster.conditionImmunities;\n    exportMonster.senses = monster.senses;\n    exportMonster.languages = monster.languages;\n    exportMonster.challenge_rating = calculateCR(monster.xp);\n    if(monster.abilities.length > 0) {\n        exportMonster.special_abilities = monster.abilities.map(ability => ({\n            name: ability.name,\n            desc: ability.descr,\n        }));\n    }\n    if(monster.actions.length > 0) {\n        exportMonster.actions = monster.actions.map(action => ({\n            name: action.name,\n            desc: action.descr,\n        }));\n    }\n    if(monster.reactions != null && monster.reactions.length > 0) {\n        exportMonster.reactions = monster.reactions.map(reaction => ({\n            name: reaction.name,\n            desc: reaction.descr,\n        }));\n    }\n    if(monster.legendaryActions.actions.length > 0) {\n        exportMonster.legendary_actions = monster.legendaryActions.actions.map(action => ({\n            name: action.name,\n            desc: action.descr,\n        }));\n    }\n    return exportMonster;\n}\n","import { getDatabase, addStore, addUpgrade } from '../../common/data-store/IndexedDB';\nimport { fromJsonExportFormat } from './MonsterFormatConverter';\n\nconst storeName = 'monsters';\n\naddStore(storeName, {keyPath: 'id'});\n\nexport const addMonster = (monster, tnx = null) => {\n    if(tnx == null) {\n        return getDatabase().put(storeName, monster);\n    }\n    return tnx.objectStore(storeName).put(monster);\n};\n\nexport const removeMonsterById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getMonsterById = id => {\n    const db = getDatabase();\n    return db.get(storeName, id);\n};\n\nexport const getAllMonsters = (tnx = null) => {\n    if(tnx == null) {\n        return getDatabase().getAll(storeName);\n    }\n    return tnx.objectStore(storeName).getAll();\n};\n\nexport const buildEmptyMonster = _ => ({\n    name: '',\n    size: 'None',\n    type: 'None',\n    alignment: 'None',\n    stats: {\n        str: 0,\n        dex: 0,\n        con: 0,\n        int: 0,\n        wis: 0,\n        cha: 0,\n    },\n    skills: [], //{ skill, modifier }\n    xp: 0,\n    ac: 0,\n    hp: 0,\n    hitDie: '',\n    speed: '',\n    savingThrows: [], //{ stat, modifier }\n    damageVulnerabilities: [],\n    damageImmunities: [],\n    damageResistances: [],\n    conditionImmunities: [],\n    senses: '',\n    languages: '',\n    actions: [], //{name, descr}\n    reactions: [], //{name, descr}\n    abilities: [], //{name, descr}\n    legendaryActions: {\n        summary: '',\n        actions: [],\n    },\n    description: '',\n    imageKey: null,\n});\n\nexport const buildMonsterId = monster => {\n    monster.id = monster.name + monster.xp;\n    return monster;\n};\n\nconst addSavingThrows = tnx => {\n    getAllMonsters(tnx).then(monsterList => {\n        monsterList.forEach(monster => {\n            monster.savingThrows = [];\n            addMonster(monster, tnx);\n        });\n    })\n};\n\naddUpgrade(addSavingThrows, 7);\n\nconst convertDamageTypesToStringFields = tnx => {\n    getAllMonsters(tnx).then(monsterList => {\n        monsterList.forEach(monster => {\n            monster.damageImmunities = monster.damageImmunities.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            monster.damageResistances = monster.damageResistances.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            monster.damageVulnerabilities = monster.damageVulnerabilities.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            monster.conditionImmunities = monster.conditionImmunities.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            addMonster(monster, tnx);\n        });\n    })\n};\n\naddUpgrade(convertDamageTypesToStringFields, 5);\n\nconst fixXpString = tnx => {\n    getAllMonsters(tnx).then(monsterList => {\n        monsterList.forEach(monster => {\n            monster.xp = parseInt(monster.xp);\n            addMonster(monster, tnx);\n        });\n    })\n};\n\naddUpgrade(fixXpString, 6);\n\nconst addReactions = tnx => {\n    console.log('Adding reactions');\n    fetch('https://raw.githubusercontent.com/cfogrady/5eEncounters/master/5e-SRD-Monsters.json')\n        .then(response => response.json())\n        .then(data => {\n          return data.reduce((promise, exportMonster) => {\n            if(exportMonster.license) {\n              return promise;\n            }\n            const monster = fromJsonExportFormat(exportMonster);\n            buildMonsterId(monster);\n            return promise.then(_ => getMonsterById(monster.id).then(oldMonster => {\n                if(oldMonster != null) {\n                    monster.imageKey = oldMonster.imageKey;\n                }\n                return addMonster(monster);\n            }).catch(err => {\n                return addMonster(monster);\n            }));\n          }, new Promise((resolve, reject) => resolve()));\n        });\n};\n\naddUpgrade(addReactions, 8, 5);\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'monster-images';\n\naddStore(storeName, {autoIncrement: true});\n\nexport const addMonsterImage = monsterImage => {\n    const db = getDatabase();\n    return db.put(storeName, monsterImage);\n};\n\nexport const removeMonsterImageById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getMonsterImage = id => getDatabase().get(storeName, id);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { xpToCR } from '../UnitConversionCalculator';\n\nconst CRSelector = ({ onChange, value, showSelect }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value='' disabled={!showSelect} hidden={!showSelect}>Select CR</option>\n            { Object.keys(xpToCR).map(xp => (\n                <option key={xp} value={xp}>{`${xpToCR[xp]} (${xp} exp)`}</option>\n            ))}\n        </select>\n    );\n};\n\nCRSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    showSelect: PropTypes.bool,\n}\n\nCRSelector.defaultProps = {\n    showSelect: false,\n}\n\nexport default CRSelector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CRSelector from './selectors/CRSelector';\n\nimport './MonsterViewerHeader.css';\n\nclass MonsterViewerHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsterList: [],\n            loading: true,\n        };\n        /*this.getDisplayElement = this.getDisplayElement.bind(this);*/\n    }\n\n    render() {\n        const { onAddMonster, filterXp, onXPFilter, onNameFilter, filterName } = this.props;\n        return (\n            <div className='monster-viewer-header'>\n                <div className='mvh-row'>\n                    <input\n                        className='mvh-filter'\n                        placeholder='Filter By Monster Name'\n                        type='search'\n                        value={filterName || ''}\n                        onChange={onNameFilter}\n                    />\n                    <div className='mvh-left-margin'>\n                        <CRSelector\n                            value={filterXp == null ? '' : filterXp.toString()}\n                            onChange={onXPFilter}\n                            showSelect={true}\n                        />\n                    </div>\n                </div>\n                <div className='mvh-row'>\n                    <button onClick={onAddMonster}>Add Monster</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nMonsterViewerHeader.propTypes = {\n    filterXp: PropTypes.number,\n    filterName: PropTypes.string,\n    onAddMonster: PropTypes.func.isRequired,\n    onXPFilter: PropTypes.func.isRequired,\n    onNameFilter: PropTypes.func.isRequired,\n};\n\nMonsterViewerHeader.defaultProps = {\n    filterXp: null,\n    filterName: null,\n};\n\nexport default MonsterViewerHeader;\n","import React from 'react';\n\nimport './SimpleModal.css';\n\nconst SimpleModal = ({ show, children }) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <section className=\"modal-main\">\n          {children}\n        </section>\n      </div>\n    );\n  };\n\nexport default SimpleModal;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SizeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Size</option>\n            <option value=\"Tiny\">Tiny</option>\n            <option value=\"Small\">Small</option>\n            <option value=\"Medium\">Medium</option>\n            <option value=\"Large\">Large</option>\n            <option value=\"Huge\">Huge</option>\n            <option value=\"Gargantuan\">Gargantuan</option>\n        </select>\n    );\n};\n\nSizeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nSizeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default SizeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TypeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Monster Type</option>\n            <option value=\"Aberration\">Aberration</option>\n            <option value=\"Beast\">Beast</option>\n            <option value=\"Celestial\">Celestial</option>\n            <option value=\"Construct\">Construct</option>\n            <option value=\"Dragon\">Dragon</option>\n            <option value=\"Elemental\">Elemental</option>\n            <option value=\"Fey\">Fey</option>\n            <option value=\"Fiend\">Fiend</option>\n            <option value=\"Giant\">Giant</option>\n            <option value=\"Humanoid\">Humanoid</option>\n            <option value=\"Monstrosity\">Monstrosity</option>\n            <option value=\"Ooze\">Ooze</option>\n            <option value=\"Plant\">Plant</option>\n            <option value=\"Undead\">Undead</option>\n        </select>\n    );\n};\n\nTypeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nTypeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default TypeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlignmentSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Alignment</option>\n            <option value=\"Unaligned\">Unaligned</option>\n            <option value=\"Lawful Good\">Lawful Good</option>\n            <option value=\"Neutral Good\">Neutral Good</option>\n            <option value=\"Chaotic Good\">Chaotic Good</option>\n            <option value=\"Lawful Neutral\">Lawful Neutral</option>\n            <option value=\"True Neutral\">True Neutral</option>\n            <option value=\"Chaotic Neutral\">Chaotic Neutral</option>\n            <option value=\"Lawful Evil\">Lawful Evil</option>\n            <option value=\"Neutral Evil\">Neutral Evil</option>\n            <option value=\"Chaotic Evil\">Chaotic Evil</option>\n        </select>\n    );\n};\n\nAlignmentSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nAlignmentSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default AlignmentSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SizeSelector from '../selectors/SizeSelector';\nimport TypeSelector from '../selectors/TypeSelector';\nimport AlignmentSelector from '../selectors/AlignmentSelector';\n\nimport './MonsterModal.css';\n\nconst NameSection = ({ onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <input type='text' placeholder='Monster Name' onChange={onChange('name')} value={monster.name || ''}/>\n                <div className='monster-form-row-section'>\n                    <div className='right-margin top-margin'><SizeSelector value={monster.size || 'None'} onChange={onChange('size')}/></div>\n                    <div className='right-margin top-margin'><TypeSelector value={monster.type || 'None'} onChange={onChange('type')}/></div>\n                    <div className='right-margin top-margin'><AlignmentSelector value={monster.alignment || 'None'} onChange={onChange('alignment')}/></div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <span className='red-text bold-text'>{monster.name}</span>\n            <span>{`${monster.size} ${monster.type}, ${monster.alignment}`}</span>\n        </div>\n    );\n};\n\nNameSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nNameSection.defaultProps = {\n}\n\nexport default NameSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nconst CombatSection = ({ onChangeNumber, onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <input className=\"mm-margin-element number-size\" type='number' placeholder='AC' onChange={onChangeNumber('ac')} value={monster.ac || ''}/>\n                <div className='row-container top-margin'>\n                    <input type='number' className='mm-margin-element number-size' placeholder='HP' onChange={onChangeNumber('hp')} value={monster.hp || ''}/>\n                    <input className='mm-margin-element mm-hit-die' placeholder='Hid Die' onChange={onChange('hitDie')} value={monster.hitDie || ''}/>\n                </div>\n                <input className=\"mm-margin-element\" type='text' placeholder='Speed' onChange={onChange('speed')} value={monster.speed || ''}/>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Armor Class:&nbsp;</span>\n                <span className='red-text'>{monster.ac}</span>\n            </div>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Hit Points:&nbsp;</span>\n                <span className='red-text'>{monster.hp}&nbsp;({monster.hitDie})</span>\n            </div>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Speed:&nbsp;</span>\n                <span className='red-text'>{monster.speed}</span>\n            </div>\n        </div>\n    );\n};\n\nCombatSection.propTypes = {\n    onChangeNumber: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nCombatSection.defaultProps = {\n}\n\nexport default CombatSection;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { calculateModStr } from '../UnitConversionCalculator';\n\nimport './MonsterModal.css';\n\nconst StatSection = ({ onChangeNumber, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className=\"row-container center-container\">\n                    <div className=\"physical-stat-section\">\n                        <div className=\"col-container center-container side-margin\">\n                            <input className=\"number-size\" type='number' placeholder='STR' onChange={onChangeNumber('stats.str')} value={monster.stats.str || ''}/>\n                            <div className=\"left-margin\">{calculateModStr(monster.stats.str)}</div>\n                        </div>\n                        <div className=\"col-container center-container side-margin\">\n                            <input className=\"number-size\" type='number' placeholder='DEX' onChange={onChangeNumber('stats.dex')} value={monster.stats.dex || ''}/>\n                            <div className=\"left-margin\">{calculateModStr(monster.stats.dex)}</div>\n                        </div>\n                        <div className=\"col-container center-container side-margin\">\n                            <input className=\"number-size\" type='number' placeholder='CON' onChange={onChangeNumber('stats.con')} value={monster.stats.con || ''}/>\n                            <div className=\"left-margin\">{calculateModStr(monster.stats.con)}</div>\n                        </div>\n                    </div>\n                    <div className=\"mental-stat-section\">\n                        <div className=\"col-container center-container side-margin\">\n                            <input className=\"number-size\" type='number' placeholder='INT' onChange={onChangeNumber('stats.int')} value={monster.stats.int || ''}/>\n                            <div className=\"left-margin\">{calculateModStr(monster.stats.int)}</div>\n                        </div>\n                        <div className=\"col-container center-container side-margin\">\n                            <input className=\"number-size\" type='number' placeholder='WIS' onChange={onChangeNumber('stats.wis')} value={monster.stats.wis || ''}/>\n                            <div className=\"left-margin\">{calculateModStr(monster.stats.wis)}</div>\n                        </div>\n                        <div className=\"col-container center-container side-margin\">\n                            <input className=\"number-size\" type='number' placeholder='CHA' onChange={onChangeNumber('stats.cha')} value={monster.stats.cha || ''}/>\n                            <div className=\"left-margin\">{calculateModStr(monster.stats.cha)}</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <div className=\"row-container center-container\">\n                <div className=\"physical-stat-section\">\n                    <div className=\"col-continer center-container side-margin\">\n                        <div className=\"red-text bold-text\">STR</div>\n                        <div className=\"red-text\">{`${monster.stats.str} (${calculateModStr(monster.stats.str)})`}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <div className=\"red-text bold-text\">DEX</div>\n                        <div className=\"red-text\">{`${monster.stats.dex} (${calculateModStr(monster.stats.dex)})`}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <div className=\"red-text bold-text\">CON</div>\n                        <div className=\"red-text\">{`${monster.stats.con} (${calculateModStr(monster.stats.con)})`}</div>\n                    </div>\n                </div>\n                <div className=\"mental-stat-section\">\n                    <div className=\"col-continer center-container side-margin\">\n                        <div className=\"red-text bold-text\">INT</div>\n                        <div className=\"red-text\">{`${monster.stats.int} (${calculateModStr(monster.stats.int)})`}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <div className=\"red-text bold-text\">WIS</div>\n                        <div className=\"red-text\">{`${monster.stats.wis} (${calculateModStr(monster.stats.wis)})`}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <div className=\"red-text bold-text\">CHA</div>\n                        <div className=\"red-text\">{`${monster.stats.cha} (${calculateModStr(monster.stats.cha)})`}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nStatSection.propTypes = {\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nStatSection.defaultProps = {\n}\n\nexport default StatSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SkillSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Skill</option>\n            <option value=\"Acrobatics\">Acrobatics</option>\n            <option value=\"Animal Handling\">Animal Handling</option>\n            <option value=\"Arcana\">Arcana</option>\n            <option value=\"Athletics\">Athletics</option>\n            <option value=\"Deception\">Deception</option>\n            <option value=\"History\">History</option>\n            <option value=\"Insight\">Insight</option>\n            <option value=\"Intimidation\">Intimidation</option>\n            <option value=\"Investigation\">Investigation</option>\n            <option value=\"Medicine\">Medicine</option>\n            <option value=\"Nature\">Nature</option>\n            <option value=\"Perception\">Perception</option>\n            <option value=\"Performance\">Performance</option>\n            <option value=\"Persuasion\">Persuasion</option>\n            <option value=\"Religion\">Religion</option>\n            <option value=\"Sleight of Hand\">Sleight Of Hand</option>\n            <option value=\"Stealth\">Stealth</option>\n            <option value=\"Survival\">Survival</option>\n        </select>\n    );\n};\n\nSkillSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nSkillSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default SkillSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StatSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Stat</option>\n            <option value=\"STR\">STR</option>\n            <option value=\"DEX\">DEX</option>\n            <option value=\"CON\">CON</option>\n            <option value=\"INT\">INT</option>\n            <option value=\"WIS\">WIS</option>\n            <option value=\"CHA\">CHA</option>\n        </select>\n    );\n};\n\nStatSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nStatSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default StatSelector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { numberToString, calculateCR } from '../UnitConversionCalculator';\nimport SkillSelector from '../selectors/SkillSelector';\nimport StatSelector from '../selectors/StatSelector';\n\nimport './MonsterModal.css';\nimport CRSelector from '../selectors/CRSelector';\n\nclass SkillsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange, onChangeNumber} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className=\"column-continer\">\n                        <div className=\"row-container\">Skills <button onClick={this.onAddElement('skills', {skill: 'None', modifier: 0})} className=\"left-margin\">Add Skill</button></div> \n                        {monster.skills.map((skill, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <SkillSelector value={skill.skill} onChange={onChange(`skills.${idx}.skill`)}/>\n                                <input className='left-margin number-size' type='number' value={skill.modifier || ''} onChange={onChangeNumber(`skills.${idx}.modifier`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('skills', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Saving Throws <button onClick={this.onAddElement('savingThrows', {stat: 'None', modifier: 0})} className=\"left-margin\">Add Save</button></div> \n                        {monster.savingThrows.map((save, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <StatSelector value={save.stat} onChange={onChange(`savingThrows.${idx}.stat`)}/>\n                                <input className='left-margin number-size' type='number' value={save.modifier || ''} onChange={onChangeNumber(`savingThrows.${idx}.modifier`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('savingThrows', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Vulnerabilities <input onChange={onChange('damageVulnerabilities')} value={monster.damageVulnerabilities} className=\"left-margin\"/></div> \n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Resistances <input onChange={onChange('damageResistances')} value={monster.damageResistances} className=\"left-margin\"/></div> \n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Immunities <input onChange={onChange('damageImmunities')} value={monster.damageImmunities} className=\"left-margin\"/></div> \n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Condition Immunities <input onChange={onChange('conditionImmunities')} value={monster.conditionImmunities} className=\"left-margin\"/></div> \n                    </div>\n                    <textarea className='top-margin textarea-size' value={monster.senses} onChange={onChange('senses')} placeholder='Senses'/>\n                    <textarea className='top-margin textarea-size' value={monster.languages} onChange={onChange('languages')} placeholder='Languages'/>\n                    <div className='row-container top-margin'>\n                        CR:\n                        <div className='left-margin'><CRSelector value={monster.xp.toString()} onChange={onChangeNumber('xp')}/></div>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                {monster.skills.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Skills&nbsp;</span>\n                        <span className='red-text'>{monster.skills.map((skill, idx) => `${idx === 0 ? '' : ', '}${skill.skill} ${numberToString(skill.modifier)}`)}</span>\n                    </div>\n                )}\n                {monster.savingThrows.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Saving Throws&nbsp;</span>\n                        <span className='red-text'>{monster.savingThrows.map((save, idx) => `${idx === 0 ? '' : ', '}${save.stat} ${numberToString(save.modifier)}`)}</span>\n                    </div>\n                )}\n                {monster.damageVulnerabilities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Vulnerabilities&nbsp;</span>\n                        <span className='red-text'>{monster.damageVulnerabilities}</span>\n                    </div>\n                )}\n                {monster.damageResistances.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Resistances&nbsp;</span>\n                        <span className='red-text'>{monster.damageResistances}</span>\n                    </div>\n                )}\n                {monster.damageImmunities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Immunities&nbsp;</span>\n                        <span className='red-text'>{monster.damageImmunities}</span>\n                    </div>\n                )}\n                {monster.conditionImmunities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Condition Immunities&nbsp;</span>\n                        <span className='red-text'>{monster.conditionImmunities}</span>\n                    </div>\n                )}\n                {monster.senses !== '' && monster.senses != null && (\n                    <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Senses&nbsp;</span>\n                        <span className='red-text'>{monster.senses}</span>\n                    </div>\n                )}\n                {monster.languages !== '' && monster.languages != null && (\n                    <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Languages&nbsp;</span>\n                        <span className='red-text'>{monster.languages}</span>\n                    </div>\n                )}\n                <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Challenge&nbsp;</span>\n                        <span className='red-text'>{`${calculateCR(monster.xp)} (${monster.xp} XP)`}</span>\n                </div>\n\n            </div>\n        );\n    }\n};\n\nSkillsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nSkillsSection.defaultProps = {\n}\n\nexport default SkillsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass AbilitiesSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Abilities: <button className='left-margin' onClick={this.onAddElement('abilities', {name: '', descr: ''})}>Add Ability</button>\n                    </div>\n                    {monster.abilities.map((ability, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Ability Name' value={ability.name} onChange={onChange(`abilities.${idx}.name`)}/>\n                            <textarea className='mm-margin-element textarea-size' placeholder='Ability Description' value={ability.descr} onChange={onChange(`abilities.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('abilities', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if (monster.abilities.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom mm-align-left'>\n                {monster.abilities.map((ability, idx) => (\n                    <div key={idx}>\n                        <span className='bold-text'>{ability.name}&nbsp;</span>\n                        <span>{ability.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nAbilitiesSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nAbilitiesSection.defaultProps = {\n}\n\nexport default AbilitiesSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass ActionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Actions: <button className='left-margin' onClick={this.onAddElement('actions', {name: '', descr: ''})}>Add Action</button>\n                    </div>\n                    {monster.actions.map((action, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Action Name' value={action.name} onChange={onChange(`actions.${idx}.name`)}/>\n                            <textarea className='textarea-size mm-margin-element' placeholder='Action Description' value={action.descr} onChange={onChange(`actions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('actions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(monster.actions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Actions</div>\n                {monster.actions.map((action, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{action.name}&nbsp;</span>\n                        <span>{action.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nActionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nActionsSection.defaultProps = {\n}\n\nexport default ActionsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass ReactionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = (this.props.monster[prop] || []).concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Reactions: <button className='left-margin' onClick={this.onAddElement('reactions', {name: '', descr: ''})}>Add Reaction</button>\n                    </div>\n                    {(monster.reactions || []).map((reaction, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Reaction Name' value={reaction.name} onChange={onChange(`reactions.${idx}.name`)}/>\n                            <textarea className='textarea-size mm-margin-element' placeholder='Reaction Description' value={reaction.descr} onChange={onChange(`reactions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('reactions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(!monster.reactions || monster.reactions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Reactions</div>\n                {monster.reactions.map((reaction, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{reaction.name}&nbsp;</span>\n                        <span>{reaction.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nReactionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nReactionsSection.defaultProps = {\n}\n\nexport default ReactionsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { property } from 'underscore';\n\nimport './MonsterModal.css';\n\nclass ActionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = (property(prop.split('.'))(this.props.monster)).filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = (property(prop.split('.'))(this.props.monster)).concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Legendary Actions: <button className='left-margin' onClick={this.onAddElement('legendaryActions.actions', {name: '', descr: ''})}>Add Action</button>\n                    </div>\n                    <textarea className='top-margin textarea-size' placeholder='Legendary Action Summary and Restrictions' onChange={onChange('legendaryActions.summary')} value={monster.legendaryActions.summary}/>\n                    {monster.legendaryActions.actions.map((action, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' placeholder='Action Name' type='text' value={action.name} onChange={onChange(`legendaryActions.actions.${idx}.name`)}/>\n                            <textarea className='mm-margin-element textarea-size' placeholder='Action Description' value={action.descr} onChange={onChange(`legendaryActions.actions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('legendaryActions.actions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(monster.legendaryActions.actions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Legendary Actions</div>\n                <div>{monster.legendaryActions.summary}</div>\n                {monster.legendaryActions.actions.map((action, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{action.name}&nbsp;</span>\n                        <span>{action.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nActionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nActionsSection.defaultProps = {\n}\n\nexport default ActionsSection;","import React, { Component } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport PropTypes from 'prop-types';\nimport { noop } from 'underscore';\nimport { getMonsterImage } from '../data-store/MonsterImages';\n\nimport './MonsterModal.css';\n\nclass MonsterImageSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pictureURL: null,\n            loadingImage: false,\n        };\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    componentDidMount() {\n        const { monster } = this.props;\n        if(monster.imageKey != null) {\n            getMonsterImage(monster.imageKey).then(result => {\n                this.setState({\n                    pictureURL: result,\n                })\n            }).catch(e => {\n                monster.imageKey = null;\n            });\n            this.setState({\n                loadingImage: true,\n            });\n        }\n    }\n\n    onDrop(picture) {\n        const reader = new FileReader();\n        reader.onload = _ => {\n            this.props.onImageSet(reader.result);\n            this.setState({\n                pictureURL: reader.result,\n                loadingImage: false,\n            });\n        }\n        reader.readAsDataURL(picture[0]);\n        this.setState({\n            loadingImage: true,\n        })\n    }\n\n    render() {\n        const { loadingImage, pictureURL } = this.state;\n        const { editable } = this.props;\n        if(!loadingImage && pictureURL == null) {\n            if(editable) {\n                return (\n                    <ImageUploader\n                        withIcon={true}\n                        buttonText='Choose images'\n                        onChange={this.onDrop}\n                        imgExtension={['.jpg', '.jpeg', '.gif', '.png', '.gif']}\n                        maxFileSize={5242880}\n                    />\n                );\n            }\n            return null;\n        }\n        return (\n            <div className=\"row-container center-container\">\n                <img style={{maxHeight: '20em'}} alt=\"Loading...\" src={pictureURL}/>\n            </div>\n        );\n    }\n};\n\nMonsterImageSection.propTypes = {\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool,\n    onImageSet: PropTypes.func,\n}\n\nMonsterImageSection.defaultProps = {\n    editable: false,\n    onImageSet: noop,\n}\n\nexport default MonsterImageSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nconst DescriptionSection = ({ onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div>Description:</div>\n                <textarea className='textarea-size top-margin' onChange={onChange('description')} value={monster.description}/>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom mm-align-left'>\n            <span>{monster.description}</span>\n        </div>\n    );\n};\n\nDescriptionSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nDescriptionSection.defaultProps = {\n}\n\nexport default DescriptionSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, clone } from 'underscore';\nimport SimpleModal from '../../common/modals/SimpleModal';\nimport NameSection from './NameSection';\nimport CombatSection from './CombatSection';\nimport StatSection from './StatSection';\nimport SkillsSection from './SkillsSection';\nimport AbilitiesSection from './AbilitiesSection';\nimport ActionsSection from './ActionsSection';\nimport ReactionsSection from './ReactionsSection';\nimport LegendaryActionsSection from './LegendaryActionsSection';\nimport MonsterImageSection from './MonsterImageSection';\nimport DescriptionSection from './DescriptionSection';\n\nimport './MonsterModal.css';\n\nconst setPathValue = (object, path, value) => {\n    const splitPath = path.split(\".\");\n    let location = object;\n    for(let i = 0; i < splitPath.length; i++) {\n        const currentPath = splitPath[i];\n        if(i === splitPath.length -1) {\n            location[currentPath] = value;\n        } else {\n            if(location[currentPath] == null) {\n                location[currentPath] = {};\n            }\n            location = location[currentPath];\n        }\n    }\n}\n\nclass MonsterModal extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeNumber = this.onChangeNumber.bind(this);\n    }\n\n    onChange(path) {\n        const { monster } = this.props;\n        return event => {\n            const value = event.target.value;\n            const newMonster = clone(monster);\n            setPathValue(newMonster, path, value);\n            this.props.onMonsterChange(newMonster);\n        }\n    }\n\n    onChangeNumber(path) {\n        const { monster } = this.props;\n        return event => {\n            const value = parseInt(event.target.value);\n            const newMonster = clone(monster);\n            setPathValue(newMonster, path, value);\n            this.props.onMonsterChange(newMonster);\n        }\n    }\n\n    render() {\n        const { editable, show, monster, onSave, onCancel, onDelete, onImageSet, onToggleEdit } = this.props;\n        if(monster == null) {\n            return null;\n        }\n        return (\n            <SimpleModal show={show}>\n                <div className='monster-form'>\n                    <NameSection editable={editable} monster={monster} onChange={this.onChange}/>\n                    <CombatSection editable={editable} monster={monster} onChange={this.onChange} onChangeNumber={this.onChangeNumber} />\n                    <StatSection editable={editable} monster={monster} onChangeNumber={this.onChangeNumber}/>\n                    <SkillsSection editable={editable} monster={monster} onChange={this.onChange} onChangeNumber={this.onChangeNumber} />\n                    <AbilitiesSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <ActionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <ReactionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <LegendaryActionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <DescriptionSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <div className='monster-form-section'>\n                        <MonsterImageSection editable={editable} monster={monster} onImageSet={onImageSet}/>\n                    </div>\n                    { editable ? (\n                    <div className='row-container-space-between top-margin'>\n                        <button onClick={onSave}>Save</button>\n                        {monster.id != null && <button onClick={onDelete}>Delete</button>}\n                        <button onClick={onCancel}>Cancel</button>\n                    </div>) :\n                    <div className='row-container-space-between top-margin'>\n                        {onToggleEdit !== noop && <button onClick={onToggleEdit}>Edit</button>}\n                        <button onClick={onCancel}>Close</button>\n                    </div>\n                    }\n\n                </div>\n\n            </SimpleModal>\n        );\n    }\n}\n\nMonsterModal.propTypes = {\n    monster: PropTypes.shape({\n\n    }),\n    editable: PropTypes.bool,\n    show: PropTypes.bool.isRequired,\n    onSave: PropTypes.func,\n    onCancel: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n    onImageSet: PropTypes.func,\n    onToggleEdit: PropTypes.func,\n};\n\nMonsterModal.defaultProps = {\n    monster: null,\n    editable: false,\n    onMonsterChange: noop,\n    onSave: noop,\n    onDelete: noop,\n    onImageSet: noop,\n    onToggleEdit: noop,\n};\n\nexport default MonsterModal;\n","import React from 'react';\nimport MoonLoader from 'react-spinners/MoonLoader';\n\nimport './LoadingModal.css';\n\nconst LoadingModal = ({ show, children }) => {\n    const showHideClassName = show ? \"lm-modal display-block\" : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <div className='lm-modal-main'>\n            <MoonLoader\n                sizeUnit={'px'}\n                size={200}\n                loading={show}\n                color={'#123abc'}\n            />\n            {children}\n        </div>\n      </div>\n    );\n};\n\nexport default LoadingModal;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from './SimpleModal';\n\nimport './SelectOrEditModal.css';\n\nconst SelectOrEditModal = ({ onSelect, onView, addText, viewText, show }) => {\n    return (\n        <SimpleModal show={show}>\n            <div className='soem-container'>\n                <div className='soem-element'>{`${addText} or ${viewText.toLowerCase()} element.`}</div>\n                <div className='soem-button-row'>\n                    <button className='soem-element' onClick={onSelect}>{addText}</button>\n                    <button className='soem-element' onClick={onView}>{viewText}</button>\n                </div>\n            </div>\n        </SimpleModal>\n    );\n};\n\nSelectOrEditModal.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onView: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired,\n    addText: PropTypes.string,\n    viewText: PropTypes.string,\n}\n\nSelectOrEditModal.defaultProps = {\n    addText: 'Select',\n    viewText: 'View',\n}\n\nexport default SelectOrEditModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllMonsters, buildEmptyMonster, buildMonsterId, addMonster, removeMonsterById } from './data-store/Monsters';\nimport { addMonsterImage, removeMonsterImageById } from './data-store/MonsterImages';\nimport MonsterViewerHeader from './MonsterViewerHeader';\nimport MonsterModal from './modal/MonsterModal';\nimport LoadingModal from '../common/modals/LoadingModal';\nimport { calculateCR } from './UnitConversionCalculator';\nimport SelectOrEditModal from '../common/modals/SelectOrEditModal';\n\nimport './MonsterViewer.scss';\n\nconst sortMonsterList = monsterList => {\n    return monsterList.sort((a, b) => {\n        const nameA = a.id.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.id.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass MonsterViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsterList: [],\n            loading: true,\n            selectedMonster: null,\n            imageURL: null,\n            filterXp: null,\n            filterName: null,\n            editing: false,\n            selectOrViewMonster: null,\n        };\n        this.onAddMonster = this.onAddMonster.bind(this);\n        this.onImageSet = this.onImageSet.bind(this);\n        this.onMonsterChange = this.onMonsterChange.bind(this);\n        this.viewMonster = this.viewMonster.bind(this);\n        this.changeMonster = this.changeMonster.bind(this);\n        this.onDeleteMonster = this.onDeleteMonster.bind(this);\n        this.saveMonsterModel = this.saveMonsterModel.bind(this);\n        this.cancelMonsterModal = this.cancelMonsterModal.bind(this);\n        this.changeXPFilter = this.changeXPFilter.bind(this);\n        this.changeNameFilter = this.changeNameFilter.bind(this);\n        this.onToggleEdit = this.onToggleEdit.bind(this);\n    }\n\n    onAddMonster() {\n        this.setState({\n            selectedMonster: buildEmptyMonster(),\n            imageURL: null,\n            editing: true,\n        });\n    }\n\n    onImageSet(imageURL) {\n        this.setState({\n            imageURL,\n        })\n    }\n\n    onToggleEdit() {\n        this.setState({\n            editing: true,\n        })\n    }\n\n    onMonsterChange(monster) {\n        this.setState({\n            selectedMonster: monster,\n            selectOrViewMonster: null,\n        });\n    }\n\n    viewMonster(monster) {\n        this.onMonsterChange(monster);\n    }\n\n    changeMonster(monster) {\n        return _ => {\n            if(this.props.onSelectMonster == null) {\n                this.onMonsterChange(monster);\n            } else {\n                this.setState({\n                    selectOrViewMonster: monster,\n                })\n            }\n        };\n    }\n\n    cancelMonsterModal() {\n        this.setState({\n            selectedMonster: null,\n            imageURL: null,\n            editing: false\n        });\n    }\n\n    onDeleteMonster() {\n        const monster = this.state.selectedMonster;\n        let { monsterList } = this.state;\n        monsterList = monsterList.filter(mon => mon.id !== monster.id);\n        if(monster.imageKey) {\n            removeMonsterImageById(monster.imageKey);\n        }\n        removeMonsterById(monster.id);\n        this.setState({\n            selectedMonster: null,\n            monsterList: sortMonsterList(monsterList),\n            imageURL: null,\n            editing: false,\n        });\n    }\n\n    saveMonsterModel() {\n        const monster = this.state.selectedMonster;\n        let { monsterList, imageURL } = this.state;\n        if(monster.id == null) {\n            buildMonsterId(monster);\n            monsterList = monsterList.concat([monster])\n            if(imageURL) {\n                addMonsterImage(imageURL).then(id => {\n                    monster.imageKey = id;\n                    addMonster(monster);\n                })\n            } else {\n                addMonster(monster);\n            }\n        } else {\n            const oldId = monster.id;\n            monsterList = monsterList.filter(mon => mon.id !== monster.id);\n            buildMonsterId(monster);\n            monsterList = monsterList.concat([monster]);\n            if(imageURL) {\n                addMonsterImage(imageURL).then(id => {\n                    monster.imageKey = id;\n                    removeMonsterById(oldId).then(_ => addMonster(monster));\n                })\n            } else {\n                removeMonsterById(oldId).then(_ => addMonster(monster));\n            }\n        }\n        this.setState({\n            selectedMonster: null,\n            monsterList: sortMonsterList(monsterList),\n            imageURL: null,\n            editing: false,\n        });\n    }\n\n    componentDidMount(props) {\n        getAllMonsters().then(monsterList => {\n            this.setState({\n                monsterList: sortMonsterList(monsterList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    changeNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    changeXPFilter(event) {\n        const xp = event.target.value;\n        this.setState({\n            filterXp: xp === '' ? null : parseInt(xp),\n        });\n    }\n\n    render() {\n        const { onSelectMonster } = this.props;\n        const { loading, monsterList, selectedMonster, filterName, filterXp, editing, selectOrViewMonster } = this.state;\n        const showSelectedMonster = selectedMonster != null;\n        const showSelectOrViewMonster = selectOrViewMonster != null;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='mv-view'>\n            <MonsterViewerHeader\n                filterXp={filterXp}\n                filterName={filterName}\n                onAddMonster={this.onAddMonster}\n                onNameFilter={this.changeNameFilter}\n                onXPFilter={this.changeXPFilter}\n            />\n            <LoadingModal show={loading}/>\n            <SelectOrEditModal\n                onSelect={_ => onSelectMonster(selectOrViewMonster)}\n                onView={_ => this.viewMonster(selectOrViewMonster)}\n                show={showSelectOrViewMonster}\n            />\n            <MonsterModal\n                monster={selectedMonster}\n                show={showSelectedMonster}\n                onSave={this.saveMonsterModel}\n                onCancel={this.cancelMonsterModal}\n                onMonsterChange={this.onMonsterChange}\n                onImageSet={this.onImageSet}\n                onDelete={this.onDeleteMonster}\n                editable={editing}\n                onToggleEdit={this.onToggleEdit}\n            />\n            {monsterList.filter(monster => {\n                const nameMatch = formattedFilterName == null || monster.name.toUpperCase().indexOf(formattedFilterName) >= 0;\n                const xpMatch = filterXp == null || monster.xp === filterXp;\n                return xpMatch && nameMatch;\n            }).map(monster => (\n                <div className='mv-monster' key={monster.id} onClick={this.changeMonster(monster)}>\n                    {`${monster.name} CR ${calculateCR(monster.xp)}`}\n                </div>\n            ))}\n        </div>\n        );\n    }\n}\n\nMonsterViewer.propTypes = {\n    onSelectMonster: PropTypes.func,\n}\n\nMonsterViewer.defaultProps = {\n    onSelectMonster: null,\n}\n\nexport default MonsterViewer;\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'players';\n\naddStore(storeName, {keyPath: 'id', autoIncrement: true});\n\nexport const addPlayer = player => {\n    const db = getDatabase();\n    return db.put(storeName, player);\n};\n\nexport const removePlayerById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getPlayerById = id => {\n    const db = getDatabase();\n    return db.get(storeName, id);\n};\n\nexport const getAllPlayers = _ => getDatabase().getAll(storeName);\n\nexport const buildEmptyPlayer = _ => ({\n    playerName: '',\n    characterName: '',\n    level: 0,\n    maxHp: 0,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PlayerViewerHeader.css';\n\nclass PlayerViewerHeader extends Component {\n    /*constructor(props) {\n        super(props);\n        //this.getDisplayElement = this.getDisplayElement.bind(this);\n    }*/\n\n    render() {\n        const { onAddPlayer, onNameFilter, filterName } = this.props;\n        return (\n            <div className='player-viewer-header'>\n                <input\n                    className='pvh-first-element'\n                    placeholder='Filter By Player Name'\n                    type='search'\n                    value={filterName || ''}\n                    onChange={onNameFilter}\n                />\n                <button className='pvh-last-element' onClick={onAddPlayer}>Add Player</button>\n            </div>\n        );\n    }\n}\n\nPlayerViewerHeader.propTypes = {\n    filterName: PropTypes.string,\n    onNameFilter: PropTypes.func.isRequired,\n    onAddPlayer: PropTypes.func.isRequired,\n};\n\nPlayerViewerHeader.defaultProps = {\n    filterName: null,\n};\n\nexport default PlayerViewerHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, clone } from 'underscore';\nimport SimpleModal from '../../common/modals/SimpleModal';\n\nimport './PlayerModal.css';\n\nconst setPathValue = (object, path, value) => {\n    const splitPath = path.split(\".\");\n    let location = object;\n    for(let i = 0; i < splitPath.length; i++) {\n        const currentPath = splitPath[i];\n        if(i === splitPath.length -1) {\n            location[currentPath] = value;\n        } else {\n            if(location[currentPath] == null) {\n                location[currentPath] = {};\n            }\n            location = location[currentPath];\n        }\n    }\n}\n\nclass PlayerModal extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeNumber = this.onChangeNumber.bind(this);\n    }\n\n    onChange(path) {\n        const { player } = this.props;\n        return event => {\n            const value = event.target.value;\n            const newPlayer = clone(player);\n            setPathValue(newPlayer, path, value);\n            this.props.onPlayerChange(newPlayer);\n        }\n    }\n\n    onChangeNumber(path) {\n        const { player } = this.props;\n        return event => {\n            const value = parseInt(event.target.value);\n            const newPlayer = clone(player);\n            setPathValue(newPlayer, path, value);\n            this.props.onPlayerChange(newPlayer);\n        }\n    }\n\n    render() {\n        const { show, player, onSave, onCancel, onDelete } = this.props;\n        if(player == null) {\n            return null;\n        }\n        return (\n            <SimpleModal show={show}>\n                <div className='player-modal-form'>\n                    <div className='pm-row-container pm-flex-start pm-margin-top'>\n                        <input\n                            className='pm-first-element'\n                            type='text'\n                            placeholder='Player Name'\n                            onChange={this.onChange('playerName')} value={player.playerName || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-input'\n                            type='text'\n                            placeholder='Character Name'\n                            onChange={this.onChange('characterName')} value={player.characterName || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-number-input'\n                            type='number'\n                            placeholder='Level'\n                            onChange={this.onChangeNumber('level')} value={player.level || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-number-input'\n                            type='number'\n                            placeholder='Max Hp'\n                            onChange={this.onChangeNumber('maxHp')} value={player.maxHp || ''}\n                        />\n                    </div>\n                    <div className='pm-row-container pm-space-between pm-margin-top pm-margin-bottom'>\n                        <button className='pm-first-element' onClick={onSave}>Save</button>\n                        {player.id != null && <button className='pm-element' onClick={onDelete}>Delete</button>}\n                        <button className='pm-last-element' onClick={onCancel}>Cancel</button>\n                    </div>\n                </div>\n\n            </SimpleModal>\n        );\n    }\n}\n\nPlayerModal.propTypes = {\n    player: PropTypes.shape({\n\n    }),\n    show: PropTypes.bool.isRequired,\n    onSave: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n    onPlayerChange: PropTypes.func,\n};\n\nPlayerModal.defaultProps = {\n    player: null,\n    onPlayerChange: noop,\n    onDelete: noop,\n};\n\nexport default PlayerModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllPlayers, removePlayerById, addPlayer, buildEmptyPlayer } from './data-store/Players';\nimport PlayerViewerHeader from './PlayerViewerHeader';\n\nimport './PlayerViewer.scss';\nimport PlayerModal from './modal/PlayerModal';\nimport SelectOrEditModal from '../common/modals/SelectOrEditModal';\nimport LoadingModal from '../common/modals/LoadingModal';\n\n/*const sortPlayerListByCharacter = playerList => {\n    return playerList.sort((a, b) => {\n        const nameA = a.characterName.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.characterName.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}*/\n\nconst sortPlayerListByPlayer = playerList => {\n    return playerList.sort((a, b) => {\n        const nameA = a.playerName.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.playerName.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass PlayerViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerList: [],\n            loading: true,\n            filterName: null,\n            selectedPlayer: null,\n            selectOrEditPlayer: null,\n        };\n        this.onNameFilter = this.onNameFilter.bind(this);\n        this.onDeletePlayer = this.onDeletePlayer.bind(this);\n        this.onSavePlayer = this.onSavePlayer.bind(this);\n        this.onCancelPlayerModal = this.onCancelPlayerModal.bind(this);\n        this.onPlayerChange = this.onPlayerChange.bind(this);\n        this.viewPlayer = this.viewPlayer.bind(this);\n        this.changePlayer = this.changePlayer.bind(this);\n        this.onAddPlayer = this.onAddPlayer.bind(this);\n        this.sortMethod = sortPlayerListByPlayer;\n    }\n\n    componentDidMount() {\n        getAllPlayers().then(playerList => {\n            this.setState({\n                playerList: this.sortMethod(playerList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    onNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    onPlayerChange(player) {\n        this.setState({\n            selectedPlayer: player,\n            selectOrEditPlayer: null,\n        });\n    }\n\n    viewPlayer(player) {\n        this.onPlayerChange(player);\n    }\n\n    changePlayer(player) {\n        return _ => {\n            if(this.props.onSelectPlayer == null) {\n                this.onPlayerChange(player);\n            } else {\n                this.setState({\n                    selectOrEditPlayer: player,\n                })\n            }\n        };\n    }\n\n    onAddPlayer() {\n        this.setState({\n            selectedPlayer: buildEmptyPlayer(),\n        })\n    }\n\n    onCancelPlayerModal() {\n        this.setState({\n            selectedPlayer: null,\n        });\n    }\n\n    onDeletePlayer() {\n        const player = this.state.selectedPlayer;\n        let { playerList } = this.state;\n        playerList = playerList.filter(plyr => plyr.id !== player.id);\n        removePlayerById(player.id);\n        this.setState({\n            selectedPlayer: null,\n            playerList: this.sortMethod(playerList),\n        });\n    }\n\n    onSavePlayer() {\n        const player = this.state.selectedPlayer;\n        let { playerList } = this.state;\n        if(player.id == null) {\n            addPlayer(player).then(id => {\n                player.id = id;\n                playerList = playerList.concat([player])\n                this.setState({\n                    selectedPlayer: null,\n                    playerList: this.sortMethod(playerList),\n                });\n            });\n        } else {\n            playerList = playerList.map(plyr => {\n                if(plyr.id !== player.id) {\n                    return plyr;\n                }\n                return player;\n            });\n            addPlayer(player); //acts as a put\n            this.setState({\n                selectedPlayer: null,\n                playerList: this.sortMethod(playerList),\n            });\n        }\n    }\n\n    render() {\n        const { loading, playerList, selectedPlayer, filterName, selectOrEditPlayer } = this.state;\n        const { onSelectPlayer } = this.props;\n        const showSelectedPlayer = selectedPlayer != null;\n        const showSelectOrEditPlayer = selectOrEditPlayer != null;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='pv-view'>\n            <PlayerViewerHeader\n                filterName={filterName}\n                onAddPlayer={this.onAddPlayer}\n                onNameFilter={this.onNameFilter}\n            />\n            <LoadingModal show={loading}/>\n            <SelectOrEditModal\n                onSelect={_ => onSelectPlayer(selectOrEditPlayer)}\n                onView={_ => this.viewPlayer(selectOrEditPlayer)}\n                show={showSelectOrEditPlayer}\n            />\n            <PlayerModal\n                player={selectedPlayer}\n                show={showSelectedPlayer}\n                onSave={this.onSavePlayer}\n                onCancel={this.onCancelPlayerModal}\n                onDelete={this.onDeletePlayer}\n                onPlayerChange={this.onPlayerChange}\n            />\n            {playerList.filter(player => {\n                const nameMatch = formattedFilterName == null || player.playerName.toUpperCase().indexOf(formattedFilterName) >= 0;\n                return nameMatch;\n            }).map(player => (\n                <div className='pv-player' key={player.id} onClick={this.changePlayer(player)}>\n                    <div>{`${player.characterName} (${player.playerName})`}</div>\n                    <div>Level: {player.level} Max Hp: {player.maxHp}</div>\n                </div>\n            ))}\n        </div>\n        );\n    }\n};\n\nPlayerViewer.propTypes = {\n    onSelectPlayer: PropTypes.func,\n}\n\nPlayerViewer.defaultProps = {\n    onSelectPlayer: null,\n}\n\nexport default PlayerViewer;","export const LIST = 'LIST';\n\nexport const BUILDER = 'BUILDER';\n\nexport const RUNNER = 'RUNNER';","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'encounters';\n\naddStore(storeName, {keyPath: 'id', autoIncrement: true});\n\nexport const getAllEncounters = _ => getDatabase().getAll(storeName);\n\nexport const addEncounter = encounter => {\n    const db = getDatabase();\n    return db.put(storeName, encounter);\n};\n\nexport const removeEncounterById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const buildEmptyEncounter = _ => ({\n        name: '', //name of the encounter\n        monsters: [], //{id: monsterId, count: monstersInEncounter}\n        players: [], //playerIds\n});\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EncountersListHeader.css';\n\nclass EncountersListHeader extends Component {\n    /*constructor(props) {\n        super(props);\n        //this.getDisplayElement = this.getDisplayElement.bind(this);\n    }*/\n\n    render() {\n        const { onAddEncounter, onNameFilter, filterName } = this.props;\n        return (\n            <div className='encounters-list-header'>\n                <input\n                    className='elh-component'\n                    placeholder='Filter By Name'\n                    type='search'\n                    value={filterName || ''}\n                    onChange={onNameFilter}\n                />\n                <button className='elh-component' onClick={onAddEncounter}>Add Encounter</button>\n            </div>\n        );\n    }\n}\n\nEncountersListHeader.propTypes = {\n    filterName: PropTypes.string,\n    onNameFilter: PropTypes.func.isRequired,\n    onAddEncounter: PropTypes.func.isRequired,\n};\n\nEncountersListHeader.defaultProps = {\n    filterName: null,\n};\n\nexport default EncountersListHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllEncounters, removeEncounterById } from '../data-store/Encounters';\nimport { BUILDER, RUNNER } from '../Views';\nimport EncountersListHeader from './EncountersListHeader';\n\nimport './EncountersList.scss';\n\nconst sortEncounterList = encounterList => {\n    return encounterList.sort((a, b) => {\n        const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass EncountersList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encounterList: [],\n            loading: true,\n            filterName: null,\n        };\n        this.onNameFilter = this.onNameFilter.bind(this);\n        this.onDeleteEncounter = this.onDeleteEncounter.bind(this);\n        this.onEditEncounter = this.onEditEncounter.bind(this);\n        this.onRunEncounter = this.onRunEncounter.bind(this);\n    }\n\n    componentDidMount() {\n        getAllEncounters().then(encounterList => {\n            this.setState({\n                encounterList: sortEncounterList(encounterList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    onNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    onEditEncounter(encounter = null) {\n        return _ => this.props.onChangeView(BUILDER, encounter);\n    }\n\n    onRunEncounter(encounter = null) {\n        return _ => this.props.onChangeView(RUNNER, encounter);\n    }\n\n    onDeleteEncounter(encounterId) {\n        return _ => {\n            let { encounterList } = this.state;\n            encounterList = encounterList.filter(encounter => encounter.id !== encounterId);\n            removeEncounterById(encounterId);\n            this.setState({\n                encounterList: sortEncounterList(encounterList),\n            });\n        }\n    }\n\n    render() {\n        const { encounterList, filterName } = this.state;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='el-view'>\n            <EncountersListHeader\n                filterName={filterName}\n                onAddEncounter={this.onEditEncounter()}\n                onNameFilter={this.onNameFilter}\n            />\n            {encounterList.filter(encounter => {\n                const nameMatch = formattedFilterName == null || encounter.name.toUpperCase().indexOf(formattedFilterName) >= 0;\n                return nameMatch;\n            }).map(encounter => (\n                <div className='el-encounter' key={encounter.id}>\n                    <div>{encounter.name}</div>\n                    <div className='el-margin-top el-row-space-between'>\n                        <button className='el-row-force-space' onClick={this.onEditEncounter(encounter)}>Edit</button>\n                        <button className='el-row-force-space' onClick={this.onDeleteEncounter(encounter.id)}>Delete</button>\n                        <button className='el-row-force-space'\n                            onClick={this.onRunEncounter(encounter)}\n                        >Run</button>\n                    </div>\n                </div>\n            ))}\n        </div>\n        );\n    }\n};\n\nEncountersList.propTypes = {\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncountersList.defaultProps = {\n}\n\nexport default EncountersList;","import { getMonsterById } from '../../monsters/data-store/Monsters';\nimport { getPlayerById } from '../../players/data-store/Players';\nimport { has } from 'underscore';\n\nexport const buildUseableEncounter = storedEncounter => {\n    const encounter = {};\n    encounter.id = storedEncounter.id;\n    encounter.name = storedEncounter.name;\n    encounter.monsters = []; // {count: 1, monster}\n    encounter.players = []; //players\n    const monsterPromise = storedEncounter.monsters.reduce((accumulator, element) => {\n        const promiseForNextMonster = getMonsterById(element.id).then(monster => {\n            encounter.monsters.push({\n                count: element.count,\n                monster,\n            });\n        });\n        if(accumulator == null) {\n           return promiseForNextMonster; \n        } else {\n            return accumulator.then( _ => promiseForNextMonster);\n        }\n    }, new Promise((resolve, rejct) => resolve()));\n    return monsterPromise.then( _ => {\n        return storedEncounter.players.reduce((accumulator, element) => {\n            const promiseForNextPlayer = getPlayerById(element).then(player => {\n                encounter.players.push(player);\n            });\n            if(accumulator == null) {\n                return promiseForNextPlayer;\n            }\n            return accumulator.then(_ => promiseForNextPlayer);\n        }, new Promise((resolve, rejct) => resolve()));\n    }).then(_ => encounter);\n}\n\nexport const buildStorableEncounter = useableEncounter => {\n    const encounter = {};\n    encounter.name = useableEncounter.name;\n    encounter.monsters = [];\n    encounter.players = [];\n    if(has(useableEncounter, 'id')) {\n        encounter.id = useableEncounter.id;\n    }\n    useableEncounter.players.forEach(player => encounter.players.push(player.id));\n    useableEncounter.monsters.forEach(monsterGroup => encounter.monsters.push({\n        id: monsterGroup.monster.id,\n        count: monsterGroup.count,\n    }));\n    return encounter;\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { calculateCR } from '../../monsters/UnitConversionCalculator';\nimport MonsterModal from '../../monsters/modal/MonsterModal';\n\nimport './EncounterBuilder.css';\n\nclass EBMonsterList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewMonster: null,\n        };\n        this.viewMonster = this.viewMonster.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    viewMonster(monster) {\n        return _ => {\n            this.setState({\n                viewMonster: monster,\n            });\n        }\n    }\n\n    closeModal() {\n        this.setState({\n            viewMonster: null,\n        });\n    }\n\n    render() {\n        const { onAddMonster, monsterList, onRemoveMonster, onChangeMonsterQty } = this.props;\n        const { viewMonster } = this.state;\n        return (\n            <div className='eb-list-container'>\n                <button onClick={onAddMonster}>Add Monster</button>\n                {monsterList.map(monsterGroup => (\n                    <div key={monsterGroup.monster.id} className='eb-list-element'>\n                        <input type='number' className='eb-number-input' onChange={onChangeMonsterQty(monsterGroup.monster.id)} value={monsterGroup.count}></input>\n                        <div onClick={this.viewMonster(monsterGroup.monster)} className='eb-margin-element eb-clickable'>{`${monsterGroup.monster.name} CR ${calculateCR(monsterGroup.monster.xp)}`}</div>\n                        <button className='eb-margin-element' onClick={onRemoveMonster(monsterGroup.monster.id)}>Delete</button>\n                    </div>\n                ))}\n                <MonsterModal\n                    monster={viewMonster}\n                    show={viewMonster != null}\n                    onCancel={this.closeModal}\n                    editable={false}\n                />\n            </div>\n        );\n    }\n}\n\nEBMonsterList.propTypes = {\n    onAddMonster: PropTypes.func.isRequired,\n    onRemoveMonster: PropTypes.func.isRequired,\n    onChangeMonsterQty: PropTypes.func.isRequired,\n    monsterList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nEBMonsterList.defaultProps = {\n}\n\nexport default EBMonsterList;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EncounterBuilder.css';\n\nconst EBPlayerList = ({ onAddPlayer, onRemovePlayer, playerList }) => {\n    return (\n        <div className='eb-list-container'>\n            <button onClick={onAddPlayer}>Add Player</button>\n            {playerList.map(player => (\n                <div className='eb-list-element' key={player.id}>\n                    <div className='eb-margin-element'>{`${player.characterName} (${player.playerName}) Level: ${player.level}, Max Hp: ${player.maxHp}`}</div>\n                    <button className='eb-margin-element' onClick={onRemovePlayer(player.id)}>Delete</button>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nEBPlayerList.propTypes = {\n    onAddPlayer: PropTypes.func.isRequired,\n    onRemovePlayer: PropTypes.func.isRequired,\n    playerList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nEBPlayerList.defaultProps = {\n}\n\nexport default EBPlayerList;","export const xpThresholds = [\n    {level: 1, easy: 25, medium: 50, hard: 75, deadly: 100},\n    {level: 2, easy: 50, medium: 100, hard: 150, deadly: 200},\n    {level: 3, easy: 75, medium: 150, hard: 225, deadly: 400},\n    {level: 4, easy: 125, medium: 250, hard: 375, deadly: 500},\n    {level: 5, easy: 250, medium: 500, hard: 750, deadly: 1100},\n    {level: 6, easy: 300, medium: 600, hard: 900, deadly: 1400},\n    {level: 7, easy: 350, medium: 750, hard: 1100, deadly: 1700},\n    {level: 8, easy: 450, medium: 900, hard: 1400, deadly: 2100},\n    {level: 9, easy: 550, medium: 1100, hard: 1600, deadly: 2400},\n    {level: 10, easy: 600, medium: 1200, hard: 1900, deadly: 2800},\n    {level: 11, easy: 800, medium: 1600, hard: 2400, deadly: 3600},\n    {level: 12, easy: 1000, medium: 2000, hard: 3000, deadly: 4500},\n    {level: 13, easy: 1100, medium: 2200, hard: 3400, deadly: 5100},\n    {level: 14, easy: 1250, medium: 2500, hard: 3800, deadly: 5700},\n    {level: 15, easy: 1400, medium: 2800, hard: 4300, deadly: 6400},\n    {level: 16, easy: 1600, medium: 3200, hard: 4800, deadly: 7200},\n    {level: 17, easy: 2000, medium: 3900, hard: 5900, deadly: 8800},\n    {level: 18, easy: 2100, medium: 4200, hard: 6300, deadly: 9500},\n    {level: 19, easy: 2400, medium: 4900, hard: 7300, deadly: 10900},\n    {level: 20, easy: 2800, medium: 5700, hard: 8500, deadly: 12700},\n];\n\nexport const findThreshold = level => {\n    return xpThresholds.filter(thresholds => thresholds.level === level)[0];\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { buildEmptyEncounter, addEncounter } from '../data-store/Encounters';\nimport { buildUseableEncounter, buildStorableEncounter } from '../data-store/EncounterHelpers';\nimport MonsterViewer from '../../monsters/MonsterViewer';\nimport PlayerViewer from '../../players/PlayerViewer';\nimport { LIST } from '../Views';\nimport EBMonsterList from './EBMonsterList';\nimport EBPlayerList from './EBPlayerList';\nimport { findThreshold } from './XPThresholds';\n\nimport './EncounterBuilder.css';\n\nconst calculateDifficulty = encounter => {\n    const thresholds = encounter.players.map(player => findThreshold(player.level));\n    const threshold = thresholds.reduce((totalThreshold, currentValue) => {\n        totalThreshold.easy += currentValue.easy;\n        totalThreshold.medium += currentValue.medium;\n        totalThreshold.hard += currentValue.hard;\n        totalThreshold.deadly += currentValue.deadly;\n        return totalThreshold;\n    }, {easy: 0, medium: 0, hard: 0, deadly: 0});\n    const monsterXpAndCount = encounter.monsters.reduce((total, monsterGroup) => {\n        total.xp += (monsterGroup.monster.xp * monsterGroup.count);\n        total.count += (monsterGroup.count);\n        return total;\n    }, {xp: 0, count: 0});\n    let monsterXp = monsterXpAndCount.xp;\n    const count = monsterXpAndCount.count;\n    if(count >= 15) {\n        monsterXp *= 4;\n    } else if(count >= 11) {\n        monsterXp *= 3;\n    } else if(count >= 7) {\n        monsterXp *= 2.5;\n    } else if (count >= 3) {\n        monsterXp *= 2;\n    } else if (count === 2) {\n        monsterXp *= 1.5;\n    }\n    if(monsterXp > threshold.deadly) {\n        return 'Deadly';\n    } else if(monsterXp > threshold.hard) {\n        return 'Hard';\n    } else if (monsterXp > threshold.medium) {\n        return 'Medium';\n    } else if (monsterXp > threshold.easy) {\n        return 'Easy';\n    } else {\n        return 'Trivial';\n    }\n}\n\nclass EncounterBuilder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encounter: null,\n            selectingMonster: false,\n            selectingPlayer: false,\n            difficulty: 'Easy',\n        };\n        this.addPlayer = this.addPlayer.bind(this);\n        this.addMonster = this.addMonster.bind(this);\n        this.onSelectPlayer = this.onSelectPlayer.bind(this);\n        this.onSelectMonster = this.onSelectMonster.bind(this);\n        this.onRemovePlayer = this.onRemovePlayer.bind(this);\n        this.onRemoveMonster = this.onRemoveMonster.bind(this);\n        this.changeName = this.changeName.bind(this);\n        this.onChangeMonsterQty = this.onChangeMonsterQty.bind(this);\n        this.onSave = this.onSave.bind(this);\n    }\n\n    componentDidMount() {\n        let { encounter } = this.props;\n        if(encounter == null) {\n            encounter = buildEmptyEncounter();\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        } else {\n            buildUseableEncounter(encounter).then(useableEncounter => {\n                this.setState({\n                    encounter: useableEncounter,\n                    difficulty: calculateDifficulty(useableEncounter),\n                });\n            });\n        }\n    }\n\n    changeName(event) {\n        const { encounter } = this.state;\n        encounter.name = event.target.value;\n        this.setState({\n            encounter,\n        })\n    }\n\n    addPlayer() {\n        this.setState({\n            selectingPlayer: true,\n        })\n    }\n\n    addMonster() {\n        this.setState({\n            selectingMonster: true,\n        })\n    }\n\n    onSelectPlayer(player) {\n        const { encounter } = this.state;\n        encounter.players.push(player);\n        this.setState({\n            selectingPlayer: false,\n            difficulty: calculateDifficulty(encounter),\n        })\n    }\n\n    onSelectMonster(monster) {\n        const { encounter } = this.state;\n        encounter.monsters.push({\n            monster,\n            count: 1,\n        });\n        this.setState({\n            selectingMonster: false,\n            difficulty: calculateDifficulty(encounter),\n        })\n    }\n\n    onChangeMonsterQty(monsterId) {\n        return event => {\n            const { encounter } = this.state;\n            const qty = parseInt(event.target.value);\n            encounter.monsters.forEach(monsterGroup => {\n                if(monsterGroup.monster.id === monsterId) {\n                    monsterGroup.count = qty;\n                }\n            });\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            })\n        }\n    }\n\n    onRemovePlayer(playerId) {\n        return _ => {\n            const { encounter } = this.state;\n            encounter.players = encounter.players.filter(player => player.id !== playerId);\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        }\n    }\n\n    onRemoveMonster(monsterId) {\n        return _ => {\n            const { encounter } = this.state;\n            encounter.monsters = encounter.monsters.filter(monster => monster.monster.id !== monsterId);\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        }\n    }\n\n    onSave() {\n        const { encounter } = this.state;\n        addEncounter(buildStorableEncounter(encounter)).then(_ => this.props.onChangeView(LIST));\n    }\n\n    render() {\n        const { encounter, selectingMonster, selectingPlayer, difficulty } = this.state;\n        if(encounter == null) {\n            return (<div>Loading Encounter...</div>)\n        } else if(selectingMonster) {\n            return (<MonsterViewer onSelectMonster={this.onSelectMonster}/>);\n        } else if(selectingPlayer) {\n            return (<PlayerViewer onSelectPlayer={this.onSelectPlayer}/>);\n        }\n        return (\n            <div className='eb-view'>\n                <div className='eb-header'>\n                    <input\n                        className='eb-name-input'\n                        type='text'\n                        placeholder='Name Encounter'\n                        onChange={this.changeName}\n                        value={encounter.name}\n                    />\n                    <button className='eb-margin-element' onClick={this.onSave}>Save</button>\n                </div>\n                <div className='eb-difficulty-text'>Difficulty:&nbsp;{difficulty}</div>\n                <div className='eb-groups-container'>\n                    <EBPlayerList playerList={encounter.players} onAddPlayer={this.addPlayer} onRemovePlayer={this.onRemovePlayer}/>\n                    <EBMonsterList monsterList={encounter.monsters} onAddMonster={this.addMonster} onRemoveMonster={this.onRemoveMonster} onChangeMonsterQty={this.onChangeMonsterQty}/>\n                </div>\n            </div>\n        );\n    }\n};\n\nEncounterBuilder.propTypes = {\n    encounter: PropTypes.shape({\n        name: PropTypes.string,\n        monsters: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            count: PropTypes.number, \n        })),\n        players: PropTypes.arrayOf(PropTypes.number),\n    }),\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncounterBuilder.defaultProps = {\n    encounter: null,\n}\n\nexport default EncounterBuilder;","import React from 'react';\nimport { Droppable } from \"react-beautiful-dnd\";\nimport PropTypes from 'prop-types';\n\nconst DroppableWrapper = props => (\n  <Droppable droppableId={props.droppableId}>\n    {provided => (\n      <div className={props.className}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            {...provided.droppablePlaceholder}>\n              {props.children}\n              {provided.placeholder}\n      </div>\n    )}\n  </Droppable>\n);\n\nDroppableWrapper.propTypes = {\n    droppableId: PropTypes.any.isRequired,\n}\n\nDroppableWrapper.defaultProps = {\n}\n\nexport default DroppableWrapper;","import React from 'react';\nimport { Draggable } from \"react-beautiful-dnd\";\nimport PropTypes from 'prop-types';\n\nconst DraggableWrapper = props => (\n  <Draggable draggableId={props.draggableId} index={props.index}>\n    {provided => (\n      <div className={props.className}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}>\n              {props.children}\n      </div>\n    )}\n  </Draggable>\n);\n\nDraggableWrapper.propTypes = {\n    draggableId: PropTypes.any.isRequired,\n}\n\nDraggableWrapper.defaultProps = {\n}\n\nexport default DraggableWrapper;","import React, { Fragment } from 'react';\n\nimport './EncounterRunnerHeader.scss';\n\nconst EncounterRunnerHeader = ({\n    onStartTracking,\n    onNextTurn,\n    onPreviousTurn,\n    toggleShowInitiative,\n    rollCreatureInitiatives,\n    sortByInitiative,\n    showInitiative,\n    currentTurnIdx,\n}) => {\n    return (\n      <div className='erh-container'>\n        { currentTurnIdx == null ? <div/> :\n            <button className='erh-margin' onClick={onPreviousTurn}>Previous</button>\n        }\n        <div className='erh-initiative'>\n            <div>\n                <input className='erh-margin' type=\"checkbox\" checked={showInitiative} onChange={toggleShowInitiative}/>\n                <span className='erh-margin'>Show Initiative</span>\n            </div>\n            {showInitiative && <Fragment>\n                <button className='erh-margin' onClick={rollCreatureInitiatives}>Roll</button>\n                <button className='erh-margin' onClick={sortByInitiative}>Sort</button>\n            </Fragment>}\n        </div>\n        { currentTurnIdx == null ? \n            <button className='erh-margin' onClick={onStartTracking}>Start</button> :\n            <button className='erh-margin' onClick={onNextTurn}>Next</button>\n        }\n      </div>\n    );\n};\n\nexport default EncounterRunnerHeader;","export const DAMAGE = 'damage';\nexport const HEAL = 'heal';\nexport const TEMP_HEALTH = 'tmpHealth';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from '../../common/modals/SimpleModal';\nimport { DAMAGE, HEAL, TEMP_HEALTH } from './TargetTypes';\n\nimport './TargetModal.css';\n\nclass TargetModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: DAMAGE,\n            qty: 0,\n        };\n        this.changeDmg = this.changeDmg.bind(this);\n        this.changeType = this.changeType.bind(this);\n    }\n\n    changeDmg(event) {\n        const qty = parseInt(event.target.value);\n        this.setState({\n            qty,\n        });\n    }\n\n    changeType(event) {\n        const type = event.target.value;\n        this.setState({\n            type,\n        });\n    }\n\n    render() {\n        const { show, dealToTarget } = this.props;\n        const { type, qty } = this.state;\n        return (\n            <SimpleModal show={show}>\n                <div className='tm-container'>\n                    <input className='tm-number-element' type='number' value={qty} onChange={this.changeDmg}/>\n                    <div>\n                        Damage\n                        <input\n                            type='radio'\n                            value={DAMAGE}\n                            checked={type === DAMAGE}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <div>\n                        Heal\n                        <input\n                            type='radio'\n                            value={HEAL}\n                            checked={type === HEAL}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <div>\n                        Temporary Hp\n                        <input\n                            type='radio'\n                            value={TEMP_HEALTH}\n                            checked={type === TEMP_HEALTH}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <button className='tm-element' onClick={_ => dealToTarget(this.state)}>Ok</button>\n                </div>\n            </SimpleModal>\n        );\n    }\n}\n\nTargetModal.propTypes = {\n    show: PropTypes.bool.isRequired,\n    dealToTarget: PropTypes.func,\n}\n\nTargetModal.defaultProps = {\n}\n\nexport default TargetModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport DroppableWrapper from '../../common/dnd/DroppableWrapper';\nimport DraggableWrapper from '../../common/dnd/DraggableWrapper';\nimport { buildUseableEncounter } from '../data-store/EncounterHelpers';\nimport MonsterModal from '../../monsters/modal/MonsterModal';\nimport { calculateMod } from '../../monsters/UnitConversionCalculator';\nimport { LIST } from '../Views';\nimport EncounterRunnerHeader from './EncounterRunnerHeader';\n\nimport './EncounterRunner.scss';\nimport TargetModal from './TargetModal';\nimport { DAMAGE, HEAL, TEMP_HEALTH } from './TargetTypes';\n\nconst buildDisplayString = creature => {\n    let result = creature.name;\n    if(creature.multiple) {\n        result += '[' + creature.monsterId.toString() +']';\n    }\n    result += ' ' + creature.hp + '/' + creature.maxHp;\n    if(creature.tmpHp > 0) {\n        result += ' (' + creature.tmpHp + ' Tmp Hp)';\n    }\n    if(!creature.isPlayer) {\n        result += ' AC: ' + creature.monster.ac.toString();\n    }\n    return result;\n}\n\nconst random = (rangeStart, rangeEnd) => {\n    const range = rangeEnd - rangeStart;\n    return Math.floor(Math.random() * (range+1)) + rangeStart;\n}\n\nconst withinRange = (number, rangeStart, rangeEnd) => {\n    for(let i = rangeStart; i <= rangeEnd; i++) {\n        if(number === i) {\n            return true;\n        }\n    }\n    return false;\n}\n\nclass EncounterRunner extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            creatureList: [],\n            selectedMonster: null,\n            targetIdx: null,\n            currentTurnIdx: null,\n            showInitiative: false,\n        };\n        this.onDragEnd = this.onDragEnd.bind(this);\n        this.selectMonster = this.selectMonster.bind(this);\n        this.onCloseModal = this.onCloseModal.bind(this);\n        this.onDealToTarget = this.onDealToTarget.bind(this);\n        this.removeCreature = this.removeCreature.bind(this);\n        this.onStartTracking = this.onStartTracking.bind(this);\n        this.onNextTurn = this.onNextTurn.bind(this);\n        this.onPreviousTurn = this.onPreviousTurn.bind(this);\n        this.toggleShowInitiative = this.toggleShowInitiative.bind(this);\n        this.rollCreatureInitiatives = this.rollCreatureInitiatives.bind(this);\n        this.sortByInitiative = this.sortByInitiative.bind(this);\n        this.onChangeTargetInitiative = this.onChangeTargetInitiative.bind(this);\n    }\n\n    componentDidMount() {\n        let { encounter, onChangeView } = this.props;\n        if(encounter == null) {\n            console.error('Should not make it to runner without encounter');\n            onChangeView(LIST, null);\n        } else {\n            buildUseableEncounter(encounter).then(useableEncounter => {\n                this.setState({\n                    creatureList: this.buildCreatureList(useableEncounter),\n                });\n            });\n        }\n    }\n\n    buildCreatureList(useableEncounter) {\n        let id = 0;\n        let creatureList = useableEncounter.players.map(player => ({\n            id: id++,\n            name: player.characterName,\n            hp: player.maxHp,\n            maxHp: player.maxHp,\n            tmpHp: 0,\n            multiple: false,\n            isPlayer: true,\n            initiative: 0,\n        }));\n        useableEncounter.monsters.forEach(monsterGroup => {\n            const multiple = monsterGroup.count > 1 ? true : false;\n            for(let i = 0; i < monsterGroup.count; i++) {\n                id++;\n                creatureList.push({\n                    id,\n                    name: monsterGroup.monster.name,\n                    hp: monsterGroup.monster.hp,\n                    maxHp: monsterGroup.monster.hp,\n                    tmpHp: 0,\n                    monsterId: i,\n                    multiple,\n                    monster: monsterGroup.monster,\n                    isPlayer: false,\n                    initiative: 0,\n                });\n            }\n        });\n        return creatureList;\n    }\n\n    selectMonster(creature) {\n        return _ => {\n            this.setState({\n                selectedMonster: creature.monster,\n            });\n        }\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedMonster: null,\n        });\n    }\n\n    selectTarget(targetIdx) {\n        return _ => {\n            this.setState({\n                targetIdx,\n            })\n        };\n    }\n\n    onDealToTarget(result) {\n        console.log(result);\n        const { targetIdx, creatureList } = this.state;\n        const creature = creatureList[targetIdx];\n        switch(result.type) {\n            case DAMAGE: {\n                let dmg = result.qty;\n                if(creature.tmpHp > 0) {\n                    if(dmg >= creature.tmpHp) {\n                        dmg -= creature.tmpHp;\n                        creature.tmpHp = 0;\n                    } else {\n                        creature.tmpHp -= dmg;\n                        dmg = 0;\n                    }\n                    creature.hp -= dmg;\n                } else {\n                    creature.hp -= result.qty;\n                }\n                break;\n            }\n            case HEAL: {\n                creature.hp += result.qty;\n                if(creature.hp > creature.maxHp) {\n                    creature.hp = creature.maxHp;\n                }\n                break;\n            }\n            case TEMP_HEALTH: {\n                creature.tmpHp = result.qty;\n                break;\n            }\n            default:\n                console.error('Unknow health change type');\n        }\n        this.setState({\n            targetIdx: null,\n        })\n    }\n\n    removeCreature(idx) {\n        return _ => {\n            const { creatureList } = this.state;\n            creatureList.splice(idx, 1);\n            this.setState({\n                creatureList,\n            })\n        };\n    }\n\n    onDragEnd(result) {\n        let { creatureList, currentTurnIdx } = this.state;\n        if(result.destination == null) {\n            return;\n        }\n        const destIndex = result.destination.index;\n        const currentIndex = result.source.index;\n        const creature = creatureList[currentIndex];\n        creatureList.splice(currentIndex, 1);\n        creatureList.splice(destIndex, 0, creature);\n        const lowerIndex = currentIndex < destIndex ? currentIndex : destIndex;\n        const higherIndex = currentIndex > destIndex ? currentIndex : destIndex;\n        if(currentTurnIdx != null && currentIndex !== destIndex && withinRange(currentTurnIdx, lowerIndex, higherIndex)) {\n            if(currentTurnIdx === currentIndex && currentIndex > destIndex) {\n                currentTurnIdx ++;\n            } else if(currentTurnIdx !== currentIndex && currentIndex < destIndex) {\n                currentTurnIdx--;\n            } else if(currentTurnIdx !== currentIndex) {\n                currentTurnIdx++;\n            }\n            if(currentTurnIdx >= creatureList.length) {\n                currentTurnIdx = 0;\n            } else if(currentTurnIdx < 0) {\n                currentTurnIdx = creatureList.length - 1;\n            }\n        }\n        this.setState({\n            creatureList,\n            currentTurnIdx,\n        });\n    }\n\n    onNextTurn() {\n        const { creatureList } = this.state;\n        let { currentTurnIdx } = this.state;\n        currentTurnIdx++;\n        if(currentTurnIdx >= creatureList.length) {\n            currentTurnIdx = 0;\n        }\n        this.setState({\n            currentTurnIdx,\n        });\n    }\n\n    onPreviousTurn() {\n        const { creatureList } = this.state;\n        let { currentTurnIdx } = this.state;\n        currentTurnIdx--;\n        if(currentTurnIdx < 0) {\n            currentTurnIdx = creatureList.length - 1;\n        }\n        this.setState({\n            currentTurnIdx,\n        });\n    }\n\n    onStartTracking() {\n        this.setState({\n            currentTurnIdx: 0,\n        });\n    }\n\n    toggleShowInitiative(toggle) {\n        this.setState({\n            showInitiative: toggle.target.checked,\n        });\n    }\n\n    rollCreatureInitiatives() {\n        const { creatureList } = this.state;\n        creatureList.forEach(creature => {\n            if(!creature.isPlayer) {\n                creature.initiative = random(1, 20) + calculateMod(creature.monster.stats.dex);\n            }\n        });\n        this.setState({\n            creatureList,\n        });\n    }\n\n    sortByInitiative() {\n        let { creatureList } = this.state;\n        creatureList.sort((cr1, cr2) =>  cr2.initiative - cr1.initiative);\n        this.setState({\n            creatureList,\n        });\n    }\n\n    onChangeTargetInitiative(idx) {\n        return event => {\n            const { creatureList } = this.state;\n            creatureList[idx].initiative = event.target.value;\n            this.setState({\n                creatureList,\n            });\n        };\n    }\n\n    render() {\n        const { creatureList, selectedMonster, targetIdx, currentTurnIdx, showInitiative } = this.state;\n        return (\n            <div className='er-container'>\n                <EncounterRunnerHeader\n                    onStartTracking={this.onStartTracking}\n                    onNextTurn={this.onNextTurn}\n                    onPreviousTurn={this.onPreviousTurn}\n                    toggleShowInitiative={this.toggleShowInitiative}\n                    rollCreatureInitiatives={this.rollCreatureInitiatives}\n                    sortByInitiative={this.sortByInitiative}\n                    showInitiative={showInitiative}\n                    currentTurnIdx={currentTurnIdx}\n                />\n                <MonsterModal\n                    monster={selectedMonster}\n                    show={selectedMonster != null}\n                    onCancel={this.onCloseModal}\n                    editable={false}\n                />\n                <TargetModal\n                    show={targetIdx !== null}\n                    dealToTarget={this.onDealToTarget}\n                />\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <DroppableWrapper className='er-droppable' droppableId='creatureList'>\n                        { creatureList.map((creature, idx) => (\n                            <DraggableWrapper className='er-draggable' key={creature.id} draggableId={creature.id.toString()} index={idx}>\n                                <div className={`er-creature-container ${currentTurnIdx !== idx ? 'er-primary' : 'er-secondary'}`}>\n                                    <div className='er-element'>\n                                        <span onClick={creature.isPlayer ? null : this.selectMonster(creature)}>{buildDisplayString(creature)}</span>\n                                        {showInitiative && <input className=\"initiative-input\" type=\"number\" value={creature.initiative} onChange={this.onChangeTargetInitiative(idx)}/>}\n                                    </div>\n                                    <div>\n                                        <button className='er-element' onClick={this.selectTarget(idx)}>Target</button>\n                                        {creature.hp <= 0 && <button className='er-element' onClick={this.removeCreature(idx)}>Remove</button>}\n                                    </div>\n                                </div>\n                            </DraggableWrapper>\n                        ))}\n                    </DroppableWrapper>\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\nEncounterRunner.propTypes = {\n    encounter: PropTypes.shape({\n        name: PropTypes.string,\n        monsters: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            count: PropTypes.number, \n        })),\n        players: PropTypes.arrayOf(PropTypes.number),\n    }),\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncounterRunner.defaultProps = {\n    encounter: null,\n}\n\nexport default EncounterRunner;","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { LIST, BUILDER, RUNNER } from './Views';\nimport EncountersList from './list/EncountersList';\nimport EncounterBuilder from './builder/EncounterBuilder';\nimport EncounterRunner from './runner/EncounterRunner';\n\nclass EncountersContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: LIST,\n            encounter: null,\n        };\n        this.onChangeView = this.onChangeView.bind(this);\n    }\n\n    onChangeView(view, encounter = null) {\n        this.setState({\n            view,\n            encounter,\n        });\n    }\n\n    render() {\n        const { view, encounter } = this.state;\n        switch(view) {\n            case LIST: {\n                return (<EncountersList onChangeView={this.onChangeView}/>);\n            }\n            case BUILDER: {\n                return (<EncounterBuilder onChangeView={this.onChangeView} encounter={encounter}/>)\n            }\n            case RUNNER: {\n                return (<EncounterRunner onChangeView={this.onChangeView} encounter={encounter}/>)\n            }\n            default: {\n                console.error('Received unknown encounter view');\n            }\n        }\n        return null;\n    }\n};\n\nEncountersContainer.propTypes = {\n}\n\nEncountersContainer.defaultProps = {\n}\n\nexport default EncountersContainer;","import React from 'react';\nimport MonsterViewer from './components/monsters/MonsterViewer';\nimport PlayerViewer from './components/players/PlayerViewer';\nimport EncountersContainer from './components/encounters/EncountersContainer';\n\nconst rootMenu = {\n    'Encounters' : <EncountersContainer/>,\n    'Monster Viewer' : <MonsterViewer/>,\n    'Player Viewer' : <PlayerViewer/>,\n};\n\nexport default rootMenu;","import React, { Component } from 'react';\nimport Menu from './components/menu/Menu';\nimport rootMenu from './RootMenu';\nimport LoadingModal from './components/common/modals/LoadingModal';\nimport { openDatabase } from './components/common/data-store/IndexedDB';\nimport { fromJsonExportFormat } from './components/monsters/data-store/MonsterFormatConverter';\nimport { addMonster, buildMonsterId } from './components/monsters/data-store/Monsters';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLocation: null,\n      databaseLoaded: false,\n      loadingSRDMonsters: false,\n    };\n    this.getDisplayElement = this.getDisplayElement.bind(this);\n    this.backToRootMenu = this.backToRootMenu.bind(this);\n    this.menuSelection = this.menuSelection.bind(this);\n  }\n\n  componentDidMount(props) {\n    const srdListLoadedStr = 'SRD_LIST_LOADED';\n    openDatabase().then(_ => {\n      console.log('App DataStore opened');\n      const srdListLoaded = localStorage.getItem(srdListLoadedStr);\n      if(!srdListLoaded) {\n        this.setState({\n          loadingSRDMonsters: true,\n        });\n        const importPromise = fetch('https://raw.githubusercontent.com/cfogrady/5eEncounters/master/5e-SRD-Monsters.json')\n        .then(response => response.json())\n        .then(data => {\n          return data.reduce((promise, exportMonster) => {\n            if(exportMonster.license) {\n              return promise;\n            }\n            const monster = fromJsonExportFormat(exportMonster);\n            buildMonsterId(monster);\n            return promise.then(_ => addMonster(monster))\n          }, new Promise((resolve, reject) => resolve()));\n        });\n        return importPromise.then(_ => {\n          localStorage.setItem(srdListLoadedStr, true);\n          console.log('SRD Monsters imported');\n        });\n      }\n    }).then(_ => {\n      this.setState({\n        databaseLoaded: true,\n        loadingSRDMonsters: false,\n      });\n    });\n  }\n\n  menuSelection(value) {\n    return _ => {\n      this.setState({\n        currentLocation: value\n      });\n    };\n  }\n\n  getDisplayElement() {\n    const { currentLocation } = this.state;\n    if(!currentLocation) {\n      return <Menu menuItems={Object.keys(rootMenu)} onSelect={this.menuSelection}/>;\n    }\n    return rootMenu[currentLocation];\n\n  }\n\n  backToRootMenu() {\n    this.setState({\n      currentLocation: null\n    });\n  }\n  render() {\n    const displayElement = this.getDisplayElement();\n    const { currentLocation, databaseLoaded, loadingSRDMonsters } = this.state;\n    if(!databaseLoaded) {\n      return (\n        <LoadingModal show={!databaseLoaded}>\n          {loadingSRDMonsters && <div style={{marginTop: '1em', color: 'white'}}>One Time Load of SRD Monsters</div>}\n        </LoadingModal>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div className='app-location'>\n          {displayElement}\n        </div>\n        {currentLocation != null && <button onClick={this.backToRootMenu}>Menu</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}