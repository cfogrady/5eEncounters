{"version":3,"sources":["components/menu/MenuItem.js","components/menu/Menu.js","components/common/data-store/IndexedDB.js","components/monsters/data-store/Monsters.js","components/monsters/data-store/MonsterImages.js","components/monsters/UnitConversionCalculator.js","components/monsters/selectors/CRSelector.js","components/monsters/MonsterViewerHeader.js","components/common/modals/SimpleModal.js","components/monsters/selectors/SizeSelector.js","components/monsters/selectors/TypeSelector.js","components/monsters/selectors/AlignmentSelector.js","components/monsters/modal/NameSection.js","components/monsters/modal/CombatSection.js","components/monsters/modal/StatSection.js","components/monsters/selectors/SkillSelector.js","components/monsters/selectors/StatSelector.js","components/monsters/modal/SkillsSection.js","components/monsters/modal/AbilitiesSection.js","components/monsters/modal/ActionsSection.js","components/monsters/modal/LegendaryActionsSection.js","components/monsters/modal/MonsterImageSection.js","components/monsters/modal/DescriptionSection.js","components/monsters/modal/MonsterModal.js","components/common/modals/LoadingModal.js","components/common/modals/SelectOrEditModal.js","components/monsters/MonsterViewer.js","components/players/data-store/Players.js","components/players/PlayerViewerHeader.js","components/players/modal/PlayerModal.js","components/players/PlayerViewer.js","components/encounters/Views.js","components/encounters/data-store/Encounters.js","components/encounters/list/EncountersListHeader.js","components/encounters/list/EncountersList.js","components/encounters/data-store/EncounterHelpers.js","components/encounters/builder/EBMonsterList.js","components/encounters/builder/EBPlayerList.js","components/encounters/builder/XPThresholds.js","components/encounters/builder/EncounterBuilder.js","components/common/dnd/DroppableWrapper.js","components/common/dnd/DraggableWrapper.js","components/encounters/runner/TargetTypes.js","components/encounters/runner/TargetModal.js","components/encounters/runner/EncounterRunner.js","components/encounters/EncountersContainer.js","RootMenu.js","components/monsters/data-store/MonsterFormatConverter.js","App.js","serviceWorker.js","index.js"],"names":["MenuItem","_ref","value","onSelect","react_default","a","createElement","className","key","onClick","defaultProps","Menu","menuItems","map","components_menu_MenuItem","database","stores","upgrades","addStore","name","keyData","concat","addUpgrade","upgradeFunc","version","upgrade","db","oldVersion","newVersion","transaction","forEach","store","objectStoreNames","contains","console","log","createObjectStore","_loop","i","filter","getDatabase","_","keyPath","addMonster","monster","tnx","arguments","length","undefined","put","objectStore","removeMonsterById","id","delete","getAllMonsters","getAll","buildMonsterId","xp","then","monsterList","savingThrows","damageImmunities","reduce","result","current","damageResistances","damageVulnerabilities","conditionImmunities","autoIncrement","addMonsterImage","monsterImage","calculateModStr","stat","numberToString","Math","floor","calculateMod","number","numbStr","toString","indexOf","calculateCR","xpToCR","0","25","50","100","200","450","700","1100","1800","2300","2900","3900","5000","5900","7200","8400","10000","11500","13000","15000","18000","20000","22000","25000","33000","41000","50000","62000","75000","90000","105000","120000","135000","155000","CRSelector","onChange","showSelect","disabled","hidden","Object","keys","MonsterViewerHeader","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this$props","onAddMonster","filterXp","onXPFilter","onNameFilter","filterName","placeholder","type","selectors_CRSelector","Component","SimpleModal","show","children","showHideClassName","SizeSelector","TypeSelector","AlignmentSelector","NameSection","editable","selectors_SizeSelector","size","selectors_TypeSelector","selectors_AlignmentSelector","alignment","CombatSection","onChangeNumber","ac","hp","hitDie","speed","StatSection","stats","str","dex","con","int","wis","cha","SkillSelector","StatSelector","SkillsSection","onRemoveElement","bind","assertThisInitialized","onAddElement","prop","index","_this2","list","element","idx","target","_this3","_this4","skill","modifier","skills","selectors_SkillSelector","save","selectors_StatSelector","senses","languages","AbilitiesSection","descr","abilities","ability","ActionsSection","actions","action","property","split","legendaryActions","summary","MonsterImageSection","pictureURL","loadingImage","onDrop","imageKey","get","setState","catch","e","picture","reader","FileReader","onload","onImageSet","readAsDataURL","_this$state","style","maxHeight","alt","src","compiled_default","withIcon","buttonText","imgExtension","maxFileSize","noop","DescriptionSection","description","setPathValue","object","path","splitPath","location","currentPath","MonsterModal","event","newMonster","clone","onMonsterChange","parseInt","onSave","onCancel","onDelete","onToggleEdit","common_modals_SimpleModal","modal_NameSection","modal_CombatSection","modal_StatSection","modal_SkillsSection","modal_AbilitiesSection","modal_ActionsSection","LegendaryActionsSection","modal_DescriptionSection","modal_MonsterImageSection","LoadingModal","MoonLoader_default","sizeUnit","color","SelectOrEditModal","onView","addText","viewText","toLowerCase","sortMonsterList","sort","b","nameA","toUpperCase","nameB","MonsterViewer","selectedMonster","imageURL","editing","selectOrViewMonster","viewMonster","changeMonster","onDeleteMonster","saveMonsterModel","cancelMonsterModal","changeXPFilter","changeNameFilter","onSelectMonster","mon","oldId","error","_this$state2","showSelectedMonster","showSelectOrViewMonster","formattedFilterName","components_monsters_MonsterViewerHeader","common_modals_LoadingModal","common_modals_SelectOrEditModal","monsters_modal_MonsterModal","nameMatch","addPlayer","player","PlayerViewerHeader","onAddPlayer","PlayerModal","newPlayer","onPlayerChange","playerName","characterName","level","maxHp","sortPlayerListByPlayer","playerList","PlayerViewer","selectedPlayer","selectOrEditPlayer","onDeletePlayer","onSavePlayer","onCancelPlayerModal","viewPlayer","changePlayer","sortMethod","onSelectPlayer","plyr","_this5","showSelectedPlayer","showSelectOrEditPlayer","components_players_PlayerViewerHeader","players_modal_PlayerModal","LIST","EncountersListHeader","onAddEncounter","sortEncounterList","encounterList","EncountersList","onDeleteEncounter","onEditEncounter","onRunEncounter","encounter","onChangeView","encounterId","_this6","encounters_list_EncountersListHeader","buildUseableEncounter","storedEncounter","monsters","players","accumulator","promiseForNextMonster","push","count","Promise","resolve","rejct","promiseForNextPlayer","EBMonsterList","closeModal","onRemoveMonster","onChangeMonsterQty","monsterGroup","EBPlayerList","onRemovePlayer","xpThresholds","easy","medium","hard","deadly","calculateDifficulty","threshold","thresholds","totalThreshold","currentValue","monsterXpAndCount","total","monsterXp","EncounterBuilder","selectingMonster","selectingPlayer","difficulty","changeName","useableEncounter","monsterId","qty","playerId","addEncounter","has","buildStorableEncounter","components_monsters_MonsterViewer","components_players_PlayerViewer","builder_EBPlayerList","builder_EBMonsterList","DroppableWrapper","react_beautiful_dnd_esm","droppableId","provided","assign","ref","innerRef","droppableProps","droppablePlaceholder","DraggableWrapper","draggableId","draggableProps","dragHandleProps","DAMAGE","TargetModal","changeDmg","changeType","dealToTarget","checked","EncounterRunner","creatureList","targetIdx","onDragEnd","selectMonster","onCloseModal","onDealToTarget","removeCreature","buildCreatureList","tmpHp","multiple","isPlayer","creature","dmg","splice","destIndex","destination","currentIndex","source","encounters_runner_TargetModal","dnd_DroppableWrapper","dnd_DraggableWrapper","buildDisplayString","selectTarget","EncountersContainer","view","encounters_list_EncountersList","encounters_builder_EncounterBuilder","encounters_runner_EncounterRunner","rootMenu","Encounters","encounters_EncountersContainer","Monster Viewer","Player Viewer","capitalizeEachWord","string","words","charAt","slice","resultStr","word","skillList","fromJsonExportFormat","exportMonster","cr","armor_class","hit_points","hit_dice","strength","dexterity","constitution","intelligence","wisdom","charisma","strength_save","dexterity_save","constitution_save","intelligence_save","wisdom_save","charisma_save","skillName","replace","damage_vulnerabilities","damage_resistances","damage_immunities","condition_immunities","challenge_rating","special_abilities","specialAbility","desc","legendary_actions","App","currentLocation","databaseLoaded","loadingSRDMonsters","getDisplayElement","backToRootMenu","menuSelection","openDB","localStorage","getItem","fetch","response","json","data","promise","license","reject","setItem","components_menu_Menu","displayElement","marginTop","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a18e9422.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MenuItem.css';\n\nconst MenuItem = ({ value , onSelect }) => {\n    return (\n        <div className=\"menu-item\" key={value} onClick={onSelect(value)}>{value}</div>\n    );\n};\n\nMenuItem.propTypes = {\n    value: PropTypes.string.isRequired,\n    onSelect: PropTypes.func.isRequired,\n};\n\nMenuItem.defaultProps = {\n\n};\n\nexport default MenuItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from './MenuItem';\n\nimport './Menu.css';\n\nconst Menu = ({ menuItems, onSelect }) => {\n    return (\n        <div className=\"menu-page\">\n            {menuItems.map(value => (<MenuItem key={value} value={value} onSelect={onSelect}/>))}\n        </div>\n    );\n};\n\nMenu.propTypes = {\n    menuItems: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onSelect: PropTypes.func.isRequired,\n}\n\nMenu.defaultProps = {\n\n}\n\nexport default Menu;","import { openDB } from 'idb';\n\nconst databaseName = '5eEncounters';\n\nconst dbVersion = 5;\n\nlet database = null; //loading\n\nlet stores = [];\n\nlet upgrades = [];\n\nexport const addStore = (name, keyData) => {\n    stores = stores.concat([{ name, keyData }]);\n};\n\nexport const addUpgrade = (upgradeFunc, version) => {\n    upgrades = upgrades.concat([{ upgradeFunc, version }]);\n}\n\nconst upgrade = (db, oldVersion, newVersion, transaction) => {\n    stores.forEach(store => {\n        if(!db.objectStoreNames.contains(store.name)) {\n            console.log('Adding datastore: ', store.name);\n            db.createObjectStore(store.name, store.keyData);\n        }\n    });\n    for(let i = oldVersion + 1; i <= newVersion; i++) {\n        let versionUpgrades = upgrades.filter(upgrade => upgrade.version === i);\n        versionUpgrades.forEach(upgrade => upgrade.upgradeFunc(transaction));\n    }\n};\n\nexport const openDatabase = _ => {\n    return openDB(databaseName, dbVersion, { upgrade, }).then(db => {\n        database = db;\n    });\n};\n\nexport const getDatabase = _ => database;\n","import { getDatabase, addStore, addUpgrade } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'monsters';\n\naddStore(storeName, {keyPath: 'id'});\n\nexport const addMonster = (monster, tnx = null) => {\n    if(tnx == null) {\n        return getDatabase().put(storeName, monster);\n    }\n    return tnx.objectStore(storeName).put(monster);\n};\n\nexport const removeMonsterById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getMonsterById = id => {\n    const db = getDatabase();\n    return db.get(storeName, id);\n};\n\nexport const getAllMonsters = (tnx = null) => {\n    if(tnx == null) {\n        return getDatabase().getAll(storeName);\n    }\n    return tnx.objectStore(storeName).getAll();\n};\n\nexport const buildEmptyMonster = _ => ({\n    name: '',\n    size: 'None',\n    type: 'None',\n    alignment: 'None',\n    stats: {\n        str: 0,\n        dex: 0,\n        con: 0,\n        int: 0,\n        wis: 0,\n        cha: 0,\n    },\n    skills: [], //{ skill, modifier }\n    xp: 0,\n    ac: 0,\n    hp: 0,\n    hitDie: '',\n    speed: '',\n    savingThrows: [], //{ stat, modifier }\n    damageVulnerabilities: [],\n    damageImmunities: [],\n    damageResistances: [],\n    conditionImmunities: [],\n    senses: '',\n    languages: '',\n    actions: [], //{name, descr}\n    abilities: [], //{name, descr}\n    legendaryActions: {\n        summary: '',\n        actions: [],\n    },\n    description: '',\n    imageKey: null,\n});\n\nexport const buildMonsterId = monster => {\n    monster.id = monster.name + monster.xp;\n    return monster;\n};\n\nconst addSavingThrows = tnx => {\n    getAllMonsters(tnx).then(monsterList => {\n        monsterList.forEach(monster => {\n            monster.savingThrows = [];\n            addMonster(monster, tnx);\n        });\n    })\n};\n\naddUpgrade(addSavingThrows, 4);\n\nconst convertDamageTypesToStringFields = tnx => {\n    getAllMonsters(tnx).then(monsterList => {\n        monsterList.forEach(monster => {\n            monster.damageImmunities = monster.damageImmunities.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            monster.damageResistances = monster.damageResistances.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            monster.damageVulnerabilities = monster.damageVulnerabilities.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            monster.conditionImmunities = monster.conditionImmunities.reduce((result, current) => {\n                return result.length > 0 ? result + ', ' + current : current;\n            }, '');\n            addMonster(monster, tnx);\n        });\n    })\n};\n\naddUpgrade(convertDamageTypesToStringFields, 5);\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'monster-images';\n\naddStore(storeName, {autoIncrement: true});\n\nexport const addMonsterImage = monsterImage => {\n    const db = getDatabase();\n    return db.put(storeName, monsterImage);\n};\n\nexport const removeMonsterImageById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getMonsterImage = id => getDatabase().get(storeName, id);","export const calculateMod = stat => Math.floor((stat - 10) / 2);\n\nexport const calculateModStr = stat => numberToString(calculateMod(stat));\n\nexport const numberToString = number => {\n    let numbStr = number.toString();\n    if(numbStr.indexOf('-') < 0) {\n        numbStr = `+${numbStr}`;\n    }\n    return numbStr;\n}\n\nexport const calculateCR = xp => xpToCR[xp];\n\nexport const calculateXP = cr => {\n    return Object.keys(xpToCR).filter(key => {\n        return xpToCR[key] === cr;\n    })[0];\n};\n\nexport const xpToCR = {\n    0: '0',\n    25: '1/8',\n    50: '1/4',\n    100: '1/2',\n    200: '1',\n    450: '2',\n    700: '3',\n    1100: '4',\n    1800: '5',\n    2300: '6',\n    2900: '7',\n    3900: '8',\n    5000: '9',\n    5900: '10',\n    7200: '11',\n    8400: '12',\n    10000: '13',\n    11500: '14',\n    13000: '15',\n    15000: '16',\n    18000: '17',\n    20000: '18',\n    22000: '19',\n    25000: '20',\n    33000: '21',\n    41000: '22',\n    50000: '23',\n    62000: '24',\n    75000: '25',\n    90000: '26',\n    105000: '27',\n    120000: '28',\n    135000: '29',\n    155000: '30',\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { xpToCR } from '../UnitConversionCalculator';\n\nconst CRSelector = ({ onChange, value, showSelect }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value='' disabled={!showSelect} hidden={!showSelect}>Select CR</option>\n            { Object.keys(xpToCR).map(xp => (\n                <option key={xp} value={xp}>{`${xpToCR[xp]} (${xp} exp)`}</option>\n            ))}\n        </select>\n    );\n};\n\nCRSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    showSelect: PropTypes.bool,\n}\n\nCRSelector.defaultProps = {\n    showSelect: false,\n}\n\nexport default CRSelector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CRSelector from './selectors/CRSelector';\n\nimport './MonsterViewerHeader.css';\n\nclass MonsterViewerHeader extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsterList: [],\n            loading: true,\n        };\n        /*this.getDisplayElement = this.getDisplayElement.bind(this);*/\n    }\n\n    render() {\n        const { onAddMonster, filterXp, onXPFilter, onNameFilter, filterName } = this.props;\n        return (\n            <div className='monster-viewer-header'>\n                <div className='mvh-row'>\n                    <input\n                        className='mvh-filter'\n                        placeholder='Filter By Monster Name'\n                        type='search'\n                        value={filterName || ''}\n                        onChange={onNameFilter}\n                    />\n                    <div className='mvh-left-margin'>\n                        <CRSelector\n                            value={filterXp == null ? '' : filterXp.toString()}\n                            onChange={onXPFilter}\n                            showSelect={true}\n                        />\n                    </div>\n                </div>\n                <div className='mvh-row'>\n                    <button onClick={onAddMonster}>Add Monster</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nMonsterViewerHeader.propTypes = {\n    filterXp: PropTypes.number,\n    filterName: PropTypes.string,\n    onAddMonster: PropTypes.func.isRequired,\n    onXPFilter: PropTypes.func.isRequired,\n    onNameFilter: PropTypes.func.isRequired,\n};\n\nMonsterViewerHeader.defaultProps = {\n    filterXp: null,\n    filterName: null,\n};\n\nexport default MonsterViewerHeader;\n","import React from 'react';\n\nimport './SimpleModal.css';\n\nconst SimpleModal = ({ show, children }) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <section className=\"modal-main\">\n          {children}\n        </section>\n      </div>\n    );\n  };\n\nexport default SimpleModal;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SizeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Size</option>\n            <option value=\"Tiny\">Tiny</option>\n            <option value=\"Small\">Small</option>\n            <option value=\"Medium\">Medium</option>\n            <option value=\"Large\">Large</option>\n            <option value=\"Huge\">Huge</option>\n            <option value=\"Gargantuan\">Gargantuan</option>\n        </select>\n    );\n};\n\nSizeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nSizeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default SizeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TypeSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Monster Type</option>\n            <option value=\"Aberration\">Aberration</option>\n            <option value=\"Beast\">Beast</option>\n            <option value=\"Celestial\">Celestial</option>\n            <option value=\"Construct\">Construct</option>\n            <option value=\"Dragon\">Dragon</option>\n            <option value=\"Elemental\">Elemental</option>\n            <option value=\"Fey\">Fey</option>\n            <option value=\"Fiend\">Fiend</option>\n            <option value=\"Giant\">Giant</option>\n            <option value=\"Humanoid\">Humanoid</option>\n            <option value=\"Monstrosity\">Monstrosity</option>\n            <option value=\"Ooze\">Ooze</option>\n            <option value=\"Plant\">Plant</option>\n            <option value=\"Undead\">Undead</option>\n        </select>\n    );\n};\n\nTypeSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nTypeSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default TypeSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlignmentSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Alignment</option>\n            <option value=\"Unaligned\">Unaligned</option>\n            <option value=\"Lawful Good\">Lawful Good</option>\n            <option value=\"Neutral Good\">Neutral Good</option>\n            <option value=\"Chaotic Good\">Chaotic Good</option>\n            <option value=\"Lawful Neutral\">Lawful Neutral</option>\n            <option value=\"True Neutral\">True Neutral</option>\n            <option value=\"Chaotic Neutral\">Chaotic Neutral</option>\n            <option value=\"Lawful Evil\">Lawful Evil</option>\n            <option value=\"Neutral Evil\">Neutral Evil</option>\n            <option value=\"Chaotic Evil\">Chaotic Evil</option>\n        </select>\n    );\n};\n\nAlignmentSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nAlignmentSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default AlignmentSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SizeSelector from '../selectors/SizeSelector';\nimport TypeSelector from '../selectors/TypeSelector';\nimport AlignmentSelector from '../selectors/AlignmentSelector';\n\nimport './MonsterModal.css';\n\nconst NameSection = ({ onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <input type='text' placeholder='Monster Name' onChange={onChange('name')} value={monster.name || ''}/>\n                <div className='monster-form-row-section'>\n                    <SizeSelector value={monster.size || 'None'} onChange={onChange('size')}/>\n                    <div className='left-margin'><TypeSelector value={monster.type || 'None'} onChange={onChange('type')}/></div>\n                    <div className='left-margin'><AlignmentSelector value={monster.alignment || 'None'} onChange={onChange('alignment')}/></div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <span className='red-text bold-text'>{monster.name}</span>\n            <span>{`${monster.size} ${monster.type}, ${monster.alignment}`}</span>\n        </div>\n    );\n};\n\nNameSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nNameSection.defaultProps = {\n}\n\nexport default NameSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nconst CombatSection = ({ onChangeNumber, onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <input className=\"mm-margin-element number-size\" type='number' placeholder='AC' onChange={onChangeNumber('ac')} value={monster.ac || ''}/>\n                <div className='row-container top-margin'>\n                    <input type='number' className='mm-margin-element number-size' placeholder='HP' onChange={onChangeNumber('hp')} value={monster.hp || ''}/>\n                    <input className='mm-margin-element mm-hit-die' placeholder='Hid Die' onChange={onChange('hitDie')} value={monster.hitDie || ''}/>\n                </div>\n                <input className=\"mm-margin-element\" type='text' placeholder='Speed' onChange={onChange('speed')} value={monster.speed || ''}/>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Armor Class:&nbsp;</span>\n                <span className='red-text'>{monster.ac}</span>\n            </div>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Hit Points:&nbsp;</span>\n                <span className='red-text'>{monster.hp}&nbsp;({monster.hitDie})</span>\n            </div>\n            <div className='row-container'>\n                <span className='red-text bold-text'>Speed:&nbsp;</span>\n                <span className='red-text'>{monster.speed}</span>\n            </div>\n        </div>\n    );\n};\n\nCombatSection.propTypes = {\n    onChangeNumber: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nCombatSection.defaultProps = {\n}\n\nexport default CombatSection;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { calculateModStr } from '../UnitConversionCalculator';\n\nimport './MonsterModal.css';\n\nconst StatSection = ({ onChangeNumber, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className=\"row-container center-container\">\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='STR' onChange={onChangeNumber('stats.str')} value={monster.stats.str || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.str)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='DEX' onChange={onChangeNumber('stats.dex')} value={monster.stats.dex || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.dex)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='CON' onChange={onChangeNumber('stats.con')} value={monster.stats.con || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.con)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='INT' onChange={onChangeNumber('stats.int')} value={monster.stats.int || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.int)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='WIS' onChange={onChangeNumber('stats.wis')} value={monster.stats.wis || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.wis)}</div>\n                    </div>\n                    <div className=\"col-continer center-container side-margin\">\n                        <input className=\"number-size\" type='number' placeholder='CHA' onChange={onChangeNumber('stats.cha')} value={monster.stats.cha || ''}/>\n                        <div className=\"left-margin\">{calculateModStr(monster.stats.cha)}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom'>\n            <div className=\"row-container center-container\">\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">STR</div>\n                    <div className=\"red-text\">{`${monster.stats.str} (${calculateModStr(monster.stats.str)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">DEX</div>\n                    <div className=\"red-text\">{`${monster.stats.dex} (${calculateModStr(monster.stats.dex)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">CON</div>\n                    <div className=\"red-text\">{`${monster.stats.con} (${calculateModStr(monster.stats.con)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">INT</div>\n                    <div className=\"red-text\">{`${monster.stats.int} (${calculateModStr(monster.stats.int)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">WIS</div>\n                    <div className=\"red-text\">{`${monster.stats.wis} (${calculateModStr(monster.stats.wis)})`}</div>\n                </div>\n                <div className=\"col-continer center-container side-margin\">\n                    <div className=\"red-text bold-text\">CHA</div>\n                    <div className=\"red-text\">{`${monster.stats.cha} (${calculateModStr(monster.stats.cha)})`}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nStatSection.propTypes = {\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nStatSection.defaultProps = {\n}\n\nexport default StatSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SkillSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Skill</option>\n            <option value=\"Acrobatics\">Acrobatics</option>\n            <option value=\"Animal Handling\">Animal Handling</option>\n            <option value=\"Arcana\">Arcana</option>\n            <option value=\"Athletics\">Athletics</option>\n            <option value=\"Deception\">Deception</option>\n            <option value=\"History\">History</option>\n            <option value=\"Insight\">Insight</option>\n            <option value=\"Intimidation\">Intimidation</option>\n            <option value=\"Investigation\">Investigation</option>\n            <option value=\"Medicine\">Medicine</option>\n            <option value=\"Nature\">Nature</option>\n            <option value=\"Perception\">Perception</option>\n            <option value=\"Performance\">Performance</option>\n            <option value=\"Persuasion\">Persuasion</option>\n            <option value=\"Religion\">Religion</option>\n            <option value=\"Sleight of Hand\">Sleight Of Hand</option>\n            <option value=\"Stealth\">Stealth</option>\n            <option value=\"Survival\">Survival</option>\n        </select>\n    );\n};\n\nSkillSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nSkillSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default SkillSelector;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst StatSelector = ({ onChange, value }) => {\n    return (\n        <select value={value} onChange={onChange}>\n            <option value=\"None\" disabled hidden>Select Stat</option>\n            <option value=\"STR\">STR</option>\n            <option value=\"DEX\">DEX</option>\n            <option value=\"CON\">CON</option>\n            <option value=\"INT\">INT</option>\n            <option value=\"WIS\">WIS</option>\n            <option value=\"CHA\">CHA</option>\n        </select>\n    );\n};\n\nStatSelector.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string\n}\n\nStatSelector.defaultProps = {\n    value: 'None'\n}\n\nexport default StatSelector;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { numberToString, calculateCR } from '../UnitConversionCalculator';\nimport SkillSelector from '../selectors/SkillSelector';\nimport StatSelector from '../selectors/StatSelector';\n\nimport './MonsterModal.css';\nimport CRSelector from '../selectors/CRSelector';\n\nclass SkillsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange, onChangeNumber} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className=\"column-continer\">\n                        <div className=\"row-container\">Skills <button onClick={this.onAddElement('skills', {skill: 'None', modifier: 0})} className=\"left-margin\">Add Skill</button></div> \n                        {monster.skills.map((skill, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <SkillSelector value={skill.skill} onChange={onChange(`skills.${idx}.skill`)}/>\n                                <input className='left-margin number-size' type='number' value={skill.modifier || ''} onChange={onChangeNumber(`skills.${idx}.modifier`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('skills', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Saving Throws <button onClick={this.onAddElement('savingThrows', {stat: 'None', modifier: 0})} className=\"left-margin\">Add Save</button></div> \n                        {monster.savingThrows.map((save, idx) => (\n                            <div className='row-container top-margin' key={idx}>\n                                <StatSelector value={save.stat} onChange={onChange(`savingThrows.${idx}.stat`)}/>\n                                <input className='left-margin number-size' type='number' value={save.modifier || ''} onChange={onChangeNumber(`savingThrows.${idx}.modifier`)}/>\n                                <button className='left-margin' onClick={this.onRemoveElement('savingThrows', idx)}>Delete</button>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Vulnerabilities <input onChange={onChange('damageVulnerabilities')} value={monster.damageVulnerabilities} className=\"left-margin\"/></div> \n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Resistances <input onChange={onChange('damageResistances')} value={monster.damageResistances} className=\"left-margin\"/></div> \n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Damage Immunities <input onChange={onChange('damageImmunities')} value={monster.damageImmunities} className=\"left-margin\"/></div> \n                    </div>\n                    <div className=\"column-continer top-margin\">\n                        <div className=\"row-container\">Condition Immunities <input onChange={onChange('conditionImmunities')} value={monster.conditionImmunities} className=\"left-margin\"/></div> \n                    </div>\n                    <textarea className='top-margin textarea-size' value={monster.senses} onChange={onChange('senses')} placeholder='Senses'/>\n                    <textarea className='top-margin textarea-size' value={monster.languages} onChange={onChange('languages')} placeholder='Languages'/>\n                    <div className='row-container top-margin'>\n                        CR:\n                        <div className='left-margin'><CRSelector value={monster.xp.toString()} onChange={onChangeNumber('xp')}/></div>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                {monster.skills.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Skills&nbsp;</span>\n                        <span className='red-text'>{monster.skills.map((skill, idx) => `${idx === 0 ? '' : ', '}${skill.skill} ${numberToString(skill.modifier)}`)}</span>\n                    </div>\n                )}\n                {monster.savingThrows.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Saving Throws&nbsp;</span>\n                        <span className='red-text'>{monster.savingThrows.map((save, idx) => `${idx === 0 ? '' : ', '}${save.stat} ${numberToString(save.modifier)}`)}</span>\n                    </div>\n                )}\n                {monster.damageVulnerabilities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Vulnerabilities&nbsp;</span>\n                        <span className='red-text'>{monster.damageVulnerabilities}</span>\n                    </div>\n                )}\n                {monster.damageResistances.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Resistances&nbsp;</span>\n                        <span className='red-text'>{monster.damageResistances}</span>\n                    </div>\n                )}\n                {monster.damageImmunities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Damage Immunities&nbsp;</span>\n                        <span className='red-text'>{monster.damageImmunities}</span>\n                    </div>\n                )}\n                {monster.conditionImmunities.length !== 0 && (\n                    <div className='row-container mm-align-left'>\n                        <span className='red-text bold-text'>Condition Immunities&nbsp;</span>\n                        <span className='red-text'>{monster.conditionImmunities}</span>\n                    </div>\n                )}\n                {monster.senses !== '' && monster.senses != null && (\n                    <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Senses&nbsp;</span>\n                        <span className='red-text'>{monster.senses}</span>\n                    </div>\n                )}\n                {monster.languages !== '' && monster.languages != null && (\n                    <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Languages&nbsp;</span>\n                        <span className='red-text'>{monster.languages}</span>\n                    </div>\n                )}\n                <div className='mm-align-left'>\n                        <span className='red-text bold-text'>Challenge&nbsp;</span>\n                        <span className='red-text'>{`${calculateCR(monster.xp)} (${monster.xp} XP)`}</span>\n                </div>\n\n            </div>\n        );\n    }\n};\n\nSkillsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    onChangeNumber: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nSkillsSection.defaultProps = {\n}\n\nexport default SkillsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass AbilitiesSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Abilities: <button className='left-margin' onClick={this.onAddElement('abilities', {name: '', descr: ''})}>Add Ability</button>\n                    </div>\n                    {monster.abilities.map((ability, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Ability Name' value={ability.name} onChange={onChange(`abilities.${idx}.name`)}/>\n                            <textarea className='mm-margin-element textarea-size' placeholder='Ability Description' value={ability.descr} onChange={onChange(`abilities.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('abilities', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if (monster.abilities.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom mm-align-left'>\n                {monster.abilities.map((ability, idx) => (\n                    <div key={idx}>\n                        <span className='bold-text'>{ability.name}&nbsp;</span>\n                        <span>{ability.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nAbilitiesSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nAbilitiesSection.defaultProps = {\n}\n\nexport default AbilitiesSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nclass ActionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = this.props.monster[prop].filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = this.props.monster[prop].concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Actions: <button className='left-margin' onClick={this.onAddElement('actions', {name: '', descr: ''})}>Add Action</button>\n                    </div>\n                    {monster.actions.map((action, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' type='text' placeholder='Action Name' value={action.name} onChange={onChange(`actions.${idx}.name`)}/>\n                            <textarea className='textarea-size mm-margin-element' placeholder='Action Description' value={action.descr} onChange={onChange(`actions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('actions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(monster.actions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Actions</div>\n                {monster.actions.map((action, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{action.name}&nbsp;</span>\n                        <span>{action.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nActionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nActionsSection.defaultProps = {\n}\n\nexport default ActionsSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { property } from 'underscore';\n\nimport './MonsterModal.css';\n\nclass ActionsSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.onRemoveElement = this.onRemoveElement.bind(this);\n        this.onAddElement = this.onAddElement.bind(this);\n    }\n\n    onRemoveElement(prop, index) {\n        return _ => {\n            const list = (property(prop.split('.'))(this.props.monster)).filter((element, idx) => idx !== index);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            })\n        };\n    }\n\n    onAddElement(prop, value) {\n        return _ => {\n            const list = (property(prop.split('.'))(this.props.monster)).concat([value]);\n            this.props.onChange(prop)({\n                target: {\n                    value: list,\n                }\n            });\n        };\n    }\n\n    render() {\n        const {editable, monster, onChange} = this.props;\n        if(editable) {\n            return (\n                <div className='monster-form-section border-bottom'>\n                    <div className='row-container'>\n                        Legendary Actions: <button className='left-margin' onClick={this.onAddElement('legendaryActions.actions', {name: '', descr: ''})}>Add Action</button>\n                    </div>\n                    <textarea className='top-margin textarea-size' placeholder='Legendary Action Summary and Restrictions' onChange={onChange('legendaryActions.summary')} value={monster.legendaryActions.summary}/>\n                    {monster.legendaryActions.actions.map((action, idx) => (\n                        <div key={idx} className='row-container top-margin'>\n                            <input className='mm-margin-element' placeholder='Action Name' type='text' value={action.name} onChange={onChange(`legendaryActions.actions.${idx}.name`)}/>\n                            <textarea className='mm-margin-element textarea-size' placeholder='Action Description' value={action.descr} onChange={onChange(`legendaryActions.actions.${idx}.descr`)}/>\n                            <button className='mm-margin-element' onClick={this.onRemoveElement('legendaryActions.actions', idx)}>Delete</button>\n                        </div>\n                    ))}\n                </div>\n            );\n        } else if(monster.legendaryActions.actions.length === 0) {\n            return null;\n        }\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div className='red-text bold-text'>Legendary Actions</div>\n                <div>{monster.legendaryActions.summary}</div>\n                {monster.legendaryActions.actions.map((action, idx) => (\n                    <div className='top-margin mm-align-left' key={idx}>\n                        <span className='bold-text'>{action.name}&nbsp;</span>\n                        <span>{action.descr}</span>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n};\n\nActionsSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nActionsSection.defaultProps = {\n}\n\nexport default ActionsSection;","import React, { Component } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport PropTypes from 'prop-types';\nimport { noop } from 'underscore';\nimport { getMonsterImage } from '../data-store/MonsterImages';\n\nimport './MonsterModal.css';\n\nclass MonsterImageSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pictureURL: null,\n            loadingImage: false,\n        };\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    componentDidMount() {\n        const { monster } = this.props;\n        if(monster.imageKey != null) {\n            getMonsterImage(monster.imageKey).then(result => {\n                this.setState({\n                    pictureURL: result,\n                })\n            }).catch(e => {\n                monster.imageKey = null;\n            });\n            this.setState({\n                loadingImage: true,\n            });\n        }\n    }\n\n    onDrop(picture) {\n        const reader = new FileReader();\n        reader.onload = _ => {\n            this.props.onImageSet(reader.result);\n            this.setState({\n                pictureURL: reader.result,\n                loadingImage: false,\n            });\n        }\n        reader.readAsDataURL(picture[0]);\n        this.setState({\n            loadingImage: true,\n        })\n    }\n\n    render() {\n        const { loadingImage, pictureURL } = this.state;\n        const { editable } = this.props;\n        if(!loadingImage && pictureURL == null) {\n            if(editable) {\n                return (\n                    <ImageUploader\n                        withIcon={true}\n                        buttonText='Choose images'\n                        onChange={this.onDrop}\n                        imgExtension={['.jpg', '.jpeg', '.gif', '.png', '.gif']}\n                        maxFileSize={5242880}\n                    />\n                );\n            }\n            return null;\n        }\n        return (\n            <div className=\"row-container center-container\">\n                <img style={{maxHeight: '20em'}} alt=\"Loading...\" src={pictureURL}/>\n            </div>\n        );\n    }\n};\n\nMonsterImageSection.propTypes = {\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool,\n    onImageSet: PropTypes.func,\n}\n\nMonsterImageSection.defaultProps = {\n    editable: false,\n    onImageSet: noop,\n}\n\nexport default MonsterImageSection;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MonsterModal.css';\n\nconst DescriptionSection = ({ onChange, monster, editable }) => {\n    if(editable) {\n        return (\n            <div className='monster-form-section border-bottom'>\n                <div>Description:</div>\n                <textarea className='textarea-size top-margin' onChange={onChange('description')} value={monster.description}/>\n            </div>\n        );\n    }\n    return (\n        <div className='monster-form-section border-bottom mm-align-left'>\n            <span>{monster.description}</span>\n        </div>\n    );\n};\n\nDescriptionSection.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    monster: PropTypes.shape({}).isRequired,\n    editable: PropTypes.bool.isRequired\n}\n\nDescriptionSection.defaultProps = {\n}\n\nexport default DescriptionSection;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, clone } from 'underscore';\nimport SimpleModal from '../../common/modals/SimpleModal';\nimport NameSection from './NameSection';\nimport CombatSection from './CombatSection';\nimport StatSection from './StatSection';\nimport SkillsSection from './SkillsSection';\nimport AbilitiesSection from './AbilitiesSection';\nimport ActionsSection from './ActionsSection';\nimport LegendaryActionsSection from './LegendaryActionsSection';\nimport MonsterImageSection from './MonsterImageSection';\nimport DescriptionSection from './DescriptionSection';\n\nimport './MonsterModal.css';\n\nconst setPathValue = (object, path, value) => {\n    const splitPath = path.split(\".\");\n    let location = object;\n    for(let i = 0; i < splitPath.length; i++) {\n        const currentPath = splitPath[i];\n        if(i === splitPath.length -1) {\n            location[currentPath] = value;\n        } else {\n            if(location[currentPath] == null) {\n                location[currentPath] = {};\n            }\n            location = location[currentPath];\n        }\n    }\n}\n\nclass MonsterModal extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeNumber = this.onChangeNumber.bind(this);\n    }\n\n    onChange(path) {\n        const { monster } = this.props;\n        return event => {\n            const value = event.target.value;\n            const newMonster = clone(monster);\n            setPathValue(newMonster, path, value);\n            this.props.onMonsterChange(newMonster);\n        }\n    }\n\n    onChangeNumber(path) {\n        const { monster } = this.props;\n        return event => {\n            const value = parseInt(event.target.value);\n            const newMonster = clone(monster);\n            setPathValue(newMonster, path, value);\n            this.props.onMonsterChange(newMonster);\n        }\n    }\n\n    render() {\n        const { editable, show, monster, onSave, onCancel, onDelete, onImageSet, onToggleEdit } = this.props;\n        if(monster == null) {\n            return null;\n        }\n        return (\n            <SimpleModal show={show}>\n                <div className='monster-form'>\n                    <NameSection editable={editable} monster={monster} onChange={this.onChange}/>\n                    <CombatSection editable={editable} monster={monster} onChange={this.onChange} onChangeNumber={this.onChangeNumber} />\n                    <StatSection editable={editable} monster={monster} onChangeNumber={this.onChangeNumber}/>\n                    <SkillsSection editable={editable} monster={monster} onChange={this.onChange} onChangeNumber={this.onChangeNumber} />\n                    <AbilitiesSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <ActionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <LegendaryActionsSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <DescriptionSection editable={editable} monster={monster} onChange={this.onChange} />\n                    <div className='monster-form-section'>\n                        <MonsterImageSection editable={editable} monster={monster} onImageSet={onImageSet}/>\n                    </div>\n                    { editable ? (\n                    <div className='row-container-space-between top-margin'>\n                        <button onClick={onSave}>Save</button>\n                        {monster.id != null && <button onClick={onDelete}>Delete</button>}\n                        <button onClick={onCancel}>Cancel</button>\n                    </div>) :\n                    <div className='row-container-space-between top-margin'>\n                        {onToggleEdit !== noop && <button onClick={onToggleEdit}>Edit</button>}\n                        <button onClick={onCancel}>Close</button>\n                    </div>\n                    }\n\n                </div>\n\n            </SimpleModal>\n        );\n    }\n}\n\nMonsterModal.propTypes = {\n    monster: PropTypes.shape({\n\n    }),\n    editable: PropTypes.bool,\n    show: PropTypes.bool.isRequired,\n    onSave: PropTypes.func,\n    onCancel: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n    onImageSet: PropTypes.func,\n    onToggleEdit: PropTypes.func,\n};\n\nMonsterModal.defaultProps = {\n    monster: null,\n    editable: false,\n    onMonsterChange: noop,\n    onSave: noop,\n    onDelete: noop,\n    onImageSet: noop,\n    onToggleEdit: noop,\n};\n\nexport default MonsterModal;\n","import React from 'react';\nimport MoonLoader from 'react-spinners/MoonLoader';\n\nimport './LoadingModal.css';\n\nconst LoadingModal = ({ show, children }) => {\n    const showHideClassName = show ? \"lm-modal display-block\" : \"modal display-none\";\n    return (\n      <div className={showHideClassName}>\n        <div className='lm-modal-main'>\n            <MoonLoader\n                sizeUnit={'px'}\n                size={200}\n                loading={show}\n                color={'#123abc'}\n            />\n            {children}\n        </div>\n      </div>\n    );\n};\n\nexport default LoadingModal;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from './SimpleModal';\n\nimport './SelectOrEditModal.css';\n\nconst SelectOrEditModal = ({ onSelect, onView, addText, viewText, show }) => {\n    return (\n        <SimpleModal show={show}>\n            <div className='soem-container'>\n                <div className='soem-element'>{`${addText} or ${viewText.toLowerCase()} element.`}</div>\n                <div className='soem-button-row'>\n                    <button className='soem-element' onClick={onSelect}>{addText}</button>\n                    <button className='soem-element' onClick={onView}>{viewText}</button>\n                </div>\n            </div>\n        </SimpleModal>\n    );\n};\n\nSelectOrEditModal.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onView: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired,\n    addText: PropTypes.string,\n    viewText: PropTypes.string,\n}\n\nSelectOrEditModal.defaultProps = {\n    addText: 'Select',\n    viewText: 'View',\n}\n\nexport default SelectOrEditModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllMonsters, buildEmptyMonster, buildMonsterId, addMonster, removeMonsterById } from './data-store/Monsters';\nimport { addMonsterImage, removeMonsterImageById } from './data-store/MonsterImages';\nimport MonsterViewerHeader from './MonsterViewerHeader';\nimport MonsterModal from './modal/MonsterModal';\nimport LoadingModal from '../common/modals/LoadingModal';\nimport { calculateCR } from './UnitConversionCalculator';\nimport SelectOrEditModal from '../common/modals/SelectOrEditModal';\n\nimport './MonsterViewer.css';\n\nconst sortMonsterList = monsterList => {\n    return monsterList.sort((a, b) => {\n        const nameA = a.id.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.id.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass MonsterViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsterList: [],\n            loading: true,\n            selectedMonster: null,\n            imageURL: null,\n            filterXp: null,\n            filterName: null,\n            editing: false,\n            selectOrViewMonster: null,\n        };\n        this.onAddMonster = this.onAddMonster.bind(this);\n        this.onImageSet = this.onImageSet.bind(this);\n        this.onMonsterChange = this.onMonsterChange.bind(this);\n        this.viewMonster = this.viewMonster.bind(this);\n        this.changeMonster = this.changeMonster.bind(this);\n        this.onDeleteMonster = this.onDeleteMonster.bind(this);\n        this.saveMonsterModel = this.saveMonsterModel.bind(this);\n        this.cancelMonsterModal = this.cancelMonsterModal.bind(this);\n        this.changeXPFilter = this.changeXPFilter.bind(this);\n        this.changeNameFilter = this.changeNameFilter.bind(this);\n        this.onToggleEdit = this.onToggleEdit.bind(this);\n    }\n\n    onAddMonster() {\n        this.setState({\n            selectedMonster: buildEmptyMonster(),\n            imageURL: null,\n            editing: true,\n        });\n    }\n\n    onImageSet(imageURL) {\n        this.setState({\n            imageURL,\n        })\n    }\n\n    onToggleEdit() {\n        this.setState({\n            editing: true,\n        })\n    }\n\n    onMonsterChange(monster) {\n        this.setState({\n            selectedMonster: monster,\n            selectOrViewMonster: null,\n        });\n    }\n\n    viewMonster(monster) {\n        this.onMonsterChange(monster);\n    }\n\n    changeMonster(monster) {\n        return _ => {\n            if(this.props.onSelectMonster == null) {\n                this.onMonsterChange(monster);\n            } else {\n                this.setState({\n                    selectOrViewMonster: monster,\n                })\n            }\n        };\n    }\n\n    cancelMonsterModal() {\n        this.setState({\n            selectedMonster: null,\n            imageURL: null,\n            editing: false\n        });\n    }\n\n    onDeleteMonster() {\n        const monster = this.state.selectedMonster;\n        let { monsterList } = this.state;\n        monsterList = monsterList.filter(mon => mon.id !== monster.id);\n        if(monster.imageKey) {\n            removeMonsterImageById(monster.imageKey);\n        }\n        removeMonsterById(monster.id);\n        this.setState({\n            selectedMonster: null,\n            monsterList: sortMonsterList(monsterList),\n            imageURL: null,\n            editing: false,\n        });\n    }\n\n    saveMonsterModel() {\n        const monster = this.state.selectedMonster;\n        let { monsterList, imageURL } = this.state;\n        if(monster.id == null) {\n            buildMonsterId(monster);\n            monsterList = monsterList.concat([monster])\n            if(imageURL) {\n                addMonsterImage(imageURL).then(id => {\n                    monster.imageKey = id;\n                    addMonster(monster);\n                })\n            } else {\n                addMonster(monster);\n            }\n        } else {\n            const oldId = monster.id;\n            monsterList = monsterList.filter(mon => mon.id !== monster.id);\n            buildMonsterId(monster);\n            monsterList = monsterList.concat([monster]);\n            if(imageURL) {\n                addMonsterImage(imageURL).then(id => {\n                    monster.imageKey = id;\n                    removeMonsterById(oldId).then(_ => addMonster(monster));\n                })\n            } else {\n                removeMonsterById(oldId).then(_ => addMonster(monster));\n            }\n        }\n        this.setState({\n            selectedMonster: null,\n            monsterList: sortMonsterList(monsterList),\n            imageURL: null,\n            editing: false,\n        });\n    }\n\n    componentDidMount(props) {\n        getAllMonsters().then(monsterList => {\n            this.setState({\n                monsterList: sortMonsterList(monsterList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    changeNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    changeXPFilter(event) {\n        const xp = event.target.value;\n        this.setState({\n            filterXp: xp === '' ? null : parseInt(xp),\n        });\n    }\n\n    render() {\n        const { onSelectMonster } = this.props;\n        const { loading, monsterList, selectedMonster, filterName, filterXp, editing, selectOrViewMonster } = this.state;\n        const showSelectedMonster = selectedMonster != null;\n        const showSelectOrViewMonster = selectOrViewMonster != null;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='mv-view'>\n            <MonsterViewerHeader\n                filterXp={filterXp}\n                filterName={filterName}\n                onAddMonster={this.onAddMonster}\n                onNameFilter={this.changeNameFilter}\n                onXPFilter={this.changeXPFilter}\n            />\n            <LoadingModal show={loading}/>\n            <SelectOrEditModal\n                onSelect={_ => onSelectMonster(selectOrViewMonster)}\n                onView={_ => this.viewMonster(selectOrViewMonster)}\n                show={showSelectOrViewMonster}\n            />\n            <MonsterModal\n                monster={selectedMonster}\n                show={showSelectedMonster}\n                onSave={this.saveMonsterModel}\n                onCancel={this.cancelMonsterModal}\n                onMonsterChange={this.onMonsterChange}\n                onImageSet={this.onImageSet}\n                onDelete={this.onDeleteMonster}\n                editable={editing}\n                onToggleEdit={this.onToggleEdit}\n            />\n            {monsterList.filter(monster => {\n                const nameMatch = formattedFilterName == null || monster.name.toUpperCase().indexOf(formattedFilterName) >= 0;\n                const xpMatch = filterXp == null || monster.xp === filterXp;\n                return xpMatch && nameMatch;\n            }).map(monster => (\n                <div className='mv-monster' key={monster.id} onClick={this.changeMonster(monster)}>\n                    {`${monster.name} CR ${calculateCR(monster.xp)}`}\n                </div>\n            ))}\n        </div>\n        );\n    }\n}\n\nMonsterViewer.propTypes = {\n    onSelectMonster: PropTypes.func,\n}\n\nMonsterViewer.defaultProps = {\n    onSelectMonster: null,\n}\n\nexport default MonsterViewer;\n","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'players';\n\naddStore(storeName, {keyPath: 'id', autoIncrement: true});\n\nexport const addPlayer = player => {\n    const db = getDatabase();\n    return db.put(storeName, player);\n};\n\nexport const removePlayerById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const getPlayerById = id => {\n    const db = getDatabase();\n    return db.get(storeName, id);\n};\n\nexport const getAllPlayers = _ => getDatabase().getAll(storeName);\n\nexport const buildEmptyPlayer = _ => ({\n    playerName: '',\n    characterName: '',\n    level: 0,\n    maxHp: 0,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PlayerViewerHeader.css';\n\nclass PlayerViewerHeader extends Component {\n    /*constructor(props) {\n        super(props);\n        //this.getDisplayElement = this.getDisplayElement.bind(this);\n    }*/\n\n    render() {\n        const { onAddPlayer, onNameFilter, filterName } = this.props;\n        return (\n            <div className='player-viewer-header'>\n                <input\n                    className='pvh-first-element'\n                    placeholder='Filter By Player Name'\n                    type='search'\n                    value={filterName || ''}\n                    onChange={onNameFilter}\n                />\n                <button className='pvh-last-element' onClick={onAddPlayer}>Add Player</button>\n            </div>\n        );\n    }\n}\n\nPlayerViewerHeader.propTypes = {\n    filterName: PropTypes.string,\n    onNameFilter: PropTypes.func.isRequired,\n    onAddPlayer: PropTypes.func.isRequired,\n};\n\nPlayerViewerHeader.defaultProps = {\n    filterName: null,\n};\n\nexport default PlayerViewerHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { noop, clone } from 'underscore';\nimport SimpleModal from '../../common/modals/SimpleModal';\n\nimport './PlayerModal.css';\n\nconst setPathValue = (object, path, value) => {\n    const splitPath = path.split(\".\");\n    let location = object;\n    for(let i = 0; i < splitPath.length; i++) {\n        const currentPath = splitPath[i];\n        if(i === splitPath.length -1) {\n            location[currentPath] = value;\n        } else {\n            if(location[currentPath] == null) {\n                location[currentPath] = {};\n            }\n            location = location[currentPath];\n        }\n    }\n}\n\nclass PlayerModal extends Component {\n    constructor(props) {\n        super(props);\n        this.onChange = this.onChange.bind(this);\n        this.onChangeNumber = this.onChangeNumber.bind(this);\n    }\n\n    onChange(path) {\n        const { player } = this.props;\n        return event => {\n            const value = event.target.value;\n            const newPlayer = clone(player);\n            setPathValue(newPlayer, path, value);\n            this.props.onPlayerChange(newPlayer);\n        }\n    }\n\n    onChangeNumber(path) {\n        const { player } = this.props;\n        return event => {\n            const value = parseInt(event.target.value);\n            const newPlayer = clone(player);\n            setPathValue(newPlayer, path, value);\n            this.props.onPlayerChange(newPlayer);\n        }\n    }\n\n    render() {\n        const { show, player, onSave, onCancel, onDelete } = this.props;\n        if(player == null) {\n            return null;\n        }\n        return (\n            <SimpleModal show={show}>\n                <div className='player-modal-form'>\n                    <div className='pm-row-container pm-flex-start pm-margin-top'>\n                        <input\n                            className='pm-first-element'\n                            type='text'\n                            placeholder='Player Name'\n                            onChange={this.onChange('playerName')} value={player.playerName || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-input'\n                            type='text'\n                            placeholder='Character Name'\n                            onChange={this.onChange('characterName')} value={player.characterName || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-number-input'\n                            type='number'\n                            placeholder='Level'\n                            onChange={this.onChangeNumber('level')} value={player.level || ''}\n                        />\n                        <input\n                            className='pm-margin-left pm-number-input'\n                            type='number'\n                            placeholder='Max Hp'\n                            onChange={this.onChangeNumber('maxHp')} value={player.maxHp || ''}\n                        />\n                    </div>\n                    <div className='pm-row-container pm-space-between pm-margin-top pm-margin-bottom'>\n                        <button className='pm-first-element' onClick={onSave}>Save</button>\n                        {player.id != null && <button className='pm-element' onClick={onDelete}>Delete</button>}\n                        <button className='pm-last-element' onClick={onCancel}>Cancel</button>\n                    </div>\n                </div>\n\n            </SimpleModal>\n        );\n    }\n}\n\nPlayerModal.propTypes = {\n    player: PropTypes.shape({\n\n    }),\n    show: PropTypes.bool.isRequired,\n    onSave: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n    onPlayerChange: PropTypes.func,\n};\n\nPlayerModal.defaultProps = {\n    player: null,\n    onPlayerChange: noop,\n    onDelete: noop,\n};\n\nexport default PlayerModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllPlayers, removePlayerById, addPlayer, buildEmptyPlayer } from './data-store/Players';\nimport PlayerViewerHeader from './PlayerViewerHeader';\n\nimport './PlayerViewer.css';\nimport PlayerModal from './modal/PlayerModal';\nimport SelectOrEditModal from '../common/modals/SelectOrEditModal';\nimport LoadingModal from '../common/modals/LoadingModal';\n\n/*const sortPlayerListByCharacter = playerList => {\n    return playerList.sort((a, b) => {\n        const nameA = a.characterName.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.characterName.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}*/\n\nconst sortPlayerListByPlayer = playerList => {\n    return playerList.sort((a, b) => {\n        const nameA = a.playerName.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.playerName.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass PlayerViewer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playerList: [],\n            loading: true,\n            filterName: null,\n            selectedPlayer: null,\n            selectOrEditPlayer: null,\n        };\n        this.onNameFilter = this.onNameFilter.bind(this);\n        this.onDeletePlayer = this.onDeletePlayer.bind(this);\n        this.onSavePlayer = this.onSavePlayer.bind(this);\n        this.onCancelPlayerModal = this.onCancelPlayerModal.bind(this);\n        this.onPlayerChange = this.onPlayerChange.bind(this);\n        this.viewPlayer = this.viewPlayer.bind(this);\n        this.changePlayer = this.changePlayer.bind(this);\n        this.onAddPlayer = this.onAddPlayer.bind(this);\n        this.sortMethod = sortPlayerListByPlayer;\n    }\n\n    componentDidMount() {\n        getAllPlayers().then(playerList => {\n            this.setState({\n                playerList: this.sortMethod(playerList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    onNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    onPlayerChange(player) {\n        this.setState({\n            selectedPlayer: player,\n            selectOrEditPlayer: null,\n        });\n    }\n\n    viewPlayer(player) {\n        this.onPlayerChange(player);\n    }\n\n    changePlayer(player) {\n        return _ => {\n            if(this.props.onSelectPlayer == null) {\n                this.onPlayerChange(player);\n            } else {\n                this.setState({\n                    selectOrEditPlayer: player,\n                })\n            }\n        };\n    }\n\n    onAddPlayer() {\n        this.setState({\n            selectedPlayer: buildEmptyPlayer(),\n        })\n    }\n\n    onCancelPlayerModal() {\n        this.setState({\n            selectedPlayer: null,\n        });\n    }\n\n    onDeletePlayer() {\n        const player = this.state.selectedPlayer;\n        let { playerList } = this.state;\n        playerList = playerList.filter(plyr => plyr.id !== player.id);\n        removePlayerById(player.id);\n        this.setState({\n            selectedPlayer: null,\n            playerList: this.sortMethod(playerList),\n        });\n    }\n\n    onSavePlayer() {\n        const player = this.state.selectedPlayer;\n        let { playerList } = this.state;\n        if(player.id == null) {\n            addPlayer(player).then(id => {\n                player.id = id;\n                playerList = playerList.concat([player])\n                this.setState({\n                    selectedPlayer: null,\n                    playerList: this.sortMethod(playerList),\n                });\n            });\n        } else {\n            playerList = playerList.map(plyr => {\n                if(plyr.id !== player.id) {\n                    return plyr;\n                }\n                return player;\n            });\n            addPlayer(player); //acts as a put\n            this.setState({\n                selectedPlayer: null,\n                playerList: this.sortMethod(playerList),\n            });\n        }\n    }\n\n    render() {\n        const { loading, playerList, selectedPlayer, filterName, selectOrEditPlayer } = this.state;\n        const { onSelectPlayer } = this.props;\n        const showSelectedPlayer = selectedPlayer != null;\n        const showSelectOrEditPlayer = selectOrEditPlayer != null;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='pv-view'>\n            <PlayerViewerHeader\n                filterName={filterName}\n                onAddPlayer={this.onAddPlayer}\n                onNameFilter={this.onNameFilter}\n            />\n            <LoadingModal show={loading}/>\n            <SelectOrEditModal\n                onSelect={_ => onSelectPlayer(selectOrEditPlayer)}\n                onView={_ => this.viewPlayer(selectOrEditPlayer)}\n                show={showSelectOrEditPlayer}\n            />\n            <PlayerModal\n                player={selectedPlayer}\n                show={showSelectedPlayer}\n                onSave={this.onSavePlayer}\n                onCancel={this.onCancelPlayerModal}\n                onDelete={this.onDeletePlayer}\n                onPlayerChange={this.onPlayerChange}\n            />\n            {playerList.filter(player => {\n                const nameMatch = formattedFilterName == null || player.playerName.toUpperCase().indexOf(formattedFilterName) >= 0;\n                return nameMatch;\n            }).map(player => (\n                <div className='pv-player' key={player.id} onClick={this.changePlayer(player)}>\n                    <div>{`${player.characterName} (${player.playerName})`}</div>\n                    <div>Level: {player.level} Max Hp: {player.maxHp}</div>\n                </div>\n            ))}\n        </div>\n        );\n    }\n};\n\nPlayerViewer.propTypes = {\n    onSelectPlayer: PropTypes.func,\n}\n\nPlayerViewer.defaultProps = {\n    onSelectPlayer: null,\n}\n\nexport default PlayerViewer;","export const LIST = 'LIST';\n\nexport const BUILDER = 'BUILDER';\n\nexport const RUNNER = 'RUNNER';","import { getDatabase, addStore } from '../../common/data-store/IndexedDB';\n\nconst storeName = 'encounters';\n\naddStore(storeName, {keyPath: 'id', autoIncrement: true});\n\nexport const getAllEncounters = _ => getDatabase().getAll(storeName);\n\nexport const addEncounter = encounter => {\n    const db = getDatabase();\n    return db.put(storeName, encounter);\n};\n\nexport const removeEncounterById = id => {\n    const db = getDatabase();\n    return db.delete(storeName, id);\n};\n\nexport const buildEmptyEncounter = _ => ({\n        name: '', //name of the encounter\n        monsters: [], //{id: monsterId, count: monstersInEncounter}\n        players: [], //playerIds\n});\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EncountersListHeader.css';\n\nclass EncountersListHeader extends Component {\n    /*constructor(props) {\n        super(props);\n        //this.getDisplayElement = this.getDisplayElement.bind(this);\n    }*/\n\n    render() {\n        const { onAddEncounter, onNameFilter, filterName } = this.props;\n        return (\n            <div className='encounters-list-header'>\n                <input\n                    placeholder='Filter By Name'\n                    type='search'\n                    value={filterName || ''}\n                    onChange={onNameFilter}\n                />\n                <button onClick={onAddEncounter}>Add Encounter</button>\n            </div>\n        );\n    }\n}\n\nEncountersListHeader.propTypes = {\n    filterName: PropTypes.string,\n    onNameFilter: PropTypes.func.isRequired,\n    onAddEncounter: PropTypes.func.isRequired,\n};\n\nEncountersListHeader.defaultProps = {\n    filterName: null,\n};\n\nexport default EncountersListHeader;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAllEncounters, removeEncounterById } from '../data-store/Encounters';\nimport { BUILDER, RUNNER } from '../Views';\nimport EncountersListHeader from './EncountersListHeader';\n\nimport './EncountersList.css';\n\nconst sortEncounterList = encounterList => {\n    return encounterList.sort((a, b) => {\n        const nameA = a.name.toUpperCase(); // ignore upper and lowercase\n        const nameB = b.name.toUpperCase(); // ignore upper and lowercase\n        if (nameA < nameB) {\n            return -1;\n        } else if (nameA > nameB) {\n            return 1;\n        }\n        return 0;\n    });\n}\n\nclass EncountersList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encounterList: [],\n            loading: true,\n            filterName: null,\n        };\n        this.onNameFilter = this.onNameFilter.bind(this);\n        this.onDeleteEncounter = this.onDeleteEncounter.bind(this);\n        this.onEditEncounter = this.onEditEncounter.bind(this);\n        this.onRunEncounter = this.onRunEncounter.bind(this);\n    }\n\n    componentDidMount() {\n        getAllEncounters().then(encounterList => {\n            this.setState({\n                encounterList: sortEncounterList(encounterList),\n                loading: false,\n            });\n        }).catch(error => {\n            console.error(error);\n        });\n    }\n\n    onNameFilter(event) {\n        const filterName = event.target.value;\n        this.setState({\n            filterName,\n        });\n    }\n\n    onEditEncounter(encounter = null) {\n        return _ => this.props.onChangeView(BUILDER, encounter);\n    }\n\n    onRunEncounter(encounter = null) {\n        return _ => this.props.onChangeView(RUNNER, encounter);\n    }\n\n    onDeleteEncounter(encounterId) {\n        return _ => {\n            let { encounterList } = this.state;\n            encounterList = encounterList.filter(encounter => encounter.id !== encounterId);\n            removeEncounterById(encounterId);\n            this.setState({\n                encounterList: sortEncounterList(encounterList),\n            });\n        }\n    }\n\n    render() {\n        const { encounterList, filterName } = this.state;\n        const formattedFilterName = filterName == null || filterName === '' ? null : filterName.toUpperCase();\n        return (\n        <div className='el-view'>\n            <EncountersListHeader\n                filterName={filterName}\n                onAddEncounter={this.onEditEncounter()}\n                onNameFilter={this.onNameFilter}\n            />\n            {encounterList.filter(encounter => {\n                const nameMatch = formattedFilterName == null || encounter.name.toUpperCase().indexOf(formattedFilterName) >= 0;\n                return nameMatch;\n            }).map(encounter => (\n                <div className='el-encounter' key={encounter.id}>\n                    <div>{encounter.name}</div>\n                    <div className='el-margin-top el-row-space-between'>\n                        <button className='el-row-force-space' onClick={this.onEditEncounter(encounter)}>Edit</button>\n                        <button className='el-row-force-space' onClick={this.onDeleteEncounter(encounter.id)}>Delete</button>\n                        <button className='el-row-force-space'\n                            onClick={this.onRunEncounter(encounter)}\n                        >Run</button>\n                    </div>\n                </div>\n            ))}\n        </div>\n        );\n    }\n};\n\nEncountersList.propTypes = {\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncountersList.defaultProps = {\n}\n\nexport default EncountersList;","import { getMonsterById } from '../../monsters/data-store/Monsters';\nimport { getPlayerById } from '../../players/data-store/Players';\nimport { has } from 'underscore';\n\nexport const buildUseableEncounter = storedEncounter => {\n    const encounter = {};\n    encounter.id = storedEncounter.id;\n    encounter.name = storedEncounter.name;\n    encounter.monsters = []; // {count: 1, monster}\n    encounter.players = []; //players\n    const monsterPromise = storedEncounter.monsters.reduce((accumulator, element) => {\n        const promiseForNextMonster = getMonsterById(element.id).then(monster => {\n            encounter.monsters.push({\n                count: element.count,\n                monster,\n            });\n        });\n        if(accumulator == null) {\n           return promiseForNextMonster; \n        } else {\n            return accumulator.then( _ => promiseForNextMonster);\n        }\n    }, new Promise((resolve, rejct) => resolve()));\n    return monsterPromise.then( _ => {\n        return storedEncounter.players.reduce((accumulator, element) => {\n            const promiseForNextPlayer = getPlayerById(element).then(player => {\n                encounter.players.push(player);\n            });\n            if(accumulator == null) {\n                return promiseForNextPlayer;\n            }\n            return accumulator.then(_ => promiseForNextPlayer);\n        }, new Promise((resolve, rejct) => resolve()));\n    }).then(_ => encounter);\n}\n\nexport const buildStorableEncounter = useableEncounter => {\n    const encounter = {};\n    encounter.name = useableEncounter.name;\n    encounter.monsters = [];\n    encounter.players = [];\n    if(has(useableEncounter, 'id')) {\n        encounter.id = useableEncounter.id;\n    }\n    useableEncounter.players.forEach(player => encounter.players.push(player.id));\n    useableEncounter.monsters.forEach(monsterGroup => encounter.monsters.push({\n        id: monsterGroup.monster.id,\n        count: monsterGroup.count,\n    }));\n    return encounter;\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { calculateCR } from '../../monsters/UnitConversionCalculator';\nimport MonsterModal from '../../monsters/modal/MonsterModal';\n\nimport './EncounterBuilder.css';\n\nclass EBMonsterList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewMonster: null,\n        };\n        this.viewMonster = this.viewMonster.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    viewMonster(monster) {\n        return _ => {\n            this.setState({\n                viewMonster: monster,\n            });\n        }\n    }\n\n    closeModal() {\n        this.setState({\n            viewMonster: null,\n        });\n    }\n\n    render() {\n        const { onAddMonster, monsterList, onRemoveMonster, onChangeMonsterQty } = this.props;\n        const { viewMonster } = this.state;\n        return (\n            <div className='eb-list-container'>\n                <button onClick={onAddMonster}>Add Monster</button>\n                {monsterList.map(monsterGroup => (\n                    <div key={monsterGroup.monster.id} className='eb-list-element'>\n                        <input type='number' className='eb-number-input' onChange={onChangeMonsterQty(monsterGroup.monster.id)} value={monsterGroup.count}></input>\n                        <div onClick={this.viewMonster(monsterGroup.monster)} className='eb-margin-element eb-clickable'>{`${monsterGroup.monster.name} CR ${calculateCR(monsterGroup.monster.xp)}`}</div>\n                        <button className='eb-margin-element' onClick={onRemoveMonster(monsterGroup.monster.id)}>Delete</button>\n                    </div>\n                ))}\n                <MonsterModal\n                    monster={viewMonster}\n                    show={viewMonster != null}\n                    onCancel={this.closeModal}\n                    editable={false}\n                />\n            </div>\n        );\n    }\n}\n\nEBMonsterList.propTypes = {\n    onAddMonster: PropTypes.func.isRequired,\n    onRemoveMonster: PropTypes.func.isRequired,\n    onChangeMonsterQty: PropTypes.func.isRequired,\n    monsterList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nEBMonsterList.defaultProps = {\n}\n\nexport default EBMonsterList;","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './EncounterBuilder.css';\n\nconst EBPlayerList = ({ onAddPlayer, onRemovePlayer, playerList }) => {\n    return (\n        <div className='eb-list-container'>\n            <button onClick={onAddPlayer}>Add Player</button>\n            {playerList.map(player => (\n                <div className='eb-list-element' key={player.id}>\n                    <div className='eb-margin-element'>{`${player.characterName} (${player.playerName}) Level: ${player.level}, Max Hp: ${player.maxHp}`}</div>\n                    <button className='eb-margin-element' onClick={onRemovePlayer(player.id)}>Delete</button>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nEBPlayerList.propTypes = {\n    onAddPlayer: PropTypes.func.isRequired,\n    onRemovePlayer: PropTypes.func.isRequired,\n    playerList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n}\n\nEBPlayerList.defaultProps = {\n}\n\nexport default EBPlayerList;","export const xpThresholds = [\n    {level: 1, easy: 25, medium: 50, hard: 75, deadly: 100},\n    {level: 2, easy: 50, medium: 100, hard: 150, deadly: 200},\n    {level: 3, easy: 75, medium: 150, hard: 225, deadly: 400},\n    {level: 4, easy: 125, medium: 250, hard: 375, deadly: 500},\n    {level: 5, easy: 250, medium: 500, hard: 750, deadly: 1100},\n    {level: 6, easy: 300, medium: 600, hard: 900, deadly: 1400},\n    {level: 7, easy: 350, medium: 750, hard: 1100, deadly: 1700},\n    {level: 8, easy: 450, medium: 900, hard: 1400, deadly: 2100},\n    {level: 9, easy: 550, medium: 1100, hard: 1600, deadly: 2400},\n    {level: 10, easy: 600, medium: 1200, hard: 1900, deadly: 2800},\n    {level: 11, easy: 800, medium: 1600, hard: 2400, deadly: 3600},\n    {level: 12, easy: 1000, medium: 2000, hard: 3000, deadly: 4500},\n    {level: 13, easy: 1100, medium: 2200, hard: 3400, deadly: 5100},\n    {level: 14, easy: 1250, medium: 2500, hard: 3800, deadly: 5700},\n    {level: 15, easy: 1400, medium: 2800, hard: 4300, deadly: 6400},\n    {level: 16, easy: 1600, medium: 3200, hard: 4800, deadly: 7200},\n    {level: 17, easy: 2000, medium: 3900, hard: 5900, deadly: 8800},\n    {level: 18, easy: 2100, medium: 4200, hard: 6300, deadly: 9500},\n    {level: 19, easy: 2400, medium: 4900, hard: 7300, deadly: 10900},\n    {level: 20, easy: 2800, medium: 5700, hard: 8500, deadly: 12700},\n];\n\nexport const findThreshold = level => {\n    return xpThresholds.filter(thresholds => thresholds.level === level)[0];\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { buildEmptyEncounter, addEncounter } from '../data-store/Encounters';\nimport { buildUseableEncounter, buildStorableEncounter } from '../data-store/EncounterHelpers';\nimport MonsterViewer from '../../monsters/MonsterViewer';\nimport PlayerViewer from '../../players/PlayerViewer';\nimport { LIST } from '../Views';\nimport EBMonsterList from './EBMonsterList';\nimport EBPlayerList from './EBPlayerList';\nimport { findThreshold } from './XPThresholds';\n\nimport './EncounterBuilder.css';\n\nconst calculateDifficulty = encounter => {\n    const thresholds = encounter.players.map(player => findThreshold(player.level));\n    const threshold = thresholds.reduce((totalThreshold, currentValue) => {\n        totalThreshold.easy += currentValue.easy;\n        totalThreshold.medium += currentValue.medium;\n        totalThreshold.hard += currentValue.hard;\n        totalThreshold.deadly += currentValue.deadly;\n        return totalThreshold;\n    }, {easy: 0, medium: 0, hard: 0, deadly: 0});\n    const monsterXpAndCount = encounter.monsters.reduce((total, monsterGroup) => {\n        total.xp += (monsterGroup.monster.xp * monsterGroup.count);\n        total.count += (monsterGroup.count);\n        return total;\n    }, {xp: 0, count: 0});\n    let monsterXp = monsterXpAndCount.xp;\n    const count = monsterXpAndCount.count;\n    if(count >= 15) {\n        monsterXp *= 4;\n    } else if(count >= 11) {\n        monsterXp *= 3;\n    } else if(count >= 7) {\n        monsterXp *= 2.5;\n    } else if (count >= 3) {\n        monsterXp *= 2;\n    } else if (count === 2) {\n        monsterXp *= 1.5;\n    }\n    if(monsterXp > threshold.deadly) {\n        return 'Deadly';\n    } else if(monsterXp > threshold.hard) {\n        return 'Hard';\n    } else if (monsterXp > threshold.medium) {\n        return 'Medium';\n    } else if (monsterXp > threshold.easy) {\n        return 'Easy';\n    } else {\n        return 'Trivial';\n    }\n}\n\nclass EncounterBuilder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            encounter: null,\n            selectingMonster: false,\n            selectingPlayer: false,\n            difficulty: 'Easy',\n        };\n        this.addPlayer = this.addPlayer.bind(this);\n        this.addMonster = this.addMonster.bind(this);\n        this.onSelectPlayer = this.onSelectPlayer.bind(this);\n        this.onSelectMonster = this.onSelectMonster.bind(this);\n        this.onRemovePlayer = this.onRemovePlayer.bind(this);\n        this.onRemoveMonster = this.onRemoveMonster.bind(this);\n        this.changeName = this.changeName.bind(this);\n        this.onChangeMonsterQty = this.onChangeMonsterQty.bind(this);\n        this.onSave = this.onSave.bind(this);\n    }\n\n    componentDidMount() {\n        let { encounter } = this.props;\n        if(encounter == null) {\n            encounter = buildEmptyEncounter();\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        } else {\n            buildUseableEncounter(encounter).then(useableEncounter => {\n                this.setState({\n                    encounter: useableEncounter,\n                    difficulty: calculateDifficulty(useableEncounter),\n                });\n            });\n        }\n    }\n\n    changeName(event) {\n        const { encounter } = this.state;\n        encounter.name = event.target.value;\n        this.setState({\n            encounter,\n        })\n    }\n\n    addPlayer() {\n        this.setState({\n            selectingPlayer: true,\n        })\n    }\n\n    addMonster() {\n        this.setState({\n            selectingMonster: true,\n        })\n    }\n\n    onSelectPlayer(player) {\n        const { encounter } = this.state;\n        encounter.players.push(player);\n        this.setState({\n            selectingPlayer: false,\n            difficulty: calculateDifficulty(encounter),\n        })\n    }\n\n    onSelectMonster(monster) {\n        const { encounter } = this.state;\n        encounter.monsters.push({\n            monster,\n            count: 1,\n        });\n        this.setState({\n            selectingMonster: false,\n            difficulty: calculateDifficulty(encounter),\n        })\n    }\n\n    onChangeMonsterQty(monsterId) {\n        return event => {\n            const { encounter } = this.state;\n            const qty = parseInt(event.target.value);\n            encounter.monsters.forEach(monsterGroup => {\n                if(monsterGroup.monster.id === monsterId) {\n                    monsterGroup.count = qty;\n                }\n            });\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            })\n        }\n    }\n\n    onRemovePlayer(playerId) {\n        return _ => {\n            const { encounter } = this.state;\n            encounter.players = encounter.players.filter(player => player.id !== playerId);\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        }\n    }\n\n    onRemoveMonster(monsterId) {\n        return _ => {\n            const { encounter } = this.state;\n            encounter.monsters = encounter.monsters.filter(monster => monster.monster.id !== monsterId);\n            this.setState({\n                encounter,\n                difficulty: calculateDifficulty(encounter),\n            });\n        }\n    }\n\n    onSave() {\n        const { encounter } = this.state;\n        addEncounter(buildStorableEncounter(encounter)).then(_ => this.props.onChangeView(LIST));\n    }\n\n    render() {\n        const { encounter, selectingMonster, selectingPlayer, difficulty } = this.state;\n        if(encounter == null) {\n            return (<div>Loading Encounter...</div>)\n        } else if(selectingMonster) {\n            return (<MonsterViewer onSelectMonster={this.onSelectMonster}/>);\n        } else if(selectingPlayer) {\n            return (<PlayerViewer onSelectPlayer={this.onSelectPlayer}/>);\n        }\n        return (\n            <div className='eb-view'>\n                <div className='eb-header'>\n                <input\n                    className='eb-name-input'\n                    type='text'\n                    placeholder='Name Encounter'\n                    onChange={this.changeName}\n                    value={encounter.name}\n                />\n                <button className='eb-margin-element' onClick={this.onSave}>Save</button>\n                </div>\n                <div className='eb-difficulty-text'>Difficulty:&nbsp;{difficulty}</div>\n                <div className='eb-groups-container'>\n                    <EBPlayerList playerList={encounter.players} onAddPlayer={this.addPlayer} onRemovePlayer={this.onRemovePlayer}/>\n                    <EBMonsterList monsterList={encounter.monsters} onAddMonster={this.addMonster} onRemoveMonster={this.onRemoveMonster} onChangeMonsterQty={this.onChangeMonsterQty}/>\n                </div>\n            </div>\n        );\n    }\n};\n\nEncounterBuilder.propTypes = {\n    encounter: PropTypes.shape({\n        name: PropTypes.string,\n        monsters: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            count: PropTypes.number, \n        })),\n        players: PropTypes.arrayOf(PropTypes.number),\n    }),\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncounterBuilder.defaultProps = {\n    encounter: null,\n}\n\nexport default EncounterBuilder;","import React from 'react';\nimport { Droppable } from \"react-beautiful-dnd\";\nimport PropTypes from 'prop-types';\n\nconst DroppableWrapper = props => (\n  <Droppable droppableId={props.droppableId}>\n    {provided => (\n      <div className={props.className}\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            {...provided.droppablePlaceholder}>\n              {props.children}\n      </div>\n    )}\n  </Droppable>\n);\n\nDroppableWrapper.propTypes = {\n    droppableId: PropTypes.any.isRequired,\n}\n\nDroppableWrapper.defaultProps = {\n}\n\nexport default DroppableWrapper;","import React from 'react';\nimport { Draggable } from \"react-beautiful-dnd\";\nimport PropTypes from 'prop-types';\n\nconst DraggableWrapper = props => (\n  <Draggable draggableId={props.draggableId} index={props.index}>\n    {provided => (\n      <div className={props.className}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}>\n              {props.children}\n      </div>\n    )}\n  </Draggable>\n);\n\nDraggableWrapper.propTypes = {\n    draggableId: PropTypes.any.isRequired,\n}\n\nDraggableWrapper.defaultProps = {\n}\n\nexport default DraggableWrapper;","export const DAMAGE = 'damage';\nexport const HEAL = 'heal';\nexport const TEMP_HEALTH = 'tmpHealth';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SimpleModal from '../../common/modals/SimpleModal';\nimport { DAMAGE, HEAL, TEMP_HEALTH } from './TargetTypes';\n\nimport './TargetModal.css';\n\nclass TargetModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: DAMAGE,\n            qty: 0,\n        };\n        this.changeDmg = this.changeDmg.bind(this);\n        this.changeType = this.changeType.bind(this);\n    }\n\n    changeDmg(event) {\n        const qty = parseInt(event.target.value);\n        this.setState({\n            qty,\n        });\n    }\n\n    changeType(event) {\n        const type = event.target.value;\n        this.setState({\n            type,\n        });\n    }\n\n    render() {\n        const { show, dealToTarget } = this.props;\n        const { type, qty } = this.state;\n        return (\n            <SimpleModal show={show}>\n                <div className='tm-container'>\n                    <input className='tm-number-element' type='number' value={qty} onChange={this.changeDmg}/>\n                    <div>\n                        Damage\n                        <input\n                            type='radio'\n                            value={DAMAGE}\n                            checked={type === DAMAGE}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <div>\n                        Heal\n                        <input\n                            type='radio'\n                            value={HEAL}\n                            checked={type === HEAL}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <div>\n                        Temporary Hp\n                        <input\n                            type='radio'\n                            value={TEMP_HEALTH}\n                            checked={type === TEMP_HEALTH}\n                            onChange={this.changeType}\n                        />\n                    </div>\n                    <button className='tm-element' onClick={_ => dealToTarget(this.state)}>Ok</button>\n                </div>\n            </SimpleModal>\n        );\n    }\n}\n\nTargetModal.propTypes = {\n    show: PropTypes.bool.isRequired,\n    dealToTarget: PropTypes.func,\n}\n\nTargetModal.defaultProps = {\n}\n\nexport default TargetModal;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport DroppableWrapper from '../../common/dnd/DroppableWrapper';\nimport DraggableWrapper from '../../common/dnd/DraggableWrapper';\nimport { buildUseableEncounter } from '../data-store/EncounterHelpers';\nimport MonsterModal from '../../monsters/modal/MonsterModal';\nimport { LIST } from '../Views';\n\nimport './EncounterRunner.css';\nimport TargetModal from './TargetModal';\nimport { DAMAGE, HEAL, TEMP_HEALTH } from './TargetTypes';\n\nconst buildDisplayString = creature => {\n    let result = creature.name;\n    if(creature.multiple) {\n        result += '[' + creature.monsterId.toString() +']';\n    }\n    result += ' ' + creature.hp + '/' + creature.maxHp;\n    if(creature.tmpHp > 0) {\n        result += ' (' + creature.tmpHp + ' Tmp Hp)';\n    }\n    if(!creature.isPlayer) {\n        result += ' AC: ' + creature.monster.ac.toString();\n    }\n    return result;\n}\n\nclass EncounterRunner extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            creatureList: [],\n            selectedMonster: null,\n            targetIdx: null,\n        };\n        this.onDragEnd = this.onDragEnd.bind(this);\n        this.selectMonster = this.selectMonster.bind(this);\n        this.onCloseModal = this.onCloseModal.bind(this);\n        this.onDealToTarget = this.onDealToTarget.bind(this);\n        this.removeCreature = this.removeCreature.bind(this);\n    }\n\n    componentDidMount() {\n        let { encounter, onChangeView } = this.props;\n        if(encounter == null) {\n            console.error('Should not make it to runner without encounter');\n            onChangeView(LIST, null);\n        } else {\n            buildUseableEncounter(encounter).then(useableEncounter => {\n                this.setState({\n                    creatureList: this.buildCreatureList(useableEncounter),\n                });\n            });\n        }\n    }\n\n    buildCreatureList(useableEncounter) {\n        let id = 0;\n        let creatureList = useableEncounter.players.map(player => ({\n            id: id++,\n            name: player.characterName,\n            hp: player.maxHp,\n            maxHp: player.maxHp,\n            tmpHp: 0,\n            multiple: false,\n            isPlayer: true,\n        }));\n        useableEncounter.monsters.forEach(monsterGroup => {\n            const multiple = monsterGroup.count > 1 ? true : false;\n            for(let i = 0; i < monsterGroup.count; i++) {\n                id++;\n                creatureList.push({\n                    id,\n                    name: monsterGroup.monster.name,\n                    hp: monsterGroup.monster.hp,\n                    maxHp: monsterGroup.monster.hp,\n                    tmpHp: 0,\n                    monsterId: i,\n                    multiple,\n                    monster: monsterGroup.monster,\n                    isPlayer: false,\n                });\n            }\n        });\n        return creatureList;\n    }\n\n    selectMonster(creature) {\n        return _ => {\n            this.setState({\n                selectedMonster: creature.monster,\n            });\n        }\n    }\n\n    onCloseModal() {\n        this.setState({\n            selectedMonster: null,\n        });\n    }\n\n    selectTarget(targetIdx) {\n        return _ => {\n            this.setState({\n                targetIdx,\n            })\n        };\n    }\n\n    onDealToTarget(result) {\n        console.log(result);\n        const { targetIdx, creatureList } = this.state;\n        const creature = creatureList[targetIdx];\n        switch(result.type) {\n            case DAMAGE: {\n                let dmg = result.qty;\n                if(creature.tmpHp > 0) {\n                    if(dmg >= creature.tmpHp) {\n                        dmg -= creature.tmpHp;\n                        creature.tmpHp = 0;\n                    } else {\n                        creature.tmpHp -= dmg;\n                        dmg = 0;\n                    }\n                    creature.hp -= dmg;\n                } else {\n                    creature.hp -= result.qty;\n                }\n                break;\n            }\n            case HEAL: {\n                creature.hp += result.qty;\n                if(creature.hp > creature.maxHp) {\n                    creature.hp = creature.maxHp;\n                }\n                break;\n            }\n            case TEMP_HEALTH: {\n                creature.tmpHp = result.qty;\n                break;\n            }\n            default:\n                console.error('Unknow health change type');\n        }\n        this.setState({\n            targetIdx: null,\n        })\n    }\n\n    removeCreature(idx) {\n        return _ => {\n            const { creatureList } = this.state;\n            creatureList.splice(idx, 1);\n            this.setState({\n                creatureList,\n            })\n        };\n    }\n\n    onDragEnd(result) {\n        let { creatureList } = this.state;\n        const destIndex = result.destination.index;\n        const currentIndex = result.source.index;\n        const creature = creatureList[currentIndex];\n        creatureList.splice(currentIndex, 1);\n        creatureList.splice(destIndex, 0, creature);\n        this.setState({\n            creatureList,\n        });\n    }\n\n    render() {\n        const { creatureList, selectedMonster, targetIdx } = this.state;\n        return (\n            <div className='er-container'>\n                <MonsterModal\n                    monster={selectedMonster}\n                    show={selectedMonster != null}\n                    onCancel={this.onCloseModal}\n                    editable={false}\n                />\n                <TargetModal\n                    show={targetIdx !== null}\n                    dealToTarget={this.onDealToTarget}\n                />\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <DroppableWrapper className='er-droppable' droppableId='creatureList'>\n                        { creatureList.map((creature, idx) => (\n                            <DraggableWrapper className='er-draggable' key={creature.id} draggableId={creature.id.toString()} index={idx}>\n                                <div className='er-creature-container'>\n                                    <div onClick={creature.isPlayer ? null : this.selectMonster(creature)} className='er-element'>{buildDisplayString(creature)}</div>\n                                    <div>\n                                        <button className='er-element' onClick={this.selectTarget(idx)}>Target</button>\n                                        {creature.hp <= 0 && <button className='er-element' onClick={this.removeCreature(idx)}>Remove</button>}\n                                    </div>\n                                </div>\n                            </DraggableWrapper>\n                        ))}\n                    </DroppableWrapper>\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n\nEncounterRunner.propTypes = {\n    encounter: PropTypes.shape({\n        name: PropTypes.string,\n        monsters: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string,\n            count: PropTypes.number, \n        })),\n        players: PropTypes.arrayOf(PropTypes.number),\n    }),\n    onChangeView: PropTypes.func.isRequired,\n}\n\nEncounterRunner.defaultProps = {\n    encounter: null,\n}\n\nexport default EncounterRunner;","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { LIST, BUILDER, RUNNER } from './Views';\nimport EncountersList from './list/EncountersList';\nimport EncounterBuilder from './builder/EncounterBuilder';\nimport EncounterRunner from './runner/EncounterRunner';\n\nclass EncountersContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: LIST,\n            encounter: null,\n        };\n        this.onChangeView = this.onChangeView.bind(this);\n    }\n\n    onChangeView(view, encounter = null) {\n        this.setState({\n            view,\n            encounter,\n        });\n    }\n\n    render() {\n        const { view, encounter } = this.state;\n        switch(view) {\n            case LIST: {\n                return (<EncountersList onChangeView={this.onChangeView}/>);\n            }\n            case BUILDER: {\n                return (<EncounterBuilder onChangeView={this.onChangeView} encounter={encounter}/>)\n            }\n            case RUNNER: {\n                return (<EncounterRunner onChangeView={this.onChangeView} encounter={encounter}/>)\n            }\n            default: {\n                console.error('Received unknown encounter view');\n            }\n        }\n        return null;\n    }\n};\n\nEncountersContainer.propTypes = {\n}\n\nEncountersContainer.defaultProps = {\n}\n\nexport default EncountersContainer;","import React from 'react';\nimport MonsterViewer from './components/monsters/MonsterViewer';\nimport PlayerViewer from './components/players/PlayerViewer';\nimport EncountersContainer from './components/encounters/EncountersContainer';\n\nconst rootMenu = {\n    'Encounters' : <EncountersContainer/>,\n    'Monster Viewer' : <MonsterViewer/>,\n    'Player Viewer' : <PlayerViewer/>,\n};\n\nexport default rootMenu;","import { buildEmptyMonster } from './Monsters';\nimport { calculateXP, calculateCR } from '../UnitConversionCalculator';\n\nconst capitalizeEachWord = string => {\n    let words = string.split(' ');\n    words = words.map(str => str.charAt(0).toUpperCase() + str.slice(1));\n    return words.reduce((resultStr, word)=> {\n        return resultStr.length > 0 ? resultStr + ' ' + word : word;\n    }, '');\n}\n\nconst skillList = [\n    'acrobatics',\n    'animal_handling',\n    'arcana',\n    'athletics',\n    'deception',\n    'history',\n    'insight',\n    'intimidation',\n    'investigation',\n    'medicine',\n    'nature',\n    'perception',\n    'performance',\n    'persuasion',\n    'religion',\n    'sleight_of_hand',\n    'stealth',\n    'survival'\n];\n\nexport const fromJsonExportFormat = exportMonster => {\n    const monster = buildEmptyMonster();\n    monster.name = exportMonster.name;\n    monster.size = exportMonster.size;\n    monster.type = capitalizeEachWord(exportMonster.type);\n    monster.alignment = capitalizeEachWord(exportMonster.alignment);\n    monster.ac = exportMonster.armor_class;\n    monster.hp = exportMonster.hit_points;\n    monster.hitDie = exportMonster.hit_dice;\n    monster.speed = exportMonster.speed;\n    monster.stats.str = exportMonster.strength;\n    monster.stats.dex = exportMonster.dexterity;\n    monster.stats.con = exportMonster.constitution;\n    monster.stats.int = exportMonster.intelligence;\n    monster.stats.wis = exportMonster.wisdom;\n    monster.stats.cha = exportMonster.charisma;\n    if(exportMonster.strength_save) {\n        monster.savingThrows.push({stat: 'STR', modifier: exportMonster.strength_save});\n    }\n    if(exportMonster.dexterity_save) {\n        monster.savingThrows.push({stat: 'DEX', modifier: exportMonster.dexterity_save});\n    }\n    if(exportMonster.constitution_save) {\n        monster.savingThrows.push({stat: 'CON', modifier: exportMonster.constitution_save});\n    }\n    if(exportMonster.intelligence_save) {\n        monster.savingThrows.push({stat: 'INT', modifier: exportMonster.intelligence_save});\n    }\n    if(exportMonster.wisdom_save) {\n        monster.savingThrows.push({stat: 'WIS', modifier: exportMonster.wisdom_save});\n    }\n    if(exportMonster.charisma_save) {\n        monster.savingThrows.push({stat: 'CHA', modifier: exportMonster.charisma_save});\n    }\n    skillList.forEach(skill => {\n        if(exportMonster[skill]) {\n            const skillName = capitalizeEachWord(skill.replace('_', ' '));\n            monster.skills.push({skill: skillName, modifier: exportMonster[skill]});\n        }\n    });\n    monster.damageVulnerabilities = exportMonster.damage_vulnerabilities ;\n    monster.damageResistances = exportMonster.damage_resistances; \n    monster.damageImmunities = exportMonster.damage_immunities;\n    monster.conditionImmunities = exportMonster.condition_immunities;\n    monster.senses = exportMonster.senses;\n    monster.languages = exportMonster.languages;\n    monster.xp = calculateXP(exportMonster.challenge_rating);\n    if(exportMonster.special_abilities) {\n        monster.abilities = exportMonster.special_abilities.map(specialAbility => ({\n            name: specialAbility.name,\n            descr: specialAbility.desc,\n        }));\n    }\n    if(exportMonster.actions) {\n        monster.actions = exportMonster.actions.map(action => ({\n            name: action.name,\n            descr: action.desc,\n        }));\n    }\n    if(exportMonster.legendary_actions) {\n        monster.legendaryActions.actions = exportMonster.legendary_actions.map(action => ({\n            name: action.name,\n            descr: action.desc,\n        }));\n    }\n    return monster;\n}\n\nexport const toJsonExportFormat = monster => {\n    const exportMonster = {};\n    exportMonster.name = monster.name;\n    exportMonster.size = monster.size;\n    exportMonster.type = monster.type.toLowerCase();\n    exportMonster.subtype = '';\n    exportMonster.alignment = monster.alignment.toLowerCase();\n    exportMonster.armor_class = monster.armor_class;\n    exportMonster.hit_points = monster.hp;\n    exportMonster.hit_dice = monster.hitDie;\n    exportMonster.speed = monster.speed;\n    exportMonster.strength = monster.stats.str;\n    exportMonster.dexterity = monster.stats.dex;\n    exportMonster.constitution = monster.stats.con;\n    exportMonster.intelligence = monster.stats.int;\n    exportMonster.wisdom = monster.stats.wis;\n    exportMonster.charisma = monster.stats.cha;\n    monster.savingThrows.forEach(save => {\n        if(save.stat === 'STR') {\n            exportMonster.strength_save = save.modifier;\n        } else if(save.stat === 'DEX') {\n            exportMonster.dexterity_save = save.modifier;\n        } else if(save.stat === 'CON') {\n            exportMonster.constitution_save = save.modifier;\n        } else if(save.stat === 'INT') {\n            exportMonster.intelligence_save = save.modifier;\n        } else if(save.stat === 'WIS') {\n            exportMonster.wisdom_save = save.modifier;\n        } else if(save.stat === 'CHA') {\n            exportMonster.charisma_save = save.modifier;\n        }\n    });\n    monster.skills.forEach(skill => {\n        exportMonster[skill.skill] = skill.modifier;\n    });\n    exportMonster.damage_vulnerabilities = monster.damageVulnerabilities;\n    exportMonster.damage_resistances = monster.damageResistances; \n    exportMonster.damage_immunities = monster.damageImmunities;\n    exportMonster.condition_immunities = monster.conditionImmunities;\n    exportMonster.senses = monster.senses;\n    exportMonster.languages = monster.languages;\n    exportMonster.challenge_rating = calculateCR(monster.xp);\n    if(monster.abilities.length > 0) {\n        exportMonster.special_abilities = monster.abilities.map(ability => ({\n            name: ability.name,\n            desc: ability.descr,\n        }));\n    }\n    if(monster.actions.length > 0) {\n        exportMonster.actions = monster.actions.map(action => ({\n            name: action.name,\n            desc: action.descr,\n        }));\n    }\n    if(monster.legendaryActions.actions.length > 0) {\n        exportMonster.legendary_actions = monster.legendaryActions.actions.map(action => ({\n            name: action.name,\n            desc: action.descr,\n        }));\n    }\n    return exportMonster;\n}\n","import React, { Component } from 'react';\nimport Menu from './components/menu/Menu';\nimport rootMenu from './RootMenu';\nimport LoadingModal from './components/common/modals/LoadingModal';\nimport { openDatabase } from './components/common/data-store/IndexedDB';\nimport { fromJsonExportFormat } from './components/monsters/data-store/MonsterFormatConverter';\nimport { addMonster, buildMonsterId } from './components/monsters/data-store/Monsters';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentLocation: null,\n      databaseLoaded: false,\n      loadingSRDMonsters: false,\n    };\n    this.getDisplayElement = this.getDisplayElement.bind(this);\n    this.backToRootMenu = this.backToRootMenu.bind(this);\n    this.menuSelection = this.menuSelection.bind(this);\n  }\n\n  componentDidMount(props) {\n    const srdListLoadedStr = 'SRD_LIST_LOADED';\n    openDatabase().then(_ => {\n      console.log('App DataStore opened');\n      const srdListLoaded = localStorage.getItem(srdListLoadedStr);\n      if(!srdListLoaded) {\n        this.setState({\n          loadingSRDMonsters: true,\n        });\n        const importPromise = fetch('https://raw.githubusercontent.com/cfogrady/5eEncounters/master/5e-SRD-Monsters.json')\n        .then(response => response.json())\n        .then(data => {\n          return data.reduce((promise, exportMonster) => {\n            if(exportMonster.license) {\n              return promise;\n            }\n            const monster = fromJsonExportFormat(exportMonster);\n            buildMonsterId(monster);\n            return promise.then(_ => addMonster(monster))\n          }, new Promise((resolve, reject) => resolve()));\n        });\n        return importPromise.then(_ => {\n          localStorage.setItem(srdListLoadedStr, true);\n          console.log('SRD Monsters imported');\n        });\n      }\n    }).then(_ => {\n      this.setState({\n        databaseLoaded: true,\n        loadingSRDMonsters: false,\n      });\n    });\n  }\n\n  menuSelection(value) {\n    return _ => {\n      this.setState({\n        currentLocation: value\n      });\n    };\n  }\n\n  getDisplayElement() {\n    const { currentLocation } = this.state;\n    if(!currentLocation) {\n      return <Menu menuItems={Object.keys(rootMenu)} onSelect={this.menuSelection}/>;\n    }\n    return rootMenu[currentLocation];\n\n  }\n\n  backToRootMenu() {\n    this.setState({\n      currentLocation: null\n    });\n  }\n  render() {\n    const displayElement = this.getDisplayElement();\n    const { currentLocation, databaseLoaded, loadingSRDMonsters } = this.state;\n    console.log('Render loadingSRD:', loadingSRDMonsters);\n    if(!databaseLoaded) {\n      return (\n        <LoadingModal show={!databaseLoaded}>\n          {loadingSRDMonsters && <div style={{marginTop: '1em', color: 'white'}}>One Time Load of SRD Monsters</div>}\n        </LoadingModal>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <div className='app-location'>\n          {displayElement}\n        </div>\n        {currentLocation != null && <button onClick={this.backToRootMenu}>Menu</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}